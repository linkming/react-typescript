{"ast":null,"code":"/**\n * @fileOverview the Attribute base class\n */\nimport { isString, isArray, isNil, mix, each } from '@antv/util';\n\nfunction toScaleString(scale, value) {\n  if (isString(value)) {\n    return value;\n  }\n\n  return scale.invert(scale.scale(value));\n}\n/**\n * 所有视觉通道属性的基类\n * @class Attr\n */\n\n\nclass AttributeBase {\n  constructor(cfg) {\n    /**\n     * 属性的类型\n     * @type {String}\n     */\n    this.type = 'base';\n    /**\n     * 属性的名称\n     * @type {String}\n     */\n\n    this.name = null;\n    /**\n     * 回调函数\n     * @type {Function}\n     */\n\n    this.method = null;\n    /**\n     * 备选的值数组\n     * @type {Array}\n     */\n\n    this.values = [];\n    /**\n     * 属性内部的度量\n     * @type {Array}\n     */\n\n    this.scales = [];\n    /**\n     * 是否通过线性取值, 如果未指定，则根据数值的类型判定\n     * @type {Boolean}\n     */\n\n    this.linear = null;\n    /**\n     * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n     */\n\n    let mixedCallback = null;\n    const defaultCallback = this.callback;\n\n    if (cfg.callback) {\n      const userCallback = cfg.callback;\n\n      mixedCallback = (...params) => {\n        let ret = userCallback(...params);\n\n        if (isNil(ret)) {\n          ret = defaultCallback.apply(this, params);\n        }\n\n        return ret;\n      };\n    }\n\n    mix(this, cfg);\n\n    if (mixedCallback) {\n      mix(this, {\n        callback: mixedCallback\n      });\n    }\n  } // 获取属性值，将值映射到视觉通道\n\n\n  _getAttrValue(scale, value) {\n    const values = this.values;\n\n    if (scale.isCategory && !this.linear) {\n      const index = scale.translate(value);\n      return values[index % values.length];\n    }\n\n    const percent = scale.scale(value);\n    return this.getLinearValue(percent);\n  }\n  /**\n   * 如果进行线性映射，返回对应的映射值\n   * @protected\n   * @param  {Number} percent 百分比\n   * @return {*}  颜色值、形状、大小等\n   */\n\n\n  getLinearValue(percent) {\n    const values = this.values;\n    const steps = values.length - 1;\n    const step = Math.floor(steps * percent);\n    const leftPercent = steps * percent - step;\n    const start = values[step];\n    const end = step === steps ? start : values[step + 1];\n    const rstValue = start + (end - start) * leftPercent;\n    return rstValue;\n  }\n  /**\n   * 默认的回调函数\n   * @param {*} value 回调函数的值\n   * @type {Function}\n   * @return {Array} 返回映射后的值\n   */\n\n\n  callback(value) {\n    const self = this;\n    const scale = self.scales[0];\n    let rstValue = null;\n\n    if (scale.type === 'identity') {\n      rstValue = scale.value;\n    } else {\n      rstValue = self._getAttrValue(scale, value);\n    }\n\n    return rstValue;\n  }\n  /**\n   * 根据度量获取属性名\n   * @return {Array} dims of this Attribute\n   */\n\n\n  getNames() {\n    const scales = this.scales;\n    const names = this.names;\n    const length = Math.min(scales.length, names.length);\n    const rst = [];\n\n    for (let i = 0; i < length; i++) {\n      rst.push(names[i]);\n    }\n\n    return rst;\n  }\n  /**\n   * 根据度量获取维度名\n   * @return {Array} dims of this Attribute\n   */\n\n\n  getFields() {\n    const scales = this.scales;\n    const rst = [];\n    each(scales, scale => {\n      rst.push(scale.field);\n    });\n    return rst;\n  }\n  /**\n   * 根据名称获取度量\n   * @param  {String} name the name of scale\n   * @return {Scale} scale\n   */\n\n\n  getScale(name) {\n    const scales = this.scales;\n    const names = this.names;\n    const index = names.indexOf(name);\n    return scales[index];\n  }\n  /**\n   * 映射数据\n   * @param {*} param1...paramn 多个数值\n   * @return {Array} 映射的值组成的数组\n   */\n\n\n  mapping(...params) {\n    const scales = this.scales;\n    const callback = this.callback;\n    let values = params;\n\n    if (callback) {\n      for (let i = 0, len = params.length; i < len; i++) {\n        params[i] = this._toOriginParam(params[i], scales[i]);\n      }\n\n      values = callback.apply(this, params);\n    }\n\n    values = [].concat(values);\n    return values;\n  } // 原始的参数\n\n\n  _toOriginParam(param, scale) {\n    let rst = param;\n\n    if (!scale.isLinear) {\n      if (isArray(param)) {\n        rst = [];\n\n        for (let i = 0, len = param.length; i < len; i++) {\n          rst.push(toScaleString(scale, param[i]));\n        }\n      } else {\n        rst = toScaleString(scale, param);\n      }\n    }\n\n    return rst;\n  }\n\n}\n\nexport default AttributeBase;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/attr/base.js"],"names":["isString","isArray","isNil","mix","each","toScaleString","scale","value","invert","AttributeBase","constructor","cfg","type","name","method","values","scales","linear","mixedCallback","defaultCallback","callback","userCallback","params","ret","apply","_getAttrValue","isCategory","index","translate","length","percent","getLinearValue","steps","step","Math","floor","leftPercent","start","end","rstValue","self","getNames","names","min","rst","i","push","getFields","field","getScale","indexOf","mapping","len","_toOriginParam","concat","param","isLinear"],"mappings":"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","sourcesContent":["/**\n * @fileOverview the Attribute base class\n */\nimport {\n  isString,\n  isArray,\n  isNil,\n  mix,\n  each\n} from '@antv/util';\n\nfunction toScaleString(scale, value) {\n  if (isString(value)) {\n    return value;\n  }\n  return scale.invert(scale.scale(value));\n}\n\n/**\n * 所有视觉通道属性的基类\n * @class Attr\n */\nclass AttributeBase {\n\n  constructor(cfg) {\n    /**\n     * 属性的类型\n     * @type {String}\n     */\n    this.type = 'base';\n\n    /**\n     * 属性的名称\n     * @type {String}\n     */\n    this.name = null;\n\n    /**\n     * 回调函数\n     * @type {Function}\n     */\n    this.method = null;\n\n    /**\n     * 备选的值数组\n     * @type {Array}\n     */\n    this.values = [];\n\n    /**\n     * 属性内部的度量\n     * @type {Array}\n     */\n    this.scales = [];\n\n    /**\n     * 是否通过线性取值, 如果未指定，则根据数值的类型判定\n     * @type {Boolean}\n     */\n    this.linear = null;\n\n    /**\n     * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n     */\n    let mixedCallback = null;\n    const defaultCallback = this.callback;\n\n    if (cfg.callback) {\n      const userCallback = cfg.callback;\n      mixedCallback = (...params) => {\n        let ret = userCallback(...params);\n        if (isNil(ret)) {\n          ret = defaultCallback.apply(this, params);\n        }\n        return ret;\n      };\n    }\n\n    mix(this, cfg);\n    if (mixedCallback) {\n      mix(this, { callback: mixedCallback });\n    }\n  }\n\n  // 获取属性值，将值映射到视觉通道\n  _getAttrValue(scale, value) {\n    const values = this.values;\n    if (scale.isCategory && !this.linear) {\n      const index = scale.translate(value);\n      return values[index % values.length];\n    }\n    const percent = scale.scale(value);\n    return this.getLinearValue(percent);\n  }\n\n  /**\n   * 如果进行线性映射，返回对应的映射值\n   * @protected\n   * @param  {Number} percent 百分比\n   * @return {*}  颜色值、形状、大小等\n   */\n  getLinearValue(percent) {\n    const values = this.values;\n    const steps = values.length - 1;\n    const step = Math.floor(steps * percent);\n    const leftPercent = steps * percent - step;\n    const start = values[step];\n    const end = step === steps ? start : values[step + 1];\n    const rstValue = start + (end - start) * leftPercent;\n    return rstValue;\n  }\n\n  /**\n   * 默认的回调函数\n   * @param {*} value 回调函数的值\n   * @type {Function}\n   * @return {Array} 返回映射后的值\n   */\n  callback(value) {\n    const self = this;\n    const scale = self.scales[0];\n    let rstValue = null;\n    if (scale.type === 'identity') {\n      rstValue = scale.value;\n    } else {\n      rstValue = self._getAttrValue(scale, value);\n    }\n    return rstValue;\n  }\n\n  /**\n   * 根据度量获取属性名\n   * @return {Array} dims of this Attribute\n   */\n  getNames() {\n    const scales = this.scales;\n    const names = this.names;\n    const length = Math.min(scales.length, names.length);\n    const rst = [];\n    for (let i = 0; i < length; i++) {\n      rst.push(names[i]);\n    }\n    return rst;\n  }\n\n  /**\n   * 根据度量获取维度名\n   * @return {Array} dims of this Attribute\n   */\n  getFields() {\n    const scales = this.scales;\n    const rst = [];\n    each(scales, scale => {\n      rst.push(scale.field);\n    });\n    return rst;\n  }\n\n  /**\n   * 根据名称获取度量\n   * @param  {String} name the name of scale\n   * @return {Scale} scale\n   */\n  getScale(name) {\n    const scales = this.scales;\n    const names = this.names;\n    const index = names.indexOf(name);\n    return scales[index];\n  }\n\n  /**\n   * 映射数据\n   * @param {*} param1...paramn 多个数值\n   * @return {Array} 映射的值组成的数组\n   */\n  mapping(...params) {\n    const scales = this.scales;\n    const callback = this.callback;\n    let values = params;\n    if (callback) {\n      for (let i = 0, len = params.length; i < len; i++) {\n        params[i] = this._toOriginParam(params[i], scales[i]);\n      }\n      values = callback.apply(this, params);\n    }\n    values = [].concat(values);\n    return values;\n  }\n\n  // 原始的参数\n  _toOriginParam(param, scale) {\n    let rst = param;\n    if (!scale.isLinear) {\n      if (isArray(param)) {\n        rst = [];\n        for (let i = 0, len = param.length; i < len; i++) {\n          rst.push(toScaleString(scale, param[i]));\n        }\n      } else {\n        rst = toScaleString(scale, param);\n      }\n    }\n    return rst;\n  }\n}\n\nexport default AttributeBase;\n"]},"metadata":{},"sourceType":"module"}