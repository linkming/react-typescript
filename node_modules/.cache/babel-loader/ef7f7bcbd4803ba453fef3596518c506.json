{"ast":null,"code":"const Util = require('../util/common');\n\nconst {\n  Group\n} = require('../graphic/index');\n\nconst Marker = require('./marker');\n\nconst MARKER_RADIUS = 3;\n\nclass List {\n  getDefaultCfg() {\n    return {\n      showTitle: false,\n\n      /**\n       * title string\n       * @type {?String}\n       */\n      title: null,\n\n      /**\n       * items array\n       * @type {?Array}\n       */\n      items: null,\n\n      /**\n       * offset between title and items\n       * @type {Number}\n       */\n      titleGap: 12,\n\n      /**\n       * offset between each item\n       * @type {Number}\n       */\n      itemGap: 10,\n\n      /**\n       * the offset between each item in vertical direaction\n       * @type {Number}\n       */\n      itemMarginBottom: 12,\n\n      /**\n       * the formatter for item text\n       * @type {[type]}\n       */\n      itemFormatter: null,\n      itemWidth: null,\n\n      /**\n       * offset between marker and text\n       * @type {Number}\n       */\n      wordSpace: 6,\n      x: 0,\n      y: 0,\n      layout: 'horizontal',\n\n      /**\n       * the join string of `name` and `value`\n       * @type {String}\n       */\n      joinString: ': '\n    };\n  }\n\n  constructor(cfg) {\n    Util.deepMix(this, this.getDefaultCfg(), cfg);\n\n    this._init();\n\n    this._renderTitle();\n\n    this._renderItems();\n  }\n\n  _init() {\n    const container = new Group({\n      zIndex: this.zIndex || 0\n    });\n    this.container = container;\n    const wrapper = container.addGroup();\n    this.wrapper = wrapper;\n    const itemsGroup = wrapper.addGroup({\n      className: 'itemsGroup'\n    });\n    this.itemsGroup = itemsGroup;\n\n    if (this.parent) {\n      this.parent.add(container);\n    }\n  }\n\n  _renderTitle(title) {\n    title = title || this.title;\n    let titleShape = this.titleShape;\n    let titleHeight = 0;\n\n    if (this.showTitle && title) {\n      if (titleShape && !titleShape.get('destroyed')) {\n        titleShape.attr('text', title);\n      } else {\n        const {\n          wrapper,\n          titleStyle\n        } = this;\n        titleShape = wrapper.addShape('text', {\n          className: 'title',\n          attrs: Util.mix({\n            x: 0,\n            y: 0,\n            text: title\n          }, titleStyle)\n        });\n        this.titleShape = titleShape;\n      }\n\n      titleHeight = titleShape.getBBox().height + this.titleGap;\n    }\n\n    this._titleHeight = titleHeight;\n  }\n\n  _renderItems(items) {\n    const self = this;\n    items = items || self.items;\n\n    if (!items) {\n      return;\n    }\n\n    if (self.reversed) {\n      items.reverse();\n    }\n\n    Util.each(items, (item, index) => {\n      self._addItem(item, index);\n    });\n\n    if (items.length > 1) {\n      this._adjustItems();\n    }\n\n    this._renderBackground();\n  }\n\n  _renderBackground() {\n    const background = this.background;\n\n    if (background) {\n      const container = this.container;\n      const wrapper = this.wrapper;\n      const {\n        minX,\n        minY,\n        width,\n        height\n      } = wrapper.getBBox();\n      let padding = background.padding || [0, 0, 0, 0];\n      padding = Util.parsePadding(padding);\n      const attrs = Util.mix({\n        x: minX - padding[3],\n        y: minY - padding[0],\n        width: width + padding[1] + padding[3],\n        height: height + padding[0] + padding[2]\n      }, background);\n      let backShape = this.backShape;\n\n      if (backShape) {\n        backShape.attr(attrs);\n      } else {\n        backShape = container.addShape('Rect', {\n          zIndex: -1,\n          attrs\n        });\n      }\n\n      this.backShape = backShape;\n      container.sort();\n    }\n  }\n\n  _addItem(item) {\n    const itemsGroup = this.itemsGroup;\n    const itemGroup = itemsGroup.addGroup({\n      name: item.name,\n      value: item.value,\n      dataValue: item.dataValue,\n      checked: item.checked\n    });\n    const {\n      unCheckStyle,\n      unCheckColor,\n      nameStyle,\n      valueStyle,\n      wordSpace\n    } = this;\n    const {\n      marker,\n      value\n    } = item;\n    let startX = 0;\n\n    if (unCheckColor) {\n      unCheckStyle.fill = unCheckColor;\n    }\n\n    if (marker) {\n      const radius = marker.radius || MARKER_RADIUS;\n      const markerAttrs = Util.mix({\n        x: radius,\n        y: this._titleHeight\n      }, marker);\n\n      if (item.checked === false) {\n        Util.mix(markerAttrs, unCheckStyle);\n      }\n\n      const markerShape = new Marker({\n        className: 'item-marker',\n        attrs: markerAttrs\n      });\n      itemGroup.add(markerShape);\n      startX += markerShape.getBBox().width + wordSpace;\n    }\n\n    let nameText;\n    let name = item.name;\n\n    if (name) {\n      const joinString = this.joinString || '';\n      name = value ? name + joinString : name;\n      nameText = itemGroup.addShape('text', {\n        className: 'name',\n        attrs: Util.mix({\n          x: startX,\n          y: this._titleHeight,\n          text: this._formatItemValue(name)\n        }, nameStyle, item.checked === false ? unCheckStyle : null)\n      });\n    }\n\n    if (value) {\n      let valueX = startX;\n\n      if (nameText) {\n        valueX += nameText.getBBox().width;\n      }\n\n      itemGroup.addShape('text', {\n        className: 'value',\n        attrs: Util.mix({\n          x: valueX,\n          y: this._titleHeight,\n          text: value\n        }, valueStyle, item.checked === false ? unCheckStyle : null)\n      });\n    }\n\n    return itemGroup;\n  }\n\n  _formatItemValue(value) {\n    const formatter = this.itemFormatter;\n\n    if (formatter) {\n      value = formatter.call(this, value);\n    }\n\n    return value;\n  }\n\n  _getMaxItemWidth() {\n    let width;\n    const itemWidth = this.itemWidth;\n\n    if (Util.isNumber(itemWidth) || Util.isNil(itemWidth)) {\n      return itemWidth;\n    }\n\n    if (itemWidth === 'auto') {\n      const itemsGroup = this.itemsGroup;\n      const children = itemsGroup.get('children');\n      const count = children.length;\n      let maxItemWidth = 0;\n\n      for (let i = 0; i < count; i++) {\n        const {\n          width\n        } = children[i].getBBox();\n        maxItemWidth = Math.max(maxItemWidth, width);\n      }\n\n      const maxLength = this.maxLength;\n      const itemGap = this.itemGap;\n      const twoAvgWidth = (maxLength - itemGap) / 2;\n      const threeAvgWidth = (maxLength - itemGap * 2) / 3;\n\n      if (count === 2) {\n        width = Math.max(maxItemWidth, twoAvgWidth);\n      } else {\n        // 1. max <= 3Avg, 3Avg\n        // 2. 3Avg < max && max < 2avg, 2avg\n        // 3. max > 2avg, max, one column\n        if (maxItemWidth <= threeAvgWidth) {\n          width = threeAvgWidth;\n        } else if (maxItemWidth <= twoAvgWidth) {\n          width = twoAvgWidth;\n        } else {\n          width = maxItemWidth;\n        }\n      }\n\n      return width;\n    }\n  }\n\n  _adjustHorizontal() {\n    const {\n      maxLength,\n      itemsGroup\n    } = this;\n    const children = itemsGroup.get('children');\n    const {\n      itemGap,\n      itemMarginBottom\n    } = this;\n    const titleHeight = this._titleHeight;\n    let row = 0;\n    let rowWidth = 0;\n    let width;\n    let height;\n\n    const itemWidth = this._getMaxItemWidth();\n\n    const legendHitBoxes = [];\n\n    for (let i = 0, len = children.length; i < len; i++) {\n      const child = children[i];\n      const box = child.getBBox();\n      const childHeight = box.height;\n      const childWidth = box.width;\n      width = itemWidth || childWidth;\n      height = childHeight + itemMarginBottom;\n\n      if (width - (maxLength - rowWidth) > 0.0001) {\n        row++;\n        rowWidth = 0;\n      }\n\n      child.moveTo(rowWidth, row * height);\n      legendHitBoxes.push({\n        x: rowWidth,\n        y: row * height + titleHeight - childHeight / 2,\n        width: childWidth * 1.375,\n        height: childHeight * 1.375\n      });\n      rowWidth += width + itemGap;\n    }\n\n    this.legendHitBoxes = legendHitBoxes;\n    return;\n  }\n\n  _adjustVertical() {\n    const {\n      maxLength,\n      itemsGroup\n    } = this;\n    const {\n      itemGap,\n      itemMarginBottom,\n      itemWidth\n    } = this;\n    const titleHeight = this._titleHeight;\n    const children = itemsGroup.get('children');\n    let colHeight = 0;\n    let width;\n    let height;\n    let maxItemWidth = 0;\n    let totalWidth = 0;\n    const legendHitBoxes = [];\n\n    for (let i = 0, length = children.length; i < length; i++) {\n      const child = children[i];\n      const bbox = child.getBBox();\n      width = bbox.width;\n      height = bbox.height;\n\n      if (Util.isNumber(itemWidth)) {\n        maxItemWidth = itemWidth + itemGap;\n      } else if (width > maxItemWidth) {\n        maxItemWidth = width + itemGap;\n      }\n\n      if (maxLength - colHeight < height) {\n        colHeight = 0;\n        totalWidth += maxItemWidth;\n        child.moveTo(totalWidth, 0);\n        legendHitBoxes.push({\n          x: totalWidth,\n          y: titleHeight - height / 2,\n          width: width * 1.375,\n          height: height * 1.375\n        });\n      } else {\n        child.moveTo(totalWidth, colHeight);\n        legendHitBoxes.push({\n          x: totalWidth,\n          y: colHeight - height / 2 + titleHeight,\n          width: width * 1.375,\n          height: height * 1.375\n        });\n      }\n\n      colHeight += height + itemMarginBottom;\n    }\n\n    this.legendHitBoxes = legendHitBoxes;\n    return;\n  }\n\n  _adjustItems() {\n    const layout = this.layout;\n\n    if (layout === 'horizontal') {\n      this._adjustHorizontal();\n    } else {\n      this._adjustVertical();\n    }\n  }\n\n  moveTo(x, y) {\n    this.x = x;\n    this.y = y;\n    const container = this.container;\n    container && container.moveTo(x, y);\n    return this;\n  }\n\n  setItems(items) {\n    this.clearItems();\n\n    this._renderItems(items);\n  }\n\n  setTitle(title) {\n    this._renderTitle(title);\n  }\n\n  clearItems() {\n    const itemsGroup = this.itemsGroup;\n    itemsGroup.clear();\n  }\n\n  getWidth() {\n    const container = this.container;\n    const bbox = container.getBBox();\n    return bbox.width;\n  }\n\n  getHeight() {\n    const container = this.container;\n    const bbox = container.getBBox();\n    return bbox.height;\n  }\n\n  show() {\n    const container = this.container;\n    container.show();\n  }\n\n  hide() {\n    const container = this.container;\n    container.hide();\n  }\n\n  clear() {\n    const container = this.container;\n    container.clear();\n    container.remove(true);\n  }\n\n}\n\nmodule.exports = List;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/list.js"],"names":["Util","require","Group","Marker","MARKER_RADIUS","List","getDefaultCfg","showTitle","title","items","titleGap","itemGap","itemMarginBottom","itemFormatter","itemWidth","wordSpace","x","y","layout","joinString","constructor","cfg","deepMix","_init","_renderTitle","_renderItems","container","zIndex","wrapper","addGroup","itemsGroup","className","parent","add","titleShape","titleHeight","get","attr","titleStyle","addShape","attrs","mix","text","getBBox","height","_titleHeight","self","reversed","reverse","each","item","index","_addItem","length","_adjustItems","_renderBackground","background","minX","minY","width","padding","parsePadding","backShape","sort","itemGroup","name","value","dataValue","checked","unCheckStyle","unCheckColor","nameStyle","valueStyle","marker","startX","fill","radius","markerAttrs","markerShape","nameText","_formatItemValue","valueX","formatter","call","_getMaxItemWidth","isNumber","isNil","children","count","maxItemWidth","i","Math","max","maxLength","twoAvgWidth","threeAvgWidth","_adjustHorizontal","row","rowWidth","legendHitBoxes","len","child","box","childHeight","childWidth","moveTo","push","_adjustVertical","colHeight","totalWidth","bbox","setItems","clearItems","setTitle","clear","getWidth","getHeight","show","hide","remove","module","exports"],"mappings":"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","sourcesContent":["const Util = require('../util/common');\nconst { Group } = require('../graphic/index');\nconst Marker = require('./marker');\nconst MARKER_RADIUS = 3;\n\nclass List {\n  getDefaultCfg() {\n    return {\n      showTitle: false,\n      /**\n       * title string\n       * @type {?String}\n       */\n      title: null,\n      /**\n       * items array\n       * @type {?Array}\n       */\n      items: null,\n      /**\n       * offset between title and items\n       * @type {Number}\n       */\n      titleGap: 12,\n      /**\n       * offset between each item\n       * @type {Number}\n       */\n      itemGap: 10,\n      /**\n       * the offset between each item in vertical direaction\n       * @type {Number}\n       */\n      itemMarginBottom: 12,\n      /**\n       * the formatter for item text\n       * @type {[type]}\n       */\n      itemFormatter: null,\n      itemWidth: null,\n      /**\n       * offset between marker and text\n       * @type {Number}\n       */\n      wordSpace: 6,\n      x: 0,\n      y: 0,\n      layout: 'horizontal',\n      /**\n       * the join string of `name` and `value`\n       * @type {String}\n       */\n      joinString: ': '\n    };\n  }\n\n  constructor(cfg) {\n    Util.deepMix(this, this.getDefaultCfg(), cfg);\n    this._init();\n    this._renderTitle();\n    this._renderItems();\n  }\n\n  _init() {\n    const container = new Group({\n      zIndex: this.zIndex || 0\n    });\n    this.container = container;\n    const wrapper = container.addGroup();\n    this.wrapper = wrapper;\n    const itemsGroup = wrapper.addGroup({\n      className: 'itemsGroup'\n    });\n    this.itemsGroup = itemsGroup;\n\n    if (this.parent) {\n      this.parent.add(container);\n    }\n  }\n\n  _renderTitle(title) {\n    title = title || this.title;\n    let titleShape = this.titleShape;\n    let titleHeight = 0;\n\n    if (this.showTitle && title) {\n      if (titleShape && !titleShape.get('destroyed')) {\n        titleShape.attr('text', title);\n      } else {\n        const { wrapper, titleStyle } = this;\n        titleShape = wrapper.addShape('text', {\n          className: 'title',\n          attrs: Util.mix({\n            x: 0,\n            y: 0,\n            text: title\n          }, titleStyle)\n        });\n        this.titleShape = titleShape;\n      }\n      titleHeight = titleShape.getBBox().height + this.titleGap;\n    }\n    this._titleHeight = titleHeight;\n  }\n\n  _renderItems(items) {\n    const self = this;\n    items = items || self.items;\n\n    if (!items) {\n      return;\n    }\n\n    if (self.reversed) {\n      items.reverse();\n    }\n    Util.each(items, (item, index) => {\n      self._addItem(item, index);\n    });\n    if (items.length > 1) {\n      this._adjustItems();\n    }\n    this._renderBackground();\n  }\n\n  _renderBackground() {\n    const background = this.background;\n    if (background) {\n      const container = this.container;\n      const wrapper = this.wrapper;\n      const { minX, minY, width, height } = wrapper.getBBox();\n      let padding = background.padding || [ 0, 0, 0, 0 ];\n      padding = Util.parsePadding(padding);\n      const attrs = Util.mix({\n        x: minX - padding[3],\n        y: minY - padding[0],\n        width: width + padding[1] + padding[3],\n        height: height + padding[0] + padding[2]\n      }, background);\n      let backShape = this.backShape;\n      if (backShape) {\n        backShape.attr(attrs);\n      } else {\n        backShape = container.addShape('Rect', {\n          zIndex: -1,\n          attrs\n        });\n      }\n      this.backShape = backShape;\n      container.sort();\n    }\n  }\n\n  _addItem(item) {\n    const itemsGroup = this.itemsGroup;\n    const itemGroup = itemsGroup.addGroup({\n      name: item.name,\n      value: item.value,\n      dataValue: item.dataValue,\n      checked: item.checked\n    });\n    const { unCheckStyle, unCheckColor, nameStyle, valueStyle, wordSpace } = this;\n    const { marker, value } = item;\n    let startX = 0;\n\n    if (unCheckColor) {\n      unCheckStyle.fill = unCheckColor;\n    }\n\n    if (marker) {\n      const radius = marker.radius || MARKER_RADIUS;\n      const markerAttrs = Util.mix({\n        x: radius,\n        y: this._titleHeight\n      }, marker);\n\n      if (item.checked === false) {\n        Util.mix(markerAttrs, unCheckStyle);\n      }\n\n      const markerShape = new Marker({\n        className: 'item-marker',\n        attrs: markerAttrs\n      });\n      itemGroup.add(markerShape);\n      startX += markerShape.getBBox().width + wordSpace;\n    }\n\n    let nameText;\n    let name = item.name;\n    if (name) {\n      const joinString = this.joinString || '';\n      name = value ? name + joinString : name;\n      nameText = itemGroup.addShape('text', {\n        className: 'name',\n        attrs: Util.mix({\n          x: startX,\n          y: this._titleHeight,\n          text: this._formatItemValue(name)\n        }, nameStyle, item.checked === false ? unCheckStyle : null)\n      });\n    }\n\n    if (value) {\n      let valueX = startX;\n      if (nameText) {\n        valueX += nameText.getBBox().width;\n      }\n\n      itemGroup.addShape('text', {\n        className: 'value',\n        attrs: Util.mix({\n          x: valueX,\n          y: this._titleHeight,\n          text: value\n        }, valueStyle, item.checked === false ? unCheckStyle : null)\n      });\n    }\n    return itemGroup;\n  }\n\n  _formatItemValue(value) {\n    const formatter = this.itemFormatter;\n    if (formatter) {\n      value = formatter.call(this, value);\n    }\n    return value;\n  }\n\n  _getMaxItemWidth() {\n    let width;\n    const itemWidth = this.itemWidth;\n\n    if (Util.isNumber(itemWidth) || Util.isNil(itemWidth)) {\n      return itemWidth;\n    }\n\n    if (itemWidth === 'auto') {\n      const itemsGroup = this.itemsGroup;\n      const children = itemsGroup.get('children');\n      const count = children.length;\n      let maxItemWidth = 0;\n      for (let i = 0; i < count; i++) {\n        const { width } = children[i].getBBox();\n        maxItemWidth = Math.max(maxItemWidth, width);\n      }\n      const maxLength = this.maxLength;\n      const itemGap = this.itemGap;\n      const twoAvgWidth = (maxLength - itemGap) / 2;\n      const threeAvgWidth = (maxLength - itemGap * 2) / 3;\n\n      if (count === 2) {\n        width = Math.max(maxItemWidth, twoAvgWidth);\n      } else {\n        // 1. max <= 3Avg, 3Avg\n        // 2. 3Avg < max && max < 2avg, 2avg\n        // 3. max > 2avg, max, one column\n        if (maxItemWidth <= threeAvgWidth) {\n          width = threeAvgWidth;\n        } else if (maxItemWidth <= twoAvgWidth) {\n          width = twoAvgWidth;\n        } else {\n          width = maxItemWidth;\n        }\n      }\n      return width;\n    }\n  }\n\n  _adjustHorizontal() {\n    const { maxLength, itemsGroup } = this;\n\n    const children = itemsGroup.get('children');\n    const { itemGap, itemMarginBottom } = this;\n    const titleHeight = this._titleHeight;\n\n    let row = 0;\n    let rowWidth = 0;\n    let width;\n    let height;\n    const itemWidth = this._getMaxItemWidth();\n    const legendHitBoxes = [];\n    for (let i = 0, len = children.length; i < len; i++) {\n      const child = children[i];\n      const box = child.getBBox();\n      const childHeight = box.height;\n      const childWidth = box.width;\n      width = itemWidth || childWidth;\n      height = childHeight + itemMarginBottom;\n\n      if (width - (maxLength - rowWidth) > 0.0001) {\n        row++;\n        rowWidth = 0;\n      }\n\n      child.moveTo(rowWidth, row * height);\n      legendHitBoxes.push({\n        x: rowWidth,\n        y: row * height + titleHeight - childHeight / 2,\n        width: childWidth * 1.375,\n        height: childHeight * 1.375\n      });\n      rowWidth += width + itemGap;\n    }\n    this.legendHitBoxes = legendHitBoxes;\n    return;\n  }\n\n  _adjustVertical() {\n    const { maxLength, itemsGroup } = this;\n    const { itemGap, itemMarginBottom, itemWidth } = this;\n    const titleHeight = this._titleHeight;\n    const children = itemsGroup.get('children');\n\n    let colHeight = 0;\n    let width;\n    let height;\n    let maxItemWidth = 0;\n    let totalWidth = 0;\n    const legendHitBoxes = [];\n\n    for (let i = 0, length = children.length; i < length; i++) {\n      const child = children[i];\n      const bbox = child.getBBox();\n      width = bbox.width;\n      height = bbox.height;\n\n      if (Util.isNumber(itemWidth)) {\n        maxItemWidth = itemWidth + itemGap;\n      } else if (width > maxItemWidth) {\n        maxItemWidth = width + itemGap;\n      }\n\n      if (maxLength - colHeight < height) {\n        colHeight = 0;\n        totalWidth += maxItemWidth;\n        child.moveTo(totalWidth, 0);\n        legendHitBoxes.push({\n          x: totalWidth,\n          y: titleHeight - height / 2,\n          width: width * 1.375,\n          height: height * 1.375\n        });\n      } else {\n        child.moveTo(totalWidth, colHeight);\n        legendHitBoxes.push({\n          x: totalWidth,\n          y: colHeight - height / 2 + titleHeight,\n          width: width * 1.375,\n          height: height * 1.375\n        });\n      }\n\n      colHeight += height + itemMarginBottom;\n    }\n    this.legendHitBoxes = legendHitBoxes;\n    return;\n  }\n\n  _adjustItems() {\n    const layout = this.layout;\n    if (layout === 'horizontal') {\n      this._adjustHorizontal();\n    } else {\n      this._adjustVertical();\n    }\n  }\n\n  moveTo(x, y) {\n    this.x = x;\n    this.y = y;\n    const container = this.container;\n    container && container.moveTo(x, y);\n    return this;\n  }\n\n  setItems(items) {\n    this.clearItems();\n    this._renderItems(items);\n  }\n\n  setTitle(title) {\n    this._renderTitle(title);\n  }\n\n  clearItems() {\n    const itemsGroup = this.itemsGroup;\n    itemsGroup.clear();\n  }\n\n  getWidth() {\n    const container = this.container;\n    const bbox = container.getBBox();\n    return bbox.width;\n  }\n\n  getHeight() {\n    const container = this.container;\n    const bbox = container.getBBox();\n    return bbox.height;\n  }\n\n  show() {\n    const container = this.container;\n    container.show();\n  }\n\n  hide() {\n    const container = this.container;\n    container.hide();\n  }\n\n  clear() {\n    const container = this.container;\n    container.clear();\n    container.remove(true);\n  }\n}\n\nmodule.exports = List;\n"]},"metadata":{},"sourceType":"script"}