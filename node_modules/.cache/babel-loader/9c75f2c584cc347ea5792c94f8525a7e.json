{"ast":null,"code":"/**\n * @fileOverview area geometry\n * @author dxq613 @gmail.com\n * @author sima.zhang1990@gmail.com\n */\nconst Geom = require('./base');\n\nconst ShapeUtil = require('./shape/util');\n\nconst Util = require('../util/common');\n\nrequire('./shape/area');\n\nclass Area extends Geom {\n  /**\n   * get the default configuration\n   * @protected\n   * @return {Object} return the result\n   */\n  getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    cfg.type = 'area';\n    cfg.shapeType = 'area';\n    cfg.generatePoints = true;\n    cfg.sortable = true;\n    return cfg;\n  }\n\n  draw(data, shapeFactory) {\n    const self = this;\n    const container = self.get('container');\n    const cfg = this.getDrawCfg(data[0]);\n    const yScale = self.getYScale();\n    const connectNulls = self.get('connectNulls');\n    const splitArray = ShapeUtil.splitArray(data, yScale.field, connectNulls);\n    cfg.origin = data;\n    Util.each(splitArray, function (subData, splitedIndex) {\n      cfg.splitedIndex = splitedIndex;\n      const points = subData.map(obj => {\n        return obj.points;\n      });\n      cfg.points = points;\n      self.drawShape(cfg.shape, data[0], cfg, container, shapeFactory);\n    });\n  }\n\n}\n\nGeom.Area = Area;\nmodule.exports = Area;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/geom/area.js"],"names":["Geom","require","ShapeUtil","Util","Area","getDefaultCfg","cfg","type","shapeType","generatePoints","sortable","draw","data","shapeFactory","self","container","get","getDrawCfg","yScale","getYScale","connectNulls","splitArray","field","origin","each","subData","splitedIndex","points","map","obj","drawShape","shape","module","exports"],"mappings":"AAAA;;;;;AAMA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,gBAAD,CAApB;;AACAA,OAAO,CAAC,cAAD,CAAP;;AAEA,MAAMG,IAAN,SAAmBJ,IAAnB,CAAwB;AACtB;;;;;AAKAK,EAAAA,aAAa,GAAG;AACd,UAAMC,GAAG,GAAG,MAAMD,aAAN,EAAZ;AACAC,IAAAA,GAAG,CAACC,IAAJ,GAAW,MAAX;AACAD,IAAAA,GAAG,CAACE,SAAJ,GAAgB,MAAhB;AACAF,IAAAA,GAAG,CAACG,cAAJ,GAAqB,IAArB;AACAH,IAAAA,GAAG,CAACI,QAAJ,GAAe,IAAf;AACA,WAAOJ,GAAP;AACD;;AAEDK,EAAAA,IAAI,CAACC,IAAD,EAAOC,YAAP,EAAqB;AACvB,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMC,SAAS,GAAGD,IAAI,CAACE,GAAL,CAAS,WAAT,CAAlB;AACA,UAAMV,GAAG,GAAG,KAAKW,UAAL,CAAgBL,IAAI,CAAC,CAAD,CAApB,CAAZ;AACA,UAAMM,MAAM,GAAGJ,IAAI,CAACK,SAAL,EAAf;AACA,UAAMC,YAAY,GAAGN,IAAI,CAACE,GAAL,CAAS,cAAT,CAArB;AACA,UAAMK,UAAU,GAAGnB,SAAS,CAACmB,UAAV,CAAqBT,IAArB,EAA2BM,MAAM,CAACI,KAAlC,EAAyCF,YAAzC,CAAnB;AACAd,IAAAA,GAAG,CAACiB,MAAJ,GAAaX,IAAb;AACAT,IAAAA,IAAI,CAACqB,IAAL,CAAUH,UAAV,EAAsB,UAASI,OAAT,EAAkBC,YAAlB,EAAgC;AACpDpB,MAAAA,GAAG,CAACoB,YAAJ,GAAmBA,YAAnB;AACA,YAAMC,MAAM,GAAGF,OAAO,CAACG,GAAR,CAAYC,GAAG,IAAI;AAChC,eAAOA,GAAG,CAACF,MAAX;AACD,OAFc,CAAf;AAGArB,MAAAA,GAAG,CAACqB,MAAJ,GAAaA,MAAb;AACAb,MAAAA,IAAI,CAACgB,SAAL,CAAexB,GAAG,CAACyB,KAAnB,EAA0BnB,IAAI,CAAC,CAAD,CAA9B,EAAmCN,GAAnC,EAAwCS,SAAxC,EAAmDF,YAAnD;AACD,KAPD;AAQD;;AA/BqB;;AAkCxBb,IAAI,CAACI,IAAL,GAAYA,IAAZ;AAEA4B,MAAM,CAACC,OAAP,GAAiB7B,IAAjB","sourcesContent":["/**\n * @fileOverview area geometry\n * @author dxq613 @gmail.com\n * @author sima.zhang1990@gmail.com\n */\n\nconst Geom = require('./base');\nconst ShapeUtil = require('./shape/util');\nconst Util = require('../util/common');\nrequire('./shape/area');\n\nclass Area extends Geom {\n  /**\n   * get the default configuration\n   * @protected\n   * @return {Object} return the result\n   */\n  getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    cfg.type = 'area';\n    cfg.shapeType = 'area';\n    cfg.generatePoints = true;\n    cfg.sortable = true;\n    return cfg;\n  }\n\n  draw(data, shapeFactory) {\n    const self = this;\n    const container = self.get('container');\n    const cfg = this.getDrawCfg(data[0]);\n    const yScale = self.getYScale();\n    const connectNulls = self.get('connectNulls');\n    const splitArray = ShapeUtil.splitArray(data, yScale.field, connectNulls);\n    cfg.origin = data;\n    Util.each(splitArray, function(subData, splitedIndex) {\n      cfg.splitedIndex = splitedIndex;\n      const points = subData.map(obj => {\n        return obj.points;\n      });\n      cfg.points = points;\n      self.drawShape(cfg.shape, data[0], cfg, container, shapeFactory);\n    });\n  }\n}\n\nGeom.Area = Area;\n\nmodule.exports = Area;\n"]},"metadata":{},"sourceType":"script"}