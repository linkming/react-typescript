{"ast":null,"code":"const Util = require('../../util/common');\n\nconst Shape = require('../shape');\n\nclass Rect extends Shape {\n  _initProperties() {\n    super._initProperties();\n\n    this._attrs.canFill = true;\n    this._attrs.canStroke = true;\n    this._attrs.type = 'rect';\n  }\n\n  getDefaultAttrs() {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      radius: 0,\n      lineWidth: 0\n    };\n  }\n\n  createPath(context) {\n    const self = this;\n    const attrs = self.get('attrs');\n    const {\n      x,\n      y,\n      width,\n      height\n    } = attrs;\n    context.beginPath();\n    let radius = attrs.radius;\n\n    if (!radius || !(width * height)) {\n      context.rect(x, y, width, height);\n    } else {\n      radius = Util.parsePadding(radius);\n      context.moveTo(x + radius[0], y);\n      context.lineTo(x + width - radius[1], y);\n      context.arc(x + width - radius[1], y + radius[1], radius[1], -Math.PI / 2, 0, false);\n      context.lineTo(x + width, y + height - radius[2]);\n      context.arc(x + width - radius[2], y + height - radius[2], radius[2], 0, Math.PI / 2, false);\n      context.lineTo(x + radius[3], y + height);\n      context.arc(x + radius[3], y + height - radius[3], radius[3], Math.PI / 2, Math.PI, false);\n      context.lineTo(x, y + radius[0]);\n      context.arc(x + radius[0], y + radius[0], radius[0], Math.PI, Math.PI * 3 / 2, false);\n      context.closePath();\n    }\n  }\n\n  calculateBox() {\n    const attrs = this.get('attrs');\n    const {\n      x,\n      y,\n      width,\n      height\n    } = attrs;\n    return {\n      minX: x,\n      minY: y,\n      maxX: x + width,\n      maxY: y + height\n    };\n  }\n\n}\n\nShape.Rect = Rect;\nmodule.exports = Rect;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/shape/rect.js"],"names":["Util","require","Shape","Rect","_initProperties","_attrs","canFill","canStroke","type","getDefaultAttrs","x","y","width","height","radius","lineWidth","createPath","context","self","attrs","get","beginPath","rect","parsePadding","moveTo","lineTo","arc","Math","PI","closePath","calculateBox","minX","minY","maxX","maxY","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAME,IAAN,SAAmBD,KAAnB,CAAyB;AACvBE,EAAAA,eAAe,GAAG;AAChB,UAAMA,eAAN;;AACA,SAAKC,MAAL,CAAYC,OAAZ,GAAsB,IAAtB;AACA,SAAKD,MAAL,CAAYE,SAAZ,GAAwB,IAAxB;AACA,SAAKF,MAAL,CAAYG,IAAZ,GAAmB,MAAnB;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO;AACLC,MAAAA,CAAC,EAAE,CADE;AAELC,MAAAA,CAAC,EAAE,CAFE;AAGLC,MAAAA,KAAK,EAAE,CAHF;AAILC,MAAAA,MAAM,EAAE,CAJH;AAKLC,MAAAA,MAAM,EAAE,CALH;AAMLC,MAAAA,SAAS,EAAE;AANN,KAAP;AAQD;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMC,KAAK,GAAGD,IAAI,CAACE,GAAL,CAAS,OAAT,CAAd;AACA,UAAM;AAAEV,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA0BM,KAAhC;AAEAF,IAAAA,OAAO,CAACI,SAAR;AACA,QAAIP,MAAM,GAAGK,KAAK,CAACL,MAAnB;;AACA,QAAI,CAACA,MAAD,IAAW,EAAEF,KAAK,GAAGC,MAAV,CAAf,EAAkC;AAChCI,MAAAA,OAAO,CAACK,IAAR,CAAaZ,CAAb,EAAgBC,CAAhB,EAAmBC,KAAnB,EAA0BC,MAA1B;AACD,KAFD,MAEO;AACLC,MAAAA,MAAM,GAAGd,IAAI,CAACuB,YAAL,CAAkBT,MAAlB,CAAT;AACAG,MAAAA,OAAO,CAACO,MAAR,CAAed,CAAC,GAAGI,MAAM,CAAC,CAAD,CAAzB,EAA8BH,CAA9B;AACAM,MAAAA,OAAO,CAACQ,MAAR,CAAef,CAAC,GAAGE,KAAJ,GAAYE,MAAM,CAAC,CAAD,CAAjC,EAAsCH,CAAtC;AACAM,MAAAA,OAAO,CAACS,GAAR,CAAYhB,CAAC,GAAGE,KAAJ,GAAYE,MAAM,CAAC,CAAD,CAA9B,EAAmCH,CAAC,GAAGG,MAAM,CAAC,CAAD,CAA7C,EAAkDA,MAAM,CAAC,CAAD,CAAxD,EAA6D,CAACa,IAAI,CAACC,EAAN,GAAW,CAAxE,EAA2E,CAA3E,EAA8E,KAA9E;AACAX,MAAAA,OAAO,CAACQ,MAAR,CAAef,CAAC,GAAGE,KAAnB,EAA0BD,CAAC,GAAGE,MAAJ,GAAaC,MAAM,CAAC,CAAD,CAA7C;AACAG,MAAAA,OAAO,CAACS,GAAR,CAAYhB,CAAC,GAAGE,KAAJ,GAAYE,MAAM,CAAC,CAAD,CAA9B,EAAmCH,CAAC,GAAGE,MAAJ,GAAaC,MAAM,CAAC,CAAD,CAAtD,EAA2DA,MAAM,CAAC,CAAD,CAAjE,EAAsE,CAAtE,EAAyEa,IAAI,CAACC,EAAL,GAAU,CAAnF,EAAsF,KAAtF;AACAX,MAAAA,OAAO,CAACQ,MAAR,CAAef,CAAC,GAAGI,MAAM,CAAC,CAAD,CAAzB,EAA8BH,CAAC,GAAGE,MAAlC;AACAI,MAAAA,OAAO,CAACS,GAAR,CAAYhB,CAAC,GAAGI,MAAM,CAAC,CAAD,CAAtB,EAA2BH,CAAC,GAAGE,MAAJ,GAAaC,MAAM,CAAC,CAAD,CAA9C,EAAmDA,MAAM,CAAC,CAAD,CAAzD,EAA8Da,IAAI,CAACC,EAAL,GAAU,CAAxE,EAA2ED,IAAI,CAACC,EAAhF,EAAoF,KAApF;AACAX,MAAAA,OAAO,CAACQ,MAAR,CAAef,CAAf,EAAkBC,CAAC,GAAGG,MAAM,CAAC,CAAD,CAA5B;AACAG,MAAAA,OAAO,CAACS,GAAR,CAAYhB,CAAC,GAAGI,MAAM,CAAC,CAAD,CAAtB,EAA2BH,CAAC,GAAGG,MAAM,CAAC,CAAD,CAArC,EAA0CA,MAAM,CAAC,CAAD,CAAhD,EAAqDa,IAAI,CAACC,EAA1D,EAA8DD,IAAI,CAACC,EAAL,GAAU,CAAV,GAAc,CAA5E,EAA+E,KAA/E;AACAX,MAAAA,OAAO,CAACY,SAAR;AACD;AACF;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAMX,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAd;AACA,UAAM;AAAEV,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA0BM,KAAhC;AACA,WAAO;AACLY,MAAAA,IAAI,EAAErB,CADD;AAELsB,MAAAA,IAAI,EAAErB,CAFD;AAGLsB,MAAAA,IAAI,EAAEvB,CAAC,GAAGE,KAHL;AAILsB,MAAAA,IAAI,EAAEvB,CAAC,GAAGE;AAJL,KAAP;AAMD;;AApDsB;;AAuDzBX,KAAK,CAACC,IAAN,GAAaA,IAAb;AACAgC,MAAM,CAACC,OAAP,GAAiBjC,IAAjB","sourcesContent":["const Util = require('../../util/common');\nconst Shape = require('../shape');\n\nclass Rect extends Shape {\n  _initProperties() {\n    super._initProperties();\n    this._attrs.canFill = true;\n    this._attrs.canStroke = true;\n    this._attrs.type = 'rect';\n  }\n\n  getDefaultAttrs() {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      radius: 0,\n      lineWidth: 0\n    };\n  }\n\n  createPath(context) {\n    const self = this;\n    const attrs = self.get('attrs');\n    const { x, y, width, height } = attrs;\n\n    context.beginPath();\n    let radius = attrs.radius;\n    if (!radius || !(width * height)) {\n      context.rect(x, y, width, height);\n    } else {\n      radius = Util.parsePadding(radius);\n      context.moveTo(x + radius[0], y);\n      context.lineTo(x + width - radius[1], y);\n      context.arc(x + width - radius[1], y + radius[1], radius[1], -Math.PI / 2, 0, false);\n      context.lineTo(x + width, y + height - radius[2]);\n      context.arc(x + width - radius[2], y + height - radius[2], radius[2], 0, Math.PI / 2, false);\n      context.lineTo(x + radius[3], y + height);\n      context.arc(x + radius[3], y + height - radius[3], radius[3], Math.PI / 2, Math.PI, false);\n      context.lineTo(x, y + radius[0]);\n      context.arc(x + radius[0], y + radius[0], radius[0], Math.PI, Math.PI * 3 / 2, false);\n      context.closePath();\n    }\n  }\n\n  calculateBox() {\n    const attrs = this.get('attrs');\n    const { x, y, width, height } = attrs;\n    return {\n      minX: x,\n      minY: y,\n      maxX: x + width,\n      maxY: y + height\n    };\n  }\n}\n\nShape.Rect = Rect;\nmodule.exports = Rect;\n"]},"metadata":{},"sourceType":"script"}