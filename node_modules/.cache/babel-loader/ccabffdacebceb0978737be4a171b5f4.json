{"ast":null,"code":"const Util = require('../util/common');\n\nconst Element = require('./element');\n\nclass Shape extends Element {\n  _initProperties() {\n    this._attrs = {\n      zIndex: 0,\n      visible: true,\n      destroyed: false,\n      isShape: true,\n      attrs: {}\n    };\n  }\n\n  getType() {\n    return this._attrs.type;\n  }\n\n  drawInner(context) {\n    const self = this;\n    const attrs = self.get('attrs');\n    self.createPath(context);\n    const originOpacity = context.globalAlpha;\n\n    if (self.hasFill()) {\n      const fillOpacity = attrs.fillOpacity;\n\n      if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        context.fill();\n        context.globalAlpha = originOpacity;\n      } else {\n        context.fill();\n      }\n    }\n\n    if (self.hasStroke()) {\n      const lineWidth = attrs.lineWidth;\n\n      if (lineWidth > 0) {\n        const strokeOpacity = attrs.strokeOpacity;\n\n        if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n\n        context.stroke();\n      }\n    }\n  }\n\n  getBBox() {\n    let bbox = this._attrs.bbox;\n\n    if (!bbox) {\n      bbox = this.calculateBox();\n\n      if (bbox) {\n        bbox.x = bbox.minX;\n        bbox.y = bbox.minY;\n        bbox.width = bbox.maxX - bbox.minX;\n        bbox.height = bbox.maxY - bbox.minY;\n      }\n\n      this._attrs.bbox = bbox;\n    }\n\n    return bbox;\n  }\n\n  calculateBox() {\n    return null;\n  }\n\n  createPath() {}\n\n}\n\nmodule.exports = Shape;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/shape.js"],"names":["Util","require","Element","Shape","_initProperties","_attrs","zIndex","visible","destroyed","isShape","attrs","getType","type","drawInner","context","self","get","createPath","originOpacity","globalAlpha","hasFill","fillOpacity","isNil","fill","hasStroke","lineWidth","strokeOpacity","stroke","getBBox","bbox","calculateBox","x","minX","y","minY","width","maxX","height","maxY","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,MAAME,KAAN,SAAoBD,OAApB,CAA4B;AAC1BE,EAAAA,eAAe,GAAG;AAChB,SAAKC,MAAL,GAAc;AACZC,MAAAA,MAAM,EAAE,CADI;AAEZC,MAAAA,OAAO,EAAE,IAFG;AAGZC,MAAAA,SAAS,EAAE,KAHC;AAIZC,MAAAA,OAAO,EAAE,IAJG;AAKZC,MAAAA,KAAK,EAAE;AALK,KAAd;AAOD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKN,MAAL,CAAYO,IAAnB;AACD;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AACjB,UAAMC,IAAI,GAAG,IAAb;AACA,UAAML,KAAK,GAAGK,IAAI,CAACC,GAAL,CAAS,OAAT,CAAd;AACAD,IAAAA,IAAI,CAACE,UAAL,CAAgBH,OAAhB;AACA,UAAMI,aAAa,GAAGJ,OAAO,CAACK,WAA9B;;AACA,QAAIJ,IAAI,CAACK,OAAL,EAAJ,EAAoB;AAClB,YAAMC,WAAW,GAAGX,KAAK,CAACW,WAA1B;;AACA,UAAI,CAACrB,IAAI,CAACsB,KAAL,CAAWD,WAAX,CAAD,IAA4BA,WAAW,KAAK,CAAhD,EAAmD;AACjDP,QAAAA,OAAO,CAACK,WAAR,GAAsBE,WAAtB;AACAP,QAAAA,OAAO,CAACS,IAAR;AACAT,QAAAA,OAAO,CAACK,WAAR,GAAsBD,aAAtB;AACD,OAJD,MAIO;AACLJ,QAAAA,OAAO,CAACS,IAAR;AACD;AACF;;AACD,QAAIR,IAAI,CAACS,SAAL,EAAJ,EAAsB;AACpB,YAAMC,SAAS,GAAGf,KAAK,CAACe,SAAxB;;AACA,UAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB,cAAMC,aAAa,GAAGhB,KAAK,CAACgB,aAA5B;;AACA,YAAI,CAAC1B,IAAI,CAACsB,KAAL,CAAWI,aAAX,CAAD,IAA8BA,aAAa,KAAK,CAApD,EAAuD;AACrDZ,UAAAA,OAAO,CAACK,WAAR,GAAsBO,aAAtB;AACD;;AACDZ,QAAAA,OAAO,CAACa,MAAR;AACD;AACF;AACF;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAIC,IAAI,GAAG,KAAKxB,MAAL,CAAYwB,IAAvB;;AACA,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,KAAKC,YAAL,EAAP;;AACA,UAAID,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACE,CAAL,GAASF,IAAI,CAACG,IAAd;AACAH,QAAAA,IAAI,CAACI,CAAL,GAASJ,IAAI,CAACK,IAAd;AACAL,QAAAA,IAAI,CAACM,KAAL,GAAaN,IAAI,CAACO,IAAL,GAAYP,IAAI,CAACG,IAA9B;AACAH,QAAAA,IAAI,CAACQ,MAAL,GAAcR,IAAI,CAACS,IAAL,GAAYT,IAAI,CAACK,IAA/B;AACD;;AACD,WAAK7B,MAAL,CAAYwB,IAAZ,GAAmBA,IAAnB;AACD;;AACD,WAAOA,IAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,IAAP;AACD;;AAEDb,EAAAA,UAAU,GAAG,CAAE;;AA7DW;;AAgE5BsB,MAAM,CAACC,OAAP,GAAiBrC,KAAjB","sourcesContent":["const Util = require('../util/common');\nconst Element = require('./element');\n\nclass Shape extends Element {\n  _initProperties() {\n    this._attrs = {\n      zIndex: 0,\n      visible: true,\n      destroyed: false,\n      isShape: true,\n      attrs: {}\n    };\n  }\n\n  getType() {\n    return this._attrs.type;\n  }\n\n  drawInner(context) {\n    const self = this;\n    const attrs = self.get('attrs');\n    self.createPath(context);\n    const originOpacity = context.globalAlpha;\n    if (self.hasFill()) {\n      const fillOpacity = attrs.fillOpacity;\n      if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        context.fill();\n        context.globalAlpha = originOpacity;\n      } else {\n        context.fill();\n      }\n    }\n    if (self.hasStroke()) {\n      const lineWidth = attrs.lineWidth;\n      if (lineWidth > 0) {\n        const strokeOpacity = attrs.strokeOpacity;\n        if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n        context.stroke();\n      }\n    }\n  }\n\n  getBBox() {\n    let bbox = this._attrs.bbox;\n    if (!bbox) {\n      bbox = this.calculateBox();\n      if (bbox) {\n        bbox.x = bbox.minX;\n        bbox.y = bbox.minY;\n        bbox.width = bbox.maxX - bbox.minX;\n        bbox.height = bbox.maxY - bbox.minY;\n      }\n      this._attrs.bbox = bbox;\n    }\n    return bbox;\n  }\n\n  calculateBox() {\n    return null;\n  }\n\n  createPath() {}\n}\n\nmodule.exports = Shape;\n"]},"metadata":{},"sourceType":"script"}