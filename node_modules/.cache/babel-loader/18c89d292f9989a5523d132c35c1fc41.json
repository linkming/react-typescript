{"ast":null,"code":"var mix = require('@antv/util/lib/mix');\n\nvar each = require('@antv/util/lib/each');\n\nvar isObject = require('@antv/util/lib/type/is-object');\n\nvar isNil = require('@antv/util/lib/type/is-nil');\n\nvar Scale =\n/*#__PURE__*/\nfunction () {\n  var _proto = Scale.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    this.type = 'base';\n    /**\n     * 格式化函数,输出文本或者tick时的格式化函数\n     * @type {Function}\n     */\n\n    this.formatter = null;\n    /**\n     * 输出的值域\n     * @type {Array}\n     */\n\n    this.range = [0, 1];\n    /**\n     * 度量的标记\n     * @type {Array}\n     */\n\n    this.ticks = null;\n    /**\n     * 参与度量计算的值，可选项\n     * @type {Array}\n     */\n\n    this.values = [];\n  };\n\n  function Scale(cfg) {\n    this._initDefaultCfg();\n\n    mix(this, cfg);\n    this.init();\n  }\n  /**\n   * 度量初始化\n   * @protected\n   */\n\n\n  _proto.init = function init() {}\n  /**\n   * 获取该度量的ticks,返回的是多个对象，\n   *   - text: tick 的文本\n   *   - value: 对应的度量转换后的值\n   * <code>\n   *   [\n   *     {text: 0,value:0}\n   *     {text: 1,value:0.2}\n   *     {text: 2,value:0.4}\n   *     {text: 3,value:0.6}\n   *     {text: 4,value:0.8}\n   *     {text: 5,value:1}\n   *   ]\n   * </code>\n   * @param {Number} count 输出tick的个数的近似值，默认是 10\n   * @return {Array} 返回 ticks 数组\n   */\n  ;\n\n  _proto.getTicks = function getTicks() {\n    var self = this;\n    var ticks = self.ticks;\n    var rst = [];\n    each(ticks, function (tick) {\n      var obj;\n\n      if (isObject(tick)) {\n        obj = tick;\n      } else {\n        obj = {\n          text: self.getText(tick),\n          tickValue: tick,\n          value: self.scale(tick)\n        };\n      }\n\n      rst.push(obj);\n    });\n    return rst;\n  }\n  /**\n   * 获取格式化后的文本\n   * @param  {*} value 输入的数据\n   * @param  {*} key 字段的 key\n   * @return {String} 格式化的文本\n   */\n  ;\n\n  _proto.getText = function getText(value, key) {\n    var formatter = this.formatter;\n    value = formatter ? formatter(value, key) : value;\n\n    if (isNil(value) || !value.toString) {\n      value = '';\n    }\n\n    return value.toString();\n  }\n  /**\n   * 输出的值域最小值\n   * @protected\n   * @return {Number} 返回最小的值\n   */\n  ;\n\n  _proto.rangeMin = function rangeMin() {\n    return this.range[0];\n  }\n  /**\n   * 输出的值域最大值\n   * @protected\n   * @return {Number} 返回最大的值\n   */\n  ;\n\n  _proto.rangeMax = function rangeMax() {\n    var range = this.range;\n    return range[range.length - 1];\n  }\n  /**\n   * 度量转换后的结果，翻转回输入域\n   * @param  {Number} value 需要翻转的数值\n   * @return {*} 度量的输入值\n   */\n  ;\n\n  _proto.invert = function invert(value) {\n    return value;\n  }\n  /**\n   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等\n   * @param  {*} value 传入的值\n   * @return {Number} 转换的值\n   */\n  ;\n\n  _proto.translate = function translate(value) {\n    return value;\n  }\n  /**\n   * 进行度量转换\n   * @param  {*} value 输入值\n   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]\n   */\n  ;\n\n  _proto.scale = function scale(value) {\n    return value;\n  }\n  /**\n   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等\n   * @return {Scale} 克隆的度量\n   */\n  ;\n\n  _proto.clone = function clone() {\n    var self = this;\n    var constr = self.constructor;\n    var cfg = {};\n    each(self, function (v, k) {\n      cfg[k] = self[k];\n    });\n    return new constr(cfg);\n  }\n  /**\n   * 更改度量的属性信息\n   * @param  {Object} info 属性信息\n   * @chainable\n   * @return {Scale} 返回自身的引用\n   */\n  ;\n\n  _proto.change = function change(info) {\n    this.ticks = null;\n    mix(this, info);\n    this.init();\n    return this;\n  };\n\n  return Scale;\n}();\n\nmodule.exports = Scale;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_scale@0.1.4@@antv/scale/lib/base.js"],"names":["mix","require","each","isObject","isNil","Scale","_proto","prototype","_initDefaultCfg","type","formatter","range","ticks","values","cfg","init","getTicks","self","rst","tick","obj","text","getText","tickValue","value","scale","push","key","toString","rangeMin","rangeMax","length","invert","translate","clone","constr","constructor","v","k","change","info","module","exports"],"mappings":"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","sourcesContent":["var mix = require('@antv/util/lib/mix');\n\nvar each = require('@antv/util/lib/each');\n\nvar isObject = require('@antv/util/lib/type/is-object');\n\nvar isNil = require('@antv/util/lib/type/is-nil');\n\nvar Scale =\n/*#__PURE__*/\nfunction () {\n  var _proto = Scale.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    this.type = 'base';\n    /**\n     * 格式化函数,输出文本或者tick时的格式化函数\n     * @type {Function}\n     */\n\n    this.formatter = null;\n    /**\n     * 输出的值域\n     * @type {Array}\n     */\n\n    this.range = [0, 1];\n    /**\n     * 度量的标记\n     * @type {Array}\n     */\n\n    this.ticks = null;\n    /**\n     * 参与度量计算的值，可选项\n     * @type {Array}\n     */\n\n    this.values = [];\n  };\n\n  function Scale(cfg) {\n    this._initDefaultCfg();\n\n    mix(this, cfg);\n    this.init();\n  }\n  /**\n   * 度量初始化\n   * @protected\n   */\n\n\n  _proto.init = function init() {}\n  /**\n   * 获取该度量的ticks,返回的是多个对象，\n   *   - text: tick 的文本\n   *   - value: 对应的度量转换后的值\n   * <code>\n   *   [\n   *     {text: 0,value:0}\n   *     {text: 1,value:0.2}\n   *     {text: 2,value:0.4}\n   *     {text: 3,value:0.6}\n   *     {text: 4,value:0.8}\n   *     {text: 5,value:1}\n   *   ]\n   * </code>\n   * @param {Number} count 输出tick的个数的近似值，默认是 10\n   * @return {Array} 返回 ticks 数组\n   */\n  ;\n\n  _proto.getTicks = function getTicks() {\n    var self = this;\n    var ticks = self.ticks;\n    var rst = [];\n    each(ticks, function (tick) {\n      var obj;\n\n      if (isObject(tick)) {\n        obj = tick;\n      } else {\n        obj = {\n          text: self.getText(tick),\n          tickValue: tick,\n          value: self.scale(tick)\n        };\n      }\n\n      rst.push(obj);\n    });\n    return rst;\n  }\n  /**\n   * 获取格式化后的文本\n   * @param  {*} value 输入的数据\n   * @param  {*} key 字段的 key\n   * @return {String} 格式化的文本\n   */\n  ;\n\n  _proto.getText = function getText(value, key) {\n    var formatter = this.formatter;\n    value = formatter ? formatter(value, key) : value;\n\n    if (isNil(value) || !value.toString) {\n      value = '';\n    }\n\n    return value.toString();\n  }\n  /**\n   * 输出的值域最小值\n   * @protected\n   * @return {Number} 返回最小的值\n   */\n  ;\n\n  _proto.rangeMin = function rangeMin() {\n    return this.range[0];\n  }\n  /**\n   * 输出的值域最大值\n   * @protected\n   * @return {Number} 返回最大的值\n   */\n  ;\n\n  _proto.rangeMax = function rangeMax() {\n    var range = this.range;\n    return range[range.length - 1];\n  }\n  /**\n   * 度量转换后的结果，翻转回输入域\n   * @param  {Number} value 需要翻转的数值\n   * @return {*} 度量的输入值\n   */\n  ;\n\n  _proto.invert = function invert(value) {\n    return value;\n  }\n  /**\n   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等\n   * @param  {*} value 传入的值\n   * @return {Number} 转换的值\n   */\n  ;\n\n  _proto.translate = function translate(value) {\n    return value;\n  }\n  /**\n   * 进行度量转换\n   * @param  {*} value 输入值\n   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]\n   */\n  ;\n\n  _proto.scale = function scale(value) {\n    return value;\n  }\n  /**\n   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等\n   * @return {Scale} 克隆的度量\n   */\n  ;\n\n  _proto.clone = function clone() {\n    var self = this;\n    var constr = self.constructor;\n    var cfg = {};\n    each(self, function (v, k) {\n      cfg[k] = self[k];\n    });\n    return new constr(cfg);\n  }\n  /**\n   * 更改度量的属性信息\n   * @param  {Object} info 属性信息\n   * @chainable\n   * @return {Scale} 返回自身的引用\n   */\n  ;\n\n  _proto.change = function change(info) {\n    this.ticks = null;\n    mix(this, info);\n    this.init();\n    return this;\n  };\n\n  return Scale;\n}();\n\nmodule.exports = Scale;"]},"metadata":{},"sourceType":"script"}