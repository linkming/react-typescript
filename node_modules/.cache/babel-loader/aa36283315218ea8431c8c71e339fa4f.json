{"ast":null,"code":"const Util = require('../../util/common');\n\nconst GuideBase = require('./base');\n\nfunction getOffsetFromAlign(alignX, alignY, width, height) {\n  const result = [];\n\n  if (alignX === 'left' && alignY === 'top') {\n    result[0] = 0;\n    result[1] = 0;\n  } else if (alignX === 'right' && alignY === 'top') {\n    result[0] = -width;\n    result[1] = 0;\n  } else if (alignX === 'left' && alignY === 'bottom') {\n    result[0] = 0;\n    result[1] = Math.floor(-height);\n  } else if (alignX === 'right' && alignY === 'bottom') {\n    result[0] = Math.floor(-width);\n    result[1] = Math.floor(-height);\n  } else if (alignX === 'right' && alignY === 'middle') {\n    result[0] = Math.floor(-width);\n    result[1] = Math.floor(-height / 2);\n  } else if (alignX === 'left' && alignY === 'middle') {\n    result[0] = 0;\n    result[1] = Math.floor(-height / 2);\n  } else if (alignX === 'center' && alignY === 'bottom') {\n    result[0] = Math.floor(-width / 2);\n    result[1] = Math.floor(-height);\n  } else if (alignX === 'center' && alignY === 'top') {\n    result[0] = Math.floor(-width / 2);\n    result[1] = 0;\n  } else {\n    result[0] = Math.floor(-width / 2);\n    result[1] = Math.floor(-height / 2);\n  }\n\n  return result;\n}\n\nfunction modifyCSS(DOM, CSS) {\n  for (const key in CSS) {\n    if (CSS.hasOwnProperty(key)) {\n      DOM.style[key] = CSS[key];\n    }\n  }\n\n  return DOM;\n}\n\nfunction createDom(str) {\n  const container = document.createElement('div');\n  str = str.replace(/(^\\s*)|(\\s*$)/g, '');\n  container.innerHTML = '' + str;\n  return container.childNodes[0];\n}\n\nclass Html extends GuideBase {\n  _initDefaultCfg() {\n    this.type = 'html';\n    /**\n     * dom position\n     * @type {Object | Array}\n     */\n\n    this.position = null;\n    /**\n      * alignment for horizontal direction，can be 'left','center','right'\n      * @type {String}\n      */\n\n    this.alignX = 'center';\n    /**\n      * alignment for vertical direction，can be 'top', 'middle', 'bottom'\n      * @type {String}\n      */\n\n    this.alignY = 'middle';\n    /**\n      * offset for horizontal direction\n      * @type {Number}\n      */\n\n    this.offsetX = null;\n    /**\n      * offset for vertical direction\n      * @type {Number}\n      */\n\n    this.offsetY = null;\n    /**\n    * the html string\n    *@type {String | Function}\n    */\n\n    this.html = null;\n  } // override paint\n\n\n  render(coord, container) {\n    const self = this;\n    const position = self.parsePoint(coord, self.position);\n\n    if (!position) {\n      return;\n    }\n\n    let myNode = createDom(self.html);\n    myNode = modifyCSS(myNode, {\n      position: 'absolute',\n      top: Math.floor(position.y) + 'px',\n      left: Math.floor(position.x) + 'px',\n      visibility: 'hidden'\n    });\n    const canvasDom = container.get('canvas').get('el');\n    let parentNode = canvasDom.parentNode;\n    parentNode = modifyCSS(parentNode, {\n      position: 'relative'\n    });\n    const wrapperNode = createDom('<div class=\"guideWapper\" style=\"position: absolute;top: 0; left: 0;\"></div>');\n    parentNode.appendChild(wrapperNode);\n    wrapperNode.appendChild(myNode);\n    const canvasOffsetTop = canvasDom.offsetTop;\n    const canvasOffsetLeft = canvasDom.offsetLeft;\n    const {\n      alignX,\n      alignY,\n      offsetX,\n      offsetY\n    } = self;\n    const width = Util.getWidth(myNode);\n    const height = Util.getHeight(myNode);\n    const newOffset = getOffsetFromAlign(alignX, alignY, width, height);\n    position.x = position.x + newOffset[0] + canvasOffsetLeft;\n    position.y = position.y + newOffset[1] + canvasOffsetTop;\n\n    if (offsetX) {\n      position.x += offsetX;\n    }\n\n    if (offsetY) {\n      position.y += offsetY;\n    }\n\n    modifyCSS(myNode, {\n      top: Math.floor(position.y) + 'px',\n      left: Math.floor(position.x) + 'px',\n      visibility: 'visible'\n    });\n    self.element = wrapperNode;\n  }\n\n  remove() {\n    const element = this.element;\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n}\n\nGuideBase.Html = Html;\nmodule.exports = Html;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/guide/html.js"],"names":["Util","require","GuideBase","getOffsetFromAlign","alignX","alignY","width","height","result","Math","floor","modifyCSS","DOM","CSS","key","hasOwnProperty","style","createDom","str","container","document","createElement","replace","innerHTML","childNodes","Html","_initDefaultCfg","type","position","offsetX","offsetY","html","render","coord","self","parsePoint","myNode","top","y","left","x","visibility","canvasDom","get","parentNode","wrapperNode","appendChild","canvasOffsetTop","offsetTop","canvasOffsetLeft","offsetLeft","getWidth","getHeight","newOffset","element","remove","removeChild","module","exports"],"mappings":"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","sourcesContent":["const Util = require('../../util/common');\nconst GuideBase = require('./base');\n\nfunction getOffsetFromAlign(alignX, alignY, width, height) {\n  const result = [];\n\n  if (alignX === 'left' && alignY === 'top') {\n    result[0] = 0;\n    result[1] = 0;\n  } else if (alignX === 'right' && alignY === 'top') {\n    result[0] = -width;\n    result[1] = 0;\n  } else if (alignX === 'left' && alignY === 'bottom') {\n    result[0] = 0;\n    result[1] = Math.floor(-height);\n  } else if (alignX === 'right' && alignY === 'bottom') {\n    result[0] = Math.floor(-width);\n    result[1] = Math.floor(-height);\n  } else if (alignX === 'right' && alignY === 'middle') {\n    result[0] = Math.floor(-width);\n    result[1] = Math.floor(-height / 2);\n  } else if (alignX === 'left' && alignY === 'middle') {\n    result[0] = 0;\n    result[1] = Math.floor(-height / 2);\n  } else if (alignX === 'center' && alignY === 'bottom') {\n    result[0] = Math.floor(-width / 2);\n    result[1] = Math.floor(-height);\n  } else if (alignX === 'center' && alignY === 'top') {\n    result[0] = Math.floor(-width / 2);\n    result[1] = 0;\n  } else {\n    result[0] = Math.floor(-width / 2);\n    result[1] = Math.floor(-height / 2);\n  }\n\n  return result;\n}\n\nfunction modifyCSS(DOM, CSS) {\n  for (const key in CSS) {\n    if (CSS.hasOwnProperty(key)) {\n      DOM.style[key] = CSS[key];\n    }\n  }\n  return DOM;\n}\n\nfunction createDom(str) {\n  const container = document.createElement('div');\n  str = str.replace(/(^\\s*)|(\\s*$)/g, '');\n  container.innerHTML = '' + str;\n  return container.childNodes[0];\n}\n\nclass Html extends GuideBase {\n  _initDefaultCfg() {\n    this.type = 'html';\n    /**\n     * dom position\n     * @type {Object | Array}\n     */\n    this.position = null;\n    /**\n      * alignment for horizontal direction，can be 'left','center','right'\n      * @type {String}\n      */\n    this.alignX = 'center';\n    /**\n      * alignment for vertical direction，can be 'top', 'middle', 'bottom'\n      * @type {String}\n      */\n    this.alignY = 'middle';\n    /**\n      * offset for horizontal direction\n      * @type {Number}\n      */\n    this.offsetX = null;\n    /**\n      * offset for vertical direction\n      * @type {Number}\n      */\n    this.offsetY = null;\n    /**\n    * the html string\n    *@type {String | Function}\n    */\n    this.html = null;\n  }\n\n  // override paint\n  render(coord, container) {\n    const self = this;\n    const position = self.parsePoint(coord, self.position);\n    if (!position) {\n      return;\n    }\n    let myNode = createDom(self.html);\n    myNode = modifyCSS(myNode, {\n      position: 'absolute',\n      top: Math.floor(position.y) + 'px',\n      left: Math.floor(position.x) + 'px',\n      visibility: 'hidden'\n    });\n\n    const canvasDom = container.get('canvas').get('el');\n    let parentNode = canvasDom.parentNode;\n    parentNode = modifyCSS(parentNode, {\n      position: 'relative'\n    });\n\n    const wrapperNode = createDom('<div class=\"guideWapper\" style=\"position: absolute;top: 0; left: 0;\"></div>');\n    parentNode.appendChild(wrapperNode);\n    wrapperNode.appendChild(myNode);\n\n    const canvasOffsetTop = canvasDom.offsetTop;\n    const canvasOffsetLeft = canvasDom.offsetLeft;\n    const { alignX, alignY, offsetX, offsetY } = self;\n    const width = Util.getWidth(myNode);\n    const height = Util.getHeight(myNode);\n    const newOffset = getOffsetFromAlign(alignX, alignY, width, height);\n    position.x = position.x + newOffset[0] + canvasOffsetLeft;\n    position.y = position.y + newOffset[1] + canvasOffsetTop;\n\n    if (offsetX) {\n      position.x += offsetX;\n    }\n\n    if (offsetY) {\n      position.y += offsetY;\n    }\n\n    modifyCSS(myNode, {\n      top: Math.floor(position.y) + 'px',\n      left: Math.floor(position.x) + 'px',\n      visibility: 'visible'\n    });\n    self.element = wrapperNode;\n  }\n\n  remove() {\n    const element = this.element;\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n}\n\nGuideBase.Html = Html;\nmodule.exports = Html;\n"]},"metadata":{},"sourceType":"script"}