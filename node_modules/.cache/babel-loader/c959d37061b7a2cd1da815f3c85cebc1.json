{"ast":null,"code":"import { isString, each } from '@antv/util'; // Get the interpolation between colors\n\nfunction getValue(start, end, percent, index) {\n  const value = start[index] + (end[index] - start[index]) * percent;\n  return value;\n} // convert to hex\n\n\nfunction arr2hex(arr) {\n  return '#' + toRGBValue(arr[0]) + toRGBValue(arr[1]) + toRGBValue(arr[2]);\n}\n\nfunction toRGBValue(value) {\n  value = Math.round(value);\n  value = value.toString(16);\n\n  if (value.length === 1) {\n    value = '0' + value;\n  }\n\n  return value;\n}\n\nfunction calColor(colors, percent) {\n  const steps = colors.length - 1;\n  const step = Math.floor(steps * percent);\n  const left = steps * percent - step;\n  const start = colors[step];\n  const end = step === steps ? start : colors[step + 1];\n  const rgb = arr2hex([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);\n  return rgb;\n}\n\nfunction hex2arr(str) {\n  const arr = [];\n  arr.push(parseInt(str.substr(1, 2), 16));\n  arr.push(parseInt(str.substr(3, 2), 16));\n  arr.push(parseInt(str.substr(5, 2), 16));\n  return arr;\n}\n\nconst colorCache = {\n  black: '#000000',\n  blue: '#0000ff',\n  grey: '#808080',\n  green: '#008000',\n  orange: '#ffa500',\n  pink: '#ffc0cb',\n  purple: '#800080',\n  red: '#ff0000',\n  white: '#ffffff',\n  yellow: '#ffff00'\n};\nconst ColorUtil = {\n  /**\n   * Returns a hexadecimal string representing this color in RGB space, such as #f7eaba.\n   * @param  {String} color color value\n   * @return {String} Returns a hexadecimal string\n   */\n  toHex(color) {\n    if (colorCache[color]) {\n      return colorCache[color];\n    }\n\n    if (color[0] === '#') {\n      if (color.length === 7) {\n        return color;\n      }\n\n      const hex = color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b) {\n        return '#' + r + r + g + g + b + b;\n      }); // hex3 to hex6\n\n      colorCache[color] = hex;\n      return hex;\n    } // rgb/rgba to hex\n\n\n    let rst = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    rst.shift();\n    rst = arr2hex(rst);\n    colorCache[color] = rst;\n    return rst;\n  },\n\n  hex2arr,\n\n  /**\n   * handle the gradient color\n   * @param  {Array} colors the colors\n   * @return {String} return the color value\n   */\n  gradient(colors) {\n    const points = [];\n\n    if (isString(colors)) {\n      colors = colors.split('-');\n    }\n\n    each(colors, function (color) {\n      if (color.indexOf('#') === -1) {\n        color = ColorUtil.toHex(color);\n      }\n\n      points.push(hex2arr(color));\n    });\n    return function (percent) {\n      return calColor(points, percent);\n    };\n  }\n\n};\nexport default ColorUtil;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/attr/color-util.js"],"names":["isString","each","getValue","start","end","percent","index","value","arr2hex","arr","toRGBValue","Math","round","toString","length","calColor","colors","steps","step","floor","left","rgb","hex2arr","str","push","parseInt","substr","colorCache","black","blue","grey","green","orange","pink","purple","red","white","yellow","ColorUtil","toHex","color","hex","replace","m","r","g","b","rst","match","shift","gradient","points","split","indexOf"],"mappings":"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","sourcesContent":["import {\n  isString,\n  each\n} from '@antv/util';\n\n// Get the interpolation between colors\nfunction getValue(start, end, percent, index) {\n  const value = start[index] + (end[index] - start[index]) * percent;\n  return value;\n}\n\n// convert to hex\nfunction arr2hex(arr) {\n  return '#' + toRGBValue(arr[0]) + toRGBValue(arr[1]) + toRGBValue(arr[2]);\n}\n\nfunction toRGBValue(value) {\n  value = Math.round(value);\n  value = value.toString(16);\n  if (value.length === 1) {\n    value = '0' + value;\n  }\n  return value;\n}\n\nfunction calColor(colors, percent) {\n  const steps = colors.length - 1;\n  const step = Math.floor(steps * percent);\n  const left = steps * percent - step;\n  const start = colors[step];\n  const end = step === steps ? start : colors[step + 1];\n  const rgb = arr2hex([\n    getValue(start, end, left, 0),\n    getValue(start, end, left, 1),\n    getValue(start, end, left, 2)\n  ]);\n  return rgb;\n}\n\nfunction hex2arr(str) {\n  const arr = [];\n  arr.push(parseInt(str.substr(1, 2), 16));\n  arr.push(parseInt(str.substr(3, 2), 16));\n  arr.push(parseInt(str.substr(5, 2), 16));\n  return arr;\n}\n\nconst colorCache = {\n  black: '#000000',\n  blue: '#0000ff',\n  grey: '#808080',\n  green: '#008000',\n  orange: '#ffa500',\n  pink: '#ffc0cb',\n  purple: '#800080',\n  red: '#ff0000',\n  white: '#ffffff',\n  yellow: '#ffff00'\n};\n\nconst ColorUtil = {\n  /**\n   * Returns a hexadecimal string representing this color in RGB space, such as #f7eaba.\n   * @param  {String} color color value\n   * @return {String} Returns a hexadecimal string\n   */\n  toHex(color) {\n    if (colorCache[color]) {\n      return colorCache[color];\n    }\n\n    if (color[0] === '#') {\n      if (color.length === 7) {\n        return color;\n      }\n\n      const hex = color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function(m, r, g, b) {\n        return '#' + r + r + g + g + b + b;\n      }); // hex3 to hex6\n      colorCache[color] = hex;\n      return hex;\n    }\n\n    // rgb/rgba to hex\n    let rst = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    rst.shift();\n    rst = arr2hex(rst);\n    colorCache[color] = rst;\n    return rst;\n  },\n\n  hex2arr,\n\n  /**\n   * handle the gradient color\n   * @param  {Array} colors the colors\n   * @return {String} return the color value\n   */\n  gradient(colors) {\n    const points = [];\n    if (isString(colors)) {\n      colors = colors.split('-');\n    }\n    each(colors, function(color) {\n      if (color.indexOf('#') === -1) {\n        color = ColorUtil.toHex(color);\n      }\n      points.push(hex2arr(color));\n    });\n    return function(percent) {\n      return calColor(points, percent);\n    };\n  }\n};\n\nexport default ColorUtil;\n"]},"metadata":{},"sourceType":"module"}