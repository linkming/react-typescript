{"ast":null,"code":"import EventEmit from './event/emit';\nimport EventController from './event/controller';\n\nconst Util = require('../util/common');\n\nconst Container = require('./container');\n\nconst Group = require('./group');\n\nconst {\n  requestAnimationFrame\n} = require('./util/requestAnimationFrame');\n\nconst CanvasElement = require('./canvas-element');\n\nclass Canvas extends EventEmit {\n  get(name) {\n    return this._attrs[name];\n  }\n\n  set(name, value) {\n    this._attrs[name] = value;\n  }\n\n  constructor(cfg) {\n    super();\n    this._attrs = Util.mix({\n      type: 'canvas',\n      children: []\n    }, cfg);\n\n    this._initPixelRatio();\n\n    this._initCanvas();\n  }\n\n  _initPixelRatio() {\n    const pixelRatio = this.get('pixelRatio');\n\n    if (!pixelRatio) {\n      this.set('pixelRatio', Util.getPixelRatio());\n    }\n  }\n\n  beforeDraw() {\n    const context = this._attrs.context;\n    const el = this._attrs.el;\n    context && context.clearRect && context.clearRect(0, 0, el.width, el.height);\n  }\n\n  _initCanvas() {\n    const self = this;\n    const el = self.get('el');\n    const context = self.get('context');\n\n    if (!el && !context) {\n      throw new Error('Please specify the id, el or context of the chart!');\n    }\n\n    let canvas;\n\n    if (el) {\n      // DOMElement or String\n      canvas = Util.isString(el) ? Util.getDomById(el) : el;\n    } else {\n      // 说明没有指定el\n      canvas = CanvasElement.create(context);\n    }\n\n    if (context && canvas && !canvas.getContext) {\n      canvas.getContext = function () {\n        return context;\n      };\n    }\n\n    let width = self.get('width');\n\n    if (!width) {\n      width = Util.getWidth(canvas);\n    }\n\n    let height = self.get('height');\n\n    if (!height) {\n      height = Util.getHeight(canvas);\n    }\n\n    self.set('canvas', this);\n    self.set('el', canvas);\n    self.set('context', context || canvas.getContext('2d'));\n    self.changeSize(width, height); // 初始化事件控制器\n\n    const eventController = new EventController({\n      canvas: this,\n      el: canvas\n    });\n    self.set('eventController', eventController);\n  }\n\n  changeSize(width, height) {\n    const pixelRatio = this.get('pixelRatio');\n    const canvasDOM = this.get('el'); // HTMLCanvasElement or canvasElement\n    // 浏览器环境设置style样式\n\n    if (canvasDOM.style) {\n      canvasDOM.style.width = width + 'px';\n      canvasDOM.style.height = height + 'px';\n    }\n\n    if (Util.isCanvasElement(canvasDOM)) {\n      canvasDOM.width = width * pixelRatio;\n      canvasDOM.height = height * pixelRatio;\n\n      if (pixelRatio !== 1) {\n        const ctx = this.get('context');\n        ctx.scale(pixelRatio, pixelRatio);\n      }\n    }\n\n    this.set('width', width);\n    this.set('height', height);\n  }\n\n  getWidth() {\n    const pixelRatio = this.get('pixelRatio');\n    const width = this.get('width');\n    return width * pixelRatio;\n  }\n\n  getHeight() {\n    const pixelRatio = this.get('pixelRatio');\n    const height = this.get('height');\n    return height * pixelRatio;\n  }\n\n  getPointByClient(clientX, clientY) {\n    const el = this.get('el');\n    const bbox = el.getBoundingClientRect();\n    const width = bbox.right - bbox.left;\n    const height = bbox.bottom - bbox.top;\n    return {\n      x: (clientX - bbox.left) * (el.width / width),\n      y: (clientY - bbox.top) * (el.height / height)\n    };\n  }\n\n  _beginDraw() {\n    this._attrs.toDraw = true;\n  }\n\n  _endDraw() {\n    this._attrs.toDraw = false;\n  }\n\n  draw() {\n    const self = this;\n\n    function drawInner() {\n      self.set('animateHandler', requestAnimationFrame(() => {\n        self.set('animateHandler', undefined);\n\n        if (self.get('toDraw')) {\n          drawInner();\n        }\n      }));\n      self.beforeDraw();\n\n      try {\n        const context = self._attrs.context;\n        const children = self._attrs.children;\n\n        for (let i = 0, len = children.length; i < len; i++) {\n          const child = children[i];\n          child.draw(context);\n        } // 支付宝，微信小程序，需要调context.draw才能完成绘制， 所以这里直接判断是否有.draw方法\n\n\n        if (context.draw) {\n          context.draw();\n        }\n      } catch (ev) {\n        console.warn('error in draw canvas, detail as:');\n        console.warn(ev);\n\n        self._endDraw();\n      }\n\n      self._endDraw();\n    }\n\n    if (self.get('destroyed')) {\n      return;\n    }\n\n    if (self.get('animateHandler')) {\n      this._beginDraw();\n    } else {\n      drawInner();\n    }\n  }\n\n  destroy() {\n    if (this.get('destroyed')) {\n      return;\n    }\n\n    this.clear();\n    this._attrs = {};\n    this.set('destroyed', true);\n  }\n\n  isDestroyed() {\n    return this.get('destroyed');\n  }\n\n}\n\nUtil.mix(Canvas.prototype, Container, {\n  getGroupClass() {\n    return Group;\n  }\n\n});\nmodule.exports = Canvas;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/canvas.js"],"names":["EventEmit","EventController","Util","require","Container","Group","requestAnimationFrame","CanvasElement","Canvas","get","name","_attrs","set","value","constructor","cfg","mix","type","children","_initPixelRatio","_initCanvas","pixelRatio","getPixelRatio","beforeDraw","context","el","clearRect","width","height","self","Error","canvas","isString","getDomById","create","getContext","getWidth","getHeight","changeSize","eventController","canvasDOM","style","isCanvasElement","ctx","scale","getPointByClient","clientX","clientY","bbox","getBoundingClientRect","right","left","bottom","top","x","y","_beginDraw","toDraw","_endDraw","draw","drawInner","undefined","i","len","length","child","ev","console","warn","destroy","clear","isDestroyed","prototype","getGroupClass","module","exports"],"mappings":"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","sourcesContent":["import EventEmit from './event/emit';\nimport EventController from './event/controller';\n\nconst Util = require('../util/common');\nconst Container = require('./container');\nconst Group = require('./group');\nconst { requestAnimationFrame } = require('./util/requestAnimationFrame');\nconst CanvasElement = require('./canvas-element');\n\nclass Canvas extends EventEmit {\n  get(name) {\n    return this._attrs[name];\n  }\n\n  set(name, value) {\n    this._attrs[name] = value;\n  }\n\n  constructor(cfg) {\n    super();\n    this._attrs = Util.mix({\n      type: 'canvas',\n      children: []\n    }, cfg);\n    this._initPixelRatio();\n    this._initCanvas();\n  }\n\n  _initPixelRatio() {\n    const pixelRatio = this.get('pixelRatio');\n    if (!pixelRatio) {\n      this.set('pixelRatio', Util.getPixelRatio());\n    }\n  }\n\n  beforeDraw() {\n    const context = this._attrs.context;\n    const el = this._attrs.el;\n    context && context.clearRect && context.clearRect(0, 0, el.width, el.height);\n  }\n\n  _initCanvas() {\n    const self = this;\n    const el = self.get('el');\n    const context = self.get('context');\n    if (!el && !context) {\n      throw new Error('Please specify the id, el or context of the chart!');\n    }\n    let canvas;\n    if (el) {\n      // DOMElement or String\n      canvas = Util.isString(el) ? Util.getDomById(el) : el;\n    } else {\n      // 说明没有指定el\n      canvas = CanvasElement.create(context);\n    }\n\n    if (context && canvas && !canvas.getContext) {\n      canvas.getContext = function() {\n        return context;\n      };\n    }\n    let width = self.get('width');\n    if (!width) {\n      width = Util.getWidth(canvas);\n    }\n\n    let height = self.get('height');\n    if (!height) {\n      height = Util.getHeight(canvas);\n    }\n\n    self.set('canvas', this);\n    self.set('el', canvas);\n    self.set('context', context || canvas.getContext('2d'));\n    self.changeSize(width, height);\n\n    // 初始化事件控制器\n    const eventController = new EventController({\n      canvas: this,\n      el: canvas\n    });\n    self.set('eventController', eventController);\n  }\n\n  changeSize(width, height) {\n    const pixelRatio = this.get('pixelRatio');\n    const canvasDOM = this.get('el'); // HTMLCanvasElement or canvasElement\n\n    // 浏览器环境设置style样式\n    if (canvasDOM.style) {\n      canvasDOM.style.width = width + 'px';\n      canvasDOM.style.height = height + 'px';\n    }\n\n    if (Util.isCanvasElement(canvasDOM)) {\n      canvasDOM.width = width * pixelRatio;\n      canvasDOM.height = height * pixelRatio;\n\n      if (pixelRatio !== 1) {\n        const ctx = this.get('context');\n        ctx.scale(pixelRatio, pixelRatio);\n      }\n    }\n\n    this.set('width', width);\n    this.set('height', height);\n  }\n\n  getWidth() {\n    const pixelRatio = this.get('pixelRatio');\n    const width = this.get('width');\n    return width * pixelRatio;\n  }\n\n  getHeight() {\n    const pixelRatio = this.get('pixelRatio');\n    const height = this.get('height');\n    return height * pixelRatio;\n  }\n\n  getPointByClient(clientX, clientY) {\n    const el = this.get('el');\n    const bbox = el.getBoundingClientRect();\n    const width = bbox.right - bbox.left;\n    const height = bbox.bottom - bbox.top;\n    return {\n      x: (clientX - bbox.left) * (el.width / width),\n      y: (clientY - bbox.top) * (el.height / height)\n    };\n  }\n\n  _beginDraw() {\n    this._attrs.toDraw = true;\n  }\n  _endDraw() {\n    this._attrs.toDraw = false;\n  }\n\n  draw() {\n    const self = this;\n    function drawInner() {\n      self.set('animateHandler', requestAnimationFrame(() => {\n        self.set('animateHandler', undefined);\n        if (self.get('toDraw')) {\n          drawInner();\n        }\n      }));\n      self.beforeDraw();\n      try {\n        const context = self._attrs.context;\n        const children = self._attrs.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n          const child = children[i];\n          child.draw(context);\n        }\n\n        // 支付宝，微信小程序，需要调context.draw才能完成绘制， 所以这里直接判断是否有.draw方法\n        if (context.draw) {\n          context.draw();\n        }\n      } catch (ev) {\n        console.warn('error in draw canvas, detail as:');\n        console.warn(ev);\n        self._endDraw();\n      }\n      self._endDraw();\n    }\n\n    if (self.get('destroyed')) {\n      return;\n    }\n    if (self.get('animateHandler')) {\n      this._beginDraw();\n    } else {\n      drawInner();\n    }\n  }\n\n  destroy() {\n    if (this.get('destroyed')) {\n      return;\n    }\n    this.clear();\n    this._attrs = {};\n    this.set('destroyed', true);\n  }\n\n  isDestroyed() {\n    return this.get('destroyed');\n  }\n}\n\nUtil.mix(Canvas.prototype, Container, {\n  getGroupClass() {\n    return Group;\n  }\n});\n\nmodule.exports = Canvas;\n"]},"metadata":{},"sourceType":"module"}