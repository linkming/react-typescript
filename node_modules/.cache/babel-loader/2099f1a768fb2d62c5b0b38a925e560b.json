{"ast":null,"code":"import { isArray, isNil, each } from '@antv/util';\nimport Base from './base';\n\nclass Position extends Base {\n  constructor(cfg) {\n    super(cfg);\n    this.names = ['x', 'y'];\n    this.type = 'position';\n  }\n\n  mapping(x, y) {\n    const scales = this.scales;\n    const coord = this.coord;\n    const scaleX = scales[0];\n    const scaleY = scales[1];\n    let rstX;\n    let rstY;\n    let obj;\n\n    if (isNil(x) || isNil(y)) {\n      return [];\n    }\n\n    if (isArray(y) && isArray(x)) {\n      rstX = [];\n      rstY = [];\n\n      for (let i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i++, j++) {\n        obj = coord.convertPoint({\n          x: scaleX.scale(x[i]),\n          y: scaleY.scale(y[j])\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      x = scaleX.scale(x);\n      rstY = [];\n      each(y, function (yVal) {\n        yVal = scaleY.scale(yVal);\n        obj = coord.convertPoint({\n          x,\n          y: yVal\n        });\n\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n\n        rstY.push(obj.y);\n      });\n    } else if (isArray(x)) {\n      y = scaleY.scale(y);\n      rstX = [];\n      each(x, function (xVal) {\n        xVal = scaleX.scale(xVal);\n        obj = coord.convertPoint({\n          x: xVal,\n          y\n        });\n\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n\n        rstX.push(obj.x);\n      });\n    } else {\n      x = scaleX.scale(x);\n      y = scaleY.scale(y);\n      const point = coord.convertPoint({\n        x,\n        y\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n\n    return [rstX, rstY];\n  }\n\n}\n\nexport default Position;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/attr/position.js"],"names":["isArray","isNil","each","Base","Position","constructor","cfg","names","type","mapping","x","y","scales","coord","scaleX","scaleY","rstX","rstY","obj","i","j","xLen","length","yLen","convertPoint","scale","push","yVal","xVal","point"],"mappings":"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","sourcesContent":["import {\n  isArray,\n  isNil,\n  each\n} from '@antv/util';\nimport Base from './base';\n\nclass Position extends Base {\n  constructor(cfg) {\n    super(cfg);\n    this.names = [ 'x', 'y' ];\n    this.type = 'position';\n  }\n\n  mapping(x, y) {\n    const scales = this.scales;\n    const coord = this.coord;\n    const scaleX = scales[0];\n    const scaleY = scales[1];\n    let rstX;\n    let rstY;\n    let obj;\n    if (isNil(x) || isNil(y)) {\n      return [];\n    }\n    if (isArray(y) && isArray(x)) {\n      rstX = [];\n      rstY = [];\n      for (let i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i++, j++) {\n        obj = coord.convertPoint({\n          x: scaleX.scale(x[i]),\n          y: scaleY.scale(y[j])\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      x = scaleX.scale(x);\n      rstY = [];\n      each(y, function(yVal) {\n        yVal = scaleY.scale(yVal);\n        obj = coord.convertPoint({\n          x,\n          y: yVal\n        });\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [ rstX ];\n          }\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n        rstY.push(obj.y);\n      });\n    } else if (isArray(x)) {\n      y = scaleY.scale(y);\n      rstX = [];\n      each(x, function(xVal) {\n        xVal = scaleX.scale(xVal);\n        obj = coord.convertPoint({\n          x: xVal,\n          y\n        });\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [ rstY ];\n          }\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n        rstX.push(obj.x);\n      });\n    } else {\n      x = scaleX.scale(x);\n      y = scaleY.scale(y);\n      const point = coord.convertPoint({\n        x,\n        y\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n    return [ rstX, rstY ];\n  }\n}\n\nexport default Position;\n"]},"metadata":{},"sourceType":"module"}