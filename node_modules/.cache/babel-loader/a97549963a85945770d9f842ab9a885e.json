{"ast":null,"code":"/**\n * @fileOverview Utility for calculate the with ratui in x axis\n * @author sima.zhang1990@gmail.com\n * @author dxq613@gmail.com\n */\nimport { EVENT_AFTER_SIZE_CHANGE } from '../../chart/const';\n\nconst Global = require('../../global');\n\nconst Util = require('../../util/common');\n\nconst SizeMixin = {\n  initEvent() {\n    const chart = this.get('chart');\n\n    if (!chart) {\n      return;\n    }\n\n    chart.on(EVENT_AFTER_SIZE_CHANGE, () => {\n      this.set('_width', null);\n    });\n  },\n\n  getDefalutSize() {\n    let defaultSize = this.get('defaultSize');\n\n    if (!defaultSize) {\n      const coord = this.get('coord');\n      const xScale = this.getXScale();\n      const dataArray = this.get('dataArray');\n      const values = Util.uniq(xScale.values);\n      const count = values.length;\n      const range = xScale.range;\n      let normalizeSize = 1 / count;\n      let widthRatio = 1;\n\n      if (coord && coord.isPolar) {\n        if (coord.transposed && count > 1) {\n          widthRatio = Global.widthRatio.multiplePie;\n        } else {\n          widthRatio = Global.widthRatio.rose;\n        }\n      } else {\n        if (xScale.isLinear) {\n          normalizeSize *= range[1] - range[0];\n        }\n\n        widthRatio = Global.widthRatio.column;\n      }\n\n      normalizeSize *= widthRatio;\n\n      if (this.hasAdjust('dodge')) {\n        normalizeSize = normalizeSize / dataArray.length;\n      }\n\n      defaultSize = normalizeSize;\n      this.set('defaultSize', defaultSize);\n    }\n\n    return defaultSize;\n  },\n\n  getDimWidth(dimName) {\n    const coord = this.get('coord');\n    const start = coord.convertPoint({\n      x: 0,\n      y: 0\n    });\n    const end = coord.convertPoint({\n      x: dimName === 'x' ? 1 : 0,\n      y: dimName === 'x' ? 0 : 1\n    });\n    let width = 0;\n\n    if (start && end) {\n      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n    }\n\n    return width;\n  },\n\n  _getWidth() {\n    let width = this.get('_width');\n\n    if (!width) {\n      const coord = this.get('coord');\n\n      if (coord && coord.isPolar && !coord.transposed) {\n        width = (coord.endAngle - coord.startAngle) * coord.circleRadius;\n      } else {\n        width = this.getDimWidth('x');\n      }\n\n      this.set('_width', width);\n    }\n\n    return width;\n  },\n\n  _toNormalizedSize(size) {\n    const width = this._getWidth();\n\n    return size / width;\n  },\n\n  _toCoordSize(normalizeSize) {\n    const width = this._getWidth();\n\n    return width * normalizeSize;\n  },\n\n  getNormalizedSize(obj) {\n    let size = this.getAttrValue('size', obj);\n\n    if (Util.isNil(size)) {\n      size = this.getDefalutSize();\n    } else {\n      size = this._toNormalizedSize(size);\n    }\n\n    return size;\n  },\n\n  getSize(obj) {\n    let size = this.getAttrValue('size', obj);\n\n    if (Util.isNil(size)) {\n      const normalizeSize = this.getDefalutSize();\n      size = this._toCoordSize(normalizeSize);\n    }\n\n    return size;\n  }\n\n};\nmodule.exports = SizeMixin;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/geom/mixin/size.js"],"names":["EVENT_AFTER_SIZE_CHANGE","Global","require","Util","SizeMixin","initEvent","chart","get","on","set","getDefalutSize","defaultSize","coord","xScale","getXScale","dataArray","values","uniq","count","length","range","normalizeSize","widthRatio","isPolar","transposed","multiplePie","rose","isLinear","column","hasAdjust","getDimWidth","dimName","start","convertPoint","x","y","end","width","Math","sqrt","pow","_getWidth","endAngle","startAngle","circleRadius","_toNormalizedSize","size","_toCoordSize","getNormalizedSize","obj","getAttrValue","isNil","getSize","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview Utility for calculate the with ratui in x axis\n * @author sima.zhang1990@gmail.com\n * @author dxq613@gmail.com\n */\nimport {\n  EVENT_AFTER_SIZE_CHANGE\n} from '../../chart/const';\n\nconst Global = require('../../global');\nconst Util = require('../../util/common');\n\n\nconst SizeMixin = {\n  initEvent() {\n    const chart = this.get('chart');\n    if (!chart) {\n      return;\n    }\n    chart.on(EVENT_AFTER_SIZE_CHANGE, () => {\n      this.set('_width', null);\n    });\n  },\n  getDefalutSize() {\n    let defaultSize = this.get('defaultSize');\n    if (!defaultSize) {\n      const coord = this.get('coord');\n      const xScale = this.getXScale();\n      const dataArray = this.get('dataArray');\n      const values = Util.uniq(xScale.values);\n      const count = values.length;\n      const range = xScale.range;\n      let normalizeSize = 1 / count;\n      let widthRatio = 1;\n\n      if (coord && coord.isPolar) {\n        if (coord.transposed && count > 1) {\n          widthRatio = Global.widthRatio.multiplePie;\n        } else {\n          widthRatio = Global.widthRatio.rose;\n        }\n      } else {\n        if (xScale.isLinear) {\n          normalizeSize *= (range[1] - range[0]);\n        }\n        widthRatio = Global.widthRatio.column;\n      }\n      normalizeSize *= widthRatio;\n      if (this.hasAdjust('dodge')) {\n        normalizeSize = normalizeSize / dataArray.length;\n      }\n      defaultSize = normalizeSize;\n      this.set('defaultSize', defaultSize);\n    }\n    return defaultSize;\n  },\n  getDimWidth(dimName) {\n    const coord = this.get('coord');\n    const start = coord.convertPoint({\n      x: 0,\n      y: 0\n    });\n    const end = coord.convertPoint({\n      x: dimName === 'x' ? 1 : 0,\n      y: dimName === 'x' ? 0 : 1\n    });\n    let width = 0;\n    if (start && end) {\n      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n    }\n    return width;\n  },\n  _getWidth() {\n    let width = this.get('_width');\n    if (!width) {\n      const coord = this.get('coord');\n      if (coord && coord.isPolar && !coord.transposed) {\n        width = (coord.endAngle - coord.startAngle) * coord.circleRadius;\n      } else {\n        width = this.getDimWidth('x');\n      }\n      this.set('_width', width);\n    }\n\n    return width;\n  },\n  _toNormalizedSize(size) {\n    const width = this._getWidth();\n    return size / width;\n  },\n  _toCoordSize(normalizeSize) {\n    const width = this._getWidth();\n    return width * normalizeSize;\n  },\n  getNormalizedSize(obj) {\n    let size = this.getAttrValue('size', obj);\n    if (Util.isNil(size)) {\n      size = this.getDefalutSize();\n    } else {\n      size = this._toNormalizedSize(size);\n    }\n    return size;\n  },\n  getSize(obj) {\n    let size = this.getAttrValue('size', obj);\n    if (Util.isNil(size)) {\n      const normalizeSize = this.getDefalutSize();\n      size = this._toCoordSize(normalizeSize);\n    }\n    return size;\n  }\n};\n\nmodule.exports = SizeMixin;\n"]},"metadata":{},"sourceType":"module"}