{"ast":null,"code":"const Matrix = {\n  multiply(m1, m2) {\n    const m11 = m1[0] * m2[0] + m1[2] * m2[1];\n    const m12 = m1[1] * m2[0] + m1[3] * m2[1];\n    const m21 = m1[0] * m2[2] + m1[2] * m2[3];\n    const m22 = m1[1] * m2[2] + m1[3] * m2[3];\n    const dx = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n    const dy = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n    return [m11, m12, m21, m22, dx, dy];\n  },\n\n  scale(out, m, v) {\n    out[0] = m[0] * v[0];\n    out[1] = m[1] * v[0];\n    out[2] = m[2] * v[1];\n    out[3] = m[3] * v[1];\n    out[4] = m[4];\n    out[5] = m[5];\n    return out;\n  },\n\n  rotate(out, m, radian) {\n    const c = Math.cos(radian);\n    const s = Math.sin(radian);\n    const m11 = m[0] * c + m[2] * s;\n    const m12 = m[1] * c + m[3] * s;\n    const m21 = m[0] * -s + m[2] * c;\n    const m22 = m[1] * -s + m[3] * c;\n    out[0] = m11;\n    out[1] = m12;\n    out[2] = m21;\n    out[3] = m22;\n    out[4] = m[4];\n    out[5] = m[5];\n    return out;\n  },\n\n  translate(out, m, v) {\n    out[0] = m[0];\n    out[1] = m[1];\n    out[2] = m[2];\n    out[3] = m[3];\n    out[4] = m[4] + m[0] * v[0] + m[2] * v[1];\n    out[5] = m[5] + m[1] * v[0] + m[3] * v[1];\n    return out;\n  },\n\n  transform(m, actions) {\n    const out = [].concat(m);\n\n    for (let i = 0, len = actions.length; i < len; i++) {\n      const action = actions[i];\n\n      switch (action[0]) {\n        case 't':\n          Matrix.translate(out, out, [action[1], action[2]]);\n          break;\n\n        case 's':\n          Matrix.scale(out, out, [action[1], action[2]]);\n          break;\n\n        case 'r':\n          Matrix.rotate(out, out, action[1]);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return out;\n  }\n\n};\nmodule.exports = Matrix;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/util/matrix.js"],"names":["Matrix","multiply","m1","m2","m11","m12","m21","m22","dx","dy","scale","out","m","v","rotate","radian","c","Math","cos","s","sin","translate","transform","actions","concat","i","len","length","action","module","exports"],"mappings":"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","sourcesContent":["const Matrix = {\n  multiply(m1, m2) {\n    const m11 = m1[0] * m2[0] + m1[2] * m2[1];\n    const m12 = m1[1] * m2[0] + m1[3] * m2[1];\n\n    const m21 = m1[0] * m2[2] + m1[2] * m2[3];\n    const m22 = m1[1] * m2[2] + m1[3] * m2[3];\n\n    const dx = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n    const dy = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n\n    return [ m11, m12, m21, m22, dx, dy ];\n  },\n  scale(out, m, v) {\n    out[0] = m[0] * v[0];\n    out[1] = m[1] * v[0];\n    out[2] = m[2] * v[1];\n    out[3] = m[3] * v[1];\n    out[4] = m[4];\n    out[5] = m[5];\n\n    return out;\n  },\n  rotate(out, m, radian) {\n    const c = Math.cos(radian);\n    const s = Math.sin(radian);\n    const m11 = m[0] * c + m[2] * s;\n    const m12 = m[1] * c + m[3] * s;\n    const m21 = m[0] * -s + m[2] * c;\n    const m22 = m[1] * -s + m[3] * c;\n    out[0] = m11;\n    out[1] = m12;\n    out[2] = m21;\n    out[3] = m22;\n    out[4] = m[4];\n    out[5] = m[5];\n\n    return out;\n  },\n  translate(out, m, v) {\n    out[0] = m[0];\n    out[1] = m[1];\n    out[2] = m[2];\n    out[3] = m[3];\n    out[4] = m[4] + m[0] * v[0] + m[2] * v[1];\n    out[5] = m[5] + m[1] * v[0] + m[3] * v[1];\n    return out;\n  },\n  transform(m, actions) {\n    const out = [].concat(m);\n    for (let i = 0, len = actions.length; i < len; i++) {\n      const action = actions[i];\n      switch (action[0]) {\n        case 't':\n          Matrix.translate(out, out, [ action[1], action[2] ]);\n          break;\n        case 's':\n          Matrix.scale(out, out, [ action[1], action[2] ]);\n          break;\n        case 'r':\n          Matrix.rotate(out, out, action[1]);\n          break;\n        default:\n          break;\n      }\n    }\n\n    return out;\n  }\n};\n\nmodule.exports = Matrix;\n"]},"metadata":{},"sourceType":"script"}