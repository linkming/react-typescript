{"ast":null,"code":"/**\n * Animate configuration and register\n * @author sima.zhang1990@gmail.com\n */\nconst Util = require('../util/common');\n\nconst defaultAnimationCfg = {\n  appear: {\n    duration: 450,\n    easing: 'quadraticOut'\n  },\n  // 'appear' animation options\n  update: {\n    duration: 300,\n    easing: 'quadraticOut'\n  },\n  // 'update' animation options\n  enter: {\n    duration: 300,\n    easing: 'quadraticOut'\n  },\n  // 'enter' animation options\n  leave: {\n    duration: 350,\n    easing: 'quadraticIn'\n  } // 'leave' animation options\n\n};\nconst Animate = {\n  defaultCfg: {},\n  Action: {},\n\n  getAnimation(geomType, coord, animationType) {\n    const geomAnimateCfg = this.defaultCfg[geomType];\n\n    if (geomAnimateCfg) {\n      const animation = geomAnimateCfg[animationType];\n\n      if (Util.isFunction(animation)) {\n        return animation(coord);\n      }\n    }\n\n    return false;\n  },\n\n  getAnimateCfg(geomType, animationType) {\n    const defaultCfg = defaultAnimationCfg[animationType];\n    const geomConfig = this.defaultCfg[geomType];\n\n    if (geomConfig && geomConfig.cfg && geomConfig.cfg[animationType]) {\n      return Util.deepMix({}, defaultCfg, geomConfig.cfg[animationType]);\n    }\n\n    return defaultCfg;\n  },\n\n  registerAnimation(animationName, animationFun) {\n    if (!this.Action) {\n      this.Action = {};\n    }\n\n    this.Action[animationName] = animationFun;\n  }\n\n};\nmodule.exports = Animate;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/animation/animate.js"],"names":["Util","require","defaultAnimationCfg","appear","duration","easing","update","enter","leave","Animate","defaultCfg","Action","getAnimation","geomType","coord","animationType","geomAnimateCfg","animation","isFunction","getAnimateCfg","geomConfig","cfg","deepMix","registerAnimation","animationName","animationFun","module","exports"],"mappings":"AAAA;;;;AAIA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,GADJ;AAENC,IAAAA,MAAM,EAAE;AAFF,GADkB;AAIvB;AACHC,EAAAA,MAAM,EAAE;AACNF,IAAAA,QAAQ,EAAE,GADJ;AAENC,IAAAA,MAAM,EAAE;AAFF,GALkB;AAQvB;AACHE,EAAAA,KAAK,EAAE;AACLH,IAAAA,QAAQ,EAAE,GADL;AAELC,IAAAA,MAAM,EAAE;AAFH,GATmB;AAYvB;AACHG,EAAAA,KAAK,EAAE;AACLJ,IAAAA,QAAQ,EAAE,GADL;AAELC,IAAAA,MAAM,EAAE;AAFH,GAbmB,CAgBxB;;AAhBwB,CAA5B;AAmBA,MAAMI,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,MAAM,EAAE,EAFM;;AAGdC,EAAAA,YAAY,CAACC,QAAD,EAAWC,KAAX,EAAkBC,aAAlB,EAAiC;AAC3C,UAAMC,cAAc,GAAG,KAAKN,UAAL,CAAgBG,QAAhB,CAAvB;;AACA,QAAIG,cAAJ,EAAoB;AAClB,YAAMC,SAAS,GAAGD,cAAc,CAACD,aAAD,CAAhC;;AACA,UAAIf,IAAI,CAACkB,UAAL,CAAgBD,SAAhB,CAAJ,EAAgC;AAC9B,eAAOA,SAAS,CAACH,KAAD,CAAhB;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAZa;;AAadK,EAAAA,aAAa,CAACN,QAAD,EAAWE,aAAX,EAA0B;AACrC,UAAML,UAAU,GAAGR,mBAAmB,CAACa,aAAD,CAAtC;AACA,UAAMK,UAAU,GAAG,KAAKV,UAAL,CAAgBG,QAAhB,CAAnB;;AACA,QAAIO,UAAU,IAAIA,UAAU,CAACC,GAAzB,IAAgCD,UAAU,CAACC,GAAX,CAAeN,aAAf,CAApC,EAAmE;AACjE,aAAOf,IAAI,CAACsB,OAAL,CAAa,EAAb,EAAiBZ,UAAjB,EAA6BU,UAAU,CAACC,GAAX,CAAeN,aAAf,CAA7B,CAAP;AACD;;AACD,WAAOL,UAAP;AACD,GApBa;;AAqBda,EAAAA,iBAAiB,CAACC,aAAD,EAAgBC,YAAhB,EAA8B;AAC7C,QAAI,CAAC,KAAKd,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAc,EAAd;AACD;;AACD,SAAKA,MAAL,CAAYa,aAAZ,IAA6BC,YAA7B;AACD;;AA1Ba,CAAhB;AA6BAC,MAAM,CAACC,OAAP,GAAiBlB,OAAjB","sourcesContent":["/**\n * Animate configuration and register\n * @author sima.zhang1990@gmail.com\n */\nconst Util = require('../util/common');\nconst defaultAnimationCfg = {\n  appear: {\n    duration: 450,\n    easing: 'quadraticOut'\n  }, // 'appear' animation options\n  update: {\n    duration: 300,\n    easing: 'quadraticOut'\n  }, // 'update' animation options\n  enter: {\n    duration: 300,\n    easing: 'quadraticOut'\n  }, // 'enter' animation options\n  leave: {\n    duration: 350,\n    easing: 'quadraticIn'\n  } // 'leave' animation options\n};\n\nconst Animate = {\n  defaultCfg: {},\n  Action: {},\n  getAnimation(geomType, coord, animationType) {\n    const geomAnimateCfg = this.defaultCfg[geomType];\n    if (geomAnimateCfg) {\n      const animation = geomAnimateCfg[animationType];\n      if (Util.isFunction(animation)) {\n        return animation(coord);\n      }\n    }\n    return false;\n  },\n  getAnimateCfg(geomType, animationType) {\n    const defaultCfg = defaultAnimationCfg[animationType];\n    const geomConfig = this.defaultCfg[geomType];\n    if (geomConfig && geomConfig.cfg && geomConfig.cfg[animationType]) {\n      return Util.deepMix({}, defaultCfg, geomConfig.cfg[animationType]);\n    }\n    return defaultCfg;\n  },\n  registerAnimation(animationName, animationFun) {\n    if (!this.Action) {\n      this.Action = {};\n    }\n    this.Action[animationName] = animationFun;\n  }\n};\n\nmodule.exports = Animate;\n"]},"metadata":{},"sourceType":"script"}