{"ast":null,"code":"const Util = require('../util/common');\n\nconst Shape = require('./shape');\n\nconst SHAPE_MAP = {};\nconst INDEX = '_INDEX';\n\nfunction getComparer(compare) {\n  return function (left, right) {\n    const result = compare(left, right);\n    return result === 0 ? left[INDEX] - right[INDEX] : result;\n  };\n}\n\nmodule.exports = {\n  getGroupClass() {},\n\n  getChildren() {\n    return this.get('children');\n  },\n\n  addShape(type, cfg = {}) {\n    const canvas = this.get('canvas');\n    let shapeType = SHAPE_MAP[type];\n\n    if (!shapeType) {\n      shapeType = Util.upperFirst(type);\n      SHAPE_MAP[type] = shapeType;\n    }\n\n    cfg.canvas = canvas;\n\n    if (shapeType === 'Text' && canvas && canvas.get('fontFamily')) {\n      cfg.attrs.fontFamily = cfg.attrs.fontFamily || canvas.get('fontFamily');\n    }\n\n    const shape = new Shape[shapeType](cfg);\n    this.add(shape);\n    return shape;\n  },\n\n  addGroup(cfg) {\n    const canvas = this.get('canvas');\n    const groupClass = this.getGroupClass();\n    cfg = Util.mix({}, cfg);\n    cfg.canvas = canvas;\n    cfg.parent = this;\n    const rst = new groupClass(cfg);\n    this.add(rst);\n    return rst;\n  },\n\n  contain(item) {\n    const children = this.get('children');\n    return children.indexOf(item) > -1;\n  },\n\n  sort() {\n    const children = this.get('children');\n\n    for (let i = 0, len = children.length; i < len; i++) {\n      const child = children[i];\n      child[INDEX] = i;\n    }\n\n    children.sort(getComparer(function (obj1, obj2) {\n      return obj1.get('zIndex') - obj2.get('zIndex');\n    }));\n    return this;\n  },\n\n  clear() {\n    const children = this.get('children');\n\n    while (children.length !== 0) {\n      children[children.length - 1].remove(true);\n    }\n\n    return this;\n  },\n\n  add(items) {\n    const self = this;\n    const children = self.get('children');\n\n    if (!Util.isArray(items)) {\n      items = [items];\n    }\n\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const parent = item.get('parent');\n\n      if (parent) {\n        const descendants = parent.get('children');\n        Util.Array.remove(descendants, item);\n      }\n\n      self._setEvn(item);\n\n      children.push(item);\n    }\n\n    return self;\n  },\n\n  _setEvn(item) {\n    const self = this;\n    item._attrs.parent = self;\n    item._attrs.context = self._attrs.context;\n    item._attrs.canvas = self._attrs.canvas;\n    const clip = item._attrs.attrs.clip;\n\n    if (clip) {\n      clip.set('parent', self);\n      clip.set('context', self.get('context'));\n    }\n\n    if (item._attrs.isGroup) {\n      const children = item._attrs.children;\n\n      for (let i = 0, len = children.length; i < len; i++) {\n        item._setEvn(children[i]);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/container.js"],"names":["Util","require","Shape","SHAPE_MAP","INDEX","getComparer","compare","left","right","result","module","exports","getGroupClass","getChildren","get","addShape","type","cfg","canvas","shapeType","upperFirst","attrs","fontFamily","shape","add","addGroup","groupClass","mix","parent","rst","contain","item","children","indexOf","sort","i","len","length","child","obj1","obj2","clear","remove","items","self","isArray","descendants","Array","_setEvn","push","_attrs","context","clip","set","isGroup"],"mappings":"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","sourcesContent":["const Util = require('../util/common');\nconst Shape = require('./shape');\nconst SHAPE_MAP = {};\nconst INDEX = '_INDEX';\n\nfunction getComparer(compare) {\n  return function(left, right) {\n    const result = compare(left, right);\n    return result === 0 ? left[INDEX] - right[INDEX] : result;\n  };\n}\n\nmodule.exports = {\n\n  getGroupClass() {},\n\n  getChildren() {\n    return this.get('children');\n  },\n\n  addShape(type, cfg = {}) {\n    const canvas = this.get('canvas');\n    let shapeType = SHAPE_MAP[type];\n    if (!shapeType) {\n      shapeType = Util.upperFirst(type);\n      SHAPE_MAP[type] = shapeType;\n    }\n    cfg.canvas = canvas;\n    if (shapeType === 'Text' && canvas && canvas.get('fontFamily')) {\n      cfg.attrs.fontFamily = cfg.attrs.fontFamily || canvas.get('fontFamily');\n    }\n\n    const shape = new Shape[shapeType](cfg);\n    this.add(shape);\n    return shape;\n  },\n\n  addGroup(cfg) {\n    const canvas = this.get('canvas');\n    const groupClass = this.getGroupClass();\n    cfg = Util.mix({}, cfg);\n    cfg.canvas = canvas;\n    cfg.parent = this;\n    const rst = new groupClass(cfg);\n    this.add(rst);\n    return rst;\n  },\n\n  contain(item) {\n    const children = this.get('children');\n    return children.indexOf(item) > -1;\n  },\n\n  sort() {\n    const children = this.get('children');\n    for (let i = 0, len = children.length; i < len; i++) {\n      const child = children[i];\n      child[INDEX] = i;\n    }\n\n    children.sort(getComparer(function(obj1, obj2) {\n      return obj1.get('zIndex') - obj2.get('zIndex');\n    }));\n\n    return this;\n  },\n\n  clear() {\n    const children = this.get('children');\n\n    while (children.length !== 0) {\n      children[children.length - 1].remove(true);\n    }\n    return this;\n  },\n\n  add(items) {\n    const self = this;\n    const children = self.get('children');\n    if (!Util.isArray(items)) {\n      items = [ items ];\n    }\n\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const parent = item.get('parent');\n      if (parent) {\n        const descendants = parent.get('children');\n        Util.Array.remove(descendants, item);\n      }\n      self._setEvn(item);\n      children.push(item);\n    }\n\n    return self;\n  },\n\n  _setEvn(item) {\n    const self = this;\n    item._attrs.parent = self;\n    item._attrs.context = self._attrs.context;\n    item._attrs.canvas = self._attrs.canvas;\n    const clip = item._attrs.attrs.clip;\n    if (clip) {\n      clip.set('parent', self);\n      clip.set('context', self.get('context'));\n    }\n    if (item._attrs.isGroup) {\n      const children = item._attrs.children;\n      for (let i = 0, len = children.length; i < len; i++) {\n        item._setEvn(children[i]);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}