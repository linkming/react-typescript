{"ast":null,"code":"const Util = require('../util/common');\n\nconst Marker = require('./marker');\n\nconst Container = require('./list');\n\nconst TextBox = require('./text-box');\n\nconst GAP = 4;\n/**\n * TODOList：\n * 1. 移除 fixed 参数\n */\n\nclass Tooltip {\n  getDefaultCfg() {\n    return {\n      /**\n       * wether show the crosshairs\n       * @type {Object}\n       */\n      showCrosshairs: false,\n\n      /**\n       * the style for crosshairs\n       * @type {Object}\n       */\n      crosshairsStyle: {\n        stroke: 'rgba(0, 0, 0, 0.25)',\n        lineWidth: 1\n      },\n\n      /**\n       * the type of crosshairs, optional value is 'x', 'y' or 'xy', default is 'y'\n       */\n      crosshairsType: 'y',\n\n      /**\n       * show or hide the x axis tip\n       */\n      showXTip: false,\n\n      /**\n       * show or hide the y axis tip\n       */\n      showYTip: false,\n      xTip: null,\n      xTipBackground: {\n        radius: 1,\n        fill: 'rgba(0, 0, 0, 0.65)',\n        padding: [3, 5]\n      },\n      yTip: null,\n      yTipBackground: {\n        radius: 1,\n        fill: 'rgba(0, 0, 0, 0.65)',\n        padding: [3, 5]\n      },\n\n      /**\n       * the style for tooltip container's background\n       * @type {Object}\n       */\n      background: null,\n\n      /**\n       * layout, can be horizontal or vertical\n       * @type {String}\n       */\n      layout: 'horizontal',\n      offsetX: 0,\n      offsetY: 0\n    };\n  }\n\n  constructor(cfg) {\n    Util.deepMix(this, this.getDefaultCfg(), cfg);\n    const {\n      frontPlot,\n      custom\n    } = this;\n\n    if (!custom) {\n      // custom means user do customize\n      const container = new Container(Util.mix({\n        parent: frontPlot,\n        zIndex: 3\n      }, cfg));\n      this.container = container;\n      const {\n        fixed,\n        background\n      } = this;\n\n      if (!fixed) {\n        this.tooltipArrow = frontPlot.addShape('Polygon', {\n          className: 'tooltip-arrow',\n          visible: false,\n          zIndex: 2,\n          attrs: Util.mix({\n            points: []\n          }, background)\n        });\n      }\n    }\n\n    if (this.showXTip) {\n      const {\n        xTipBackground\n      } = this;\n      const xTipBox = new TextBox({\n        className: 'xTip',\n        background: xTipBackground,\n        visible: false\n      });\n      frontPlot.add(xTipBox.container);\n      this.xTipBox = xTipBox;\n    }\n\n    if (this.showYTip) {\n      const {\n        yTipBackground\n      } = this;\n      const yTipBox = new TextBox({\n        className: 'yTip',\n        background: yTipBackground,\n        visible: false\n      });\n      frontPlot.add(yTipBox.container);\n      this.yTipBox = yTipBox;\n    }\n\n    if (this.showCrosshairs) {\n      this._renderCrosshairs();\n    }\n\n    frontPlot.sort();\n  }\n\n  setContent(title, items) {\n    this.title = title;\n    this.items = items;\n\n    if (!this.custom) {\n      const container = this.container;\n      container.setTitle(title);\n      container.setItems(items);\n    }\n  }\n\n  setYTipContent(val) {\n    const yTip = this.yTip;\n\n    if (Util.isFunction(yTip)) {\n      val = yTip(val);\n    } else {\n      val = Util.mix({\n        text: val\n      }, yTip);\n    }\n\n    this.yTipBox && this.yTipBox.updateContent(val);\n  }\n\n  setYTipPosition(pos) {\n    const plotRange = this.plotRange;\n    const crosshairsShapeX = this.crosshairsShapeX;\n\n    if (this.showYTip) {\n      const yTipBox = this.yTipBox;\n      const yTipHeight = yTipBox.getHeight();\n      const yTipWidth = yTipBox.getWidth();\n      let posX = plotRange.tl.x - yTipWidth;\n      let posY = pos - yTipHeight / 2;\n\n      if (posY <= plotRange.tl.y) {\n        posY = plotRange.tl.y;\n      }\n\n      if (posY + yTipHeight >= plotRange.br.y) {\n        posY = plotRange.br.y - yTipHeight;\n      }\n\n      if (posX < 0) {\n        posX = plotRange.tl.x;\n        crosshairsShapeX && crosshairsShapeX.attr('x1', plotRange.tl.x + yTipWidth);\n      }\n\n      yTipBox.updatePosition(posX, posY);\n    }\n  }\n\n  setXTipContent(val) {\n    const xTip = this.xTip;\n\n    if (Util.isFunction(xTip)) {\n      val = xTip(val);\n    } else {\n      val = Util.mix({\n        text: val\n      }, xTip);\n    }\n\n    this.xTipBox && this.xTipBox.updateContent(val);\n  }\n\n  setXTipPosition(pos) {\n    const {\n      showXTip,\n      canvas,\n      plotRange,\n      xTipBox,\n      crosshairsShapeY\n    } = this;\n\n    if (showXTip) {\n      // const el = canvas.get('el');\n      // const canvasHeight = Util.getHeight(el);\n      const canvasHeight = canvas.get('height');\n      const xTipWidth = xTipBox.getWidth();\n      const xTipHeight = xTipBox.getHeight();\n      let posX = pos - xTipWidth / 2;\n      let posY = plotRange.br.y;\n\n      if (posX <= plotRange.tl.x) {\n        posX = plotRange.tl.x;\n      }\n\n      if (posX + xTipWidth >= plotRange.tr.x) {\n        posX = plotRange.tr.x - xTipWidth;\n      }\n\n      if (canvasHeight - posY < xTipHeight) {\n        posY -= xTipHeight;\n      }\n\n      xTipBox.updatePosition(posX, posY);\n      crosshairsShapeY && crosshairsShapeY.attr('y1', posY);\n    }\n  }\n\n  setXCrosshairPosition(pos) {\n    this.crosshairsShapeX && this.crosshairsShapeX.moveTo(0, pos);\n  }\n\n  setYCrosshairPosition(pos) {\n    this.crosshairsShapeY && this.crosshairsShapeY.moveTo(pos, 0);\n  }\n\n  setPosition(items) {\n    const {\n      container,\n      plotRange,\n      offsetX,\n      offsetY,\n      fixed,\n      tooltipArrow\n    } = this;\n\n    if (!container) {\n      return;\n    }\n\n    const containerBBox = container.container.getBBox();\n    const {\n      minX,\n      minY,\n      width,\n      height\n    } = containerBBox;\n    const {\n      tl,\n      tr\n    } = plotRange;\n    let posX = 0;\n    const posY = tl.y - height - GAP + offsetY;\n\n    if (fixed) {\n      const x = (tl.x + tr.x) / 2;\n      posX = x - width / 2 + offsetX;\n    } else {\n      let x;\n\n      if (items.length > 1) {\n        x = (items[0].x + items[items.length - 1].x) / 2;\n      } else {\n        x = items[0].x;\n      }\n\n      posX = x - width / 2 + offsetX;\n\n      if (posX < tl.x) {\n        posX = tl.x;\n      }\n\n      if (posX + width > tr.x) {\n        posX = tr.x - width;\n      }\n\n      if (tooltipArrow) {\n        tooltipArrow.attr('points', [{\n          x: x - 3,\n          y: tl.y - GAP + offsetY\n        }, {\n          x: x + 3,\n          y: tl.y - GAP + offsetY\n        }, {\n          x,\n          y: tl.y + offsetY\n        }]);\n        const backShape = container.backShape;\n        const radius = Util.parsePadding(backShape.attr('radius'));\n\n        if (x === tl.x) {\n          radius[3] = 0;\n          tooltipArrow.attr('points', [{\n            x: tl.x,\n            y: tl.y + offsetY\n          }, {\n            x: tl.x,\n            y: tl.y - GAP + offsetY\n          }, {\n            x: tl.x + GAP,\n            y: tl.y - GAP + offsetY\n          }]);\n        } else if (x === tr.x) {\n          radius[2] = 0;\n          tooltipArrow.attr('points', [{\n            x: tr.x,\n            y: tl.y + offsetY\n          }, {\n            x: tr.x - GAP,\n            y: tl.y - GAP + offsetY\n          }, {\n            x: tr.x,\n            y: tl.y - GAP + offsetY\n          }]);\n        }\n\n        backShape.attr('radius', radius);\n      }\n    }\n\n    container.moveTo(posX - minX, posY - minY);\n  }\n\n  setMarkers(cfg = {}) {\n    const self = this;\n    const {\n      items,\n      style,\n      type\n    } = cfg;\n\n    const markerGroup = self._getMarkerGroup(type);\n\n    if (type === 'circle') {\n      for (let i = 0, length = items.length; i < length; i++) {\n        const item = items[i];\n        const marker = new Marker({\n          className: 'tooltip-circle-marker',\n          attrs: Util.mix({\n            x: item.x,\n            y: item.y,\n            stroke: item.color\n          }, style)\n        });\n        markerGroup.add(marker);\n      }\n    } else {\n      markerGroup.addShape('rect', {\n        className: 'tooltip-rect-marker',\n        attrs: style\n      });\n    }\n  }\n\n  clearMarkers() {\n    const markerGroup = this.markerGroup;\n    markerGroup && markerGroup.clear();\n  }\n\n  show() {\n    const crosshairsShapeX = this.crosshairsShapeX;\n    const crosshairsShapeY = this.crosshairsShapeY;\n    const markerGroup = this.markerGroup;\n    const container = this.container;\n    const tooltipArrow = this.tooltipArrow;\n    const xTipBox = this.xTipBox;\n    const yTipBox = this.yTipBox;\n    const canvas = this.canvas;\n    crosshairsShapeX && crosshairsShapeX.show();\n    crosshairsShapeY && crosshairsShapeY.show();\n    markerGroup && markerGroup.show();\n    container && container.show();\n    tooltipArrow && tooltipArrow.show();\n    xTipBox && xTipBox.show();\n    yTipBox && yTipBox.show();\n    canvas.draw();\n  }\n\n  hide() {\n    const crosshairsShapeX = this.crosshairsShapeX;\n    const crosshairsShapeY = this.crosshairsShapeY;\n    const markerGroup = this.markerGroup;\n    const container = this.container;\n    const tooltipArrow = this.tooltipArrow;\n    const xTipBox = this.xTipBox;\n    const yTipBox = this.yTipBox;\n    crosshairsShapeX && crosshairsShapeX.hide();\n    crosshairsShapeY && crosshairsShapeY.hide();\n    markerGroup && markerGroup.hide();\n    container && container.hide();\n    tooltipArrow && tooltipArrow.hide();\n    xTipBox && xTipBox.hide();\n    yTipBox && yTipBox.hide();\n  }\n\n  destroy() {\n    const crosshairsShapeX = this.crosshairsShapeX;\n    const crosshairsShapeY = this.crosshairsShapeY;\n    const markerGroup = this.markerGroup;\n    const container = this.container;\n    const tooltipArrow = this.tooltipArrow;\n    const xTipBox = this.xTipBox;\n    const yTipBox = this.yTipBox;\n    crosshairsShapeX && crosshairsShapeX.remove(true);\n    crosshairsShapeY && crosshairsShapeY.remove(true);\n    markerGroup && markerGroup.remove(true);\n    tooltipArrow && tooltipArrow.remove(true);\n    container && container.clear();\n    xTipBox && xTipBox.clear();\n    yTipBox && yTipBox.clear();\n    this.destroyed = true;\n  }\n\n  _getMarkerGroup(type) {\n    let markerGroup = this.markerGroup;\n\n    if (!markerGroup) {\n      if (type === 'circle') {\n        markerGroup = this.frontPlot.addGroup({\n          zIndex: 1\n        });\n        this.frontPlot.sort();\n      } else {\n        markerGroup = this.backPlot.addGroup();\n      }\n\n      this.markerGroup = markerGroup;\n    } else {\n      markerGroup.clear();\n    }\n\n    return markerGroup;\n  }\n\n  _renderCrosshairs() {\n    const {\n      crosshairsType,\n      crosshairsStyle,\n      frontPlot,\n      plotRange\n    } = this;\n    const {\n      tl,\n      br\n    } = plotRange;\n\n    if (Util.directionEnabled(crosshairsType, 'x')) {\n      this.crosshairsShapeX = frontPlot.addShape('Line', {\n        className: 'tooltip-crosshairs-x',\n        zIndex: 0,\n        visible: false,\n        attrs: Util.mix({\n          x1: tl.x,\n          y1: 0,\n          x2: br.x,\n          y2: 0\n        }, crosshairsStyle)\n      });\n    }\n\n    if (Util.directionEnabled(crosshairsType, 'y')) {\n      this.crosshairsShapeY = frontPlot.addShape('Line', {\n        className: 'tooltip-crosshairs-y',\n        zIndex: 0,\n        visible: false,\n        attrs: Util.mix({\n          x1: 0,\n          y1: br.y,\n          x2: 0,\n          y2: tl.y\n        }, crosshairsStyle)\n      });\n    }\n  }\n\n}\n\nmodule.exports = Tooltip;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/tooltip.js"],"names":["Util","require","Marker","Container","TextBox","GAP","Tooltip","getDefaultCfg","showCrosshairs","crosshairsStyle","stroke","lineWidth","crosshairsType","showXTip","showYTip","xTip","xTipBackground","radius","fill","padding","yTip","yTipBackground","background","layout","offsetX","offsetY","constructor","cfg","deepMix","frontPlot","custom","container","mix","parent","zIndex","fixed","tooltipArrow","addShape","className","visible","attrs","points","xTipBox","add","yTipBox","_renderCrosshairs","sort","setContent","title","items","setTitle","setItems","setYTipContent","val","isFunction","text","updateContent","setYTipPosition","pos","plotRange","crosshairsShapeX","yTipHeight","getHeight","yTipWidth","getWidth","posX","tl","x","posY","y","br","attr","updatePosition","setXTipContent","setXTipPosition","canvas","crosshairsShapeY","canvasHeight","get","xTipWidth","xTipHeight","tr","setXCrosshairPosition","moveTo","setYCrosshairPosition","setPosition","containerBBox","getBBox","minX","minY","width","height","length","backShape","parsePadding","setMarkers","self","style","type","markerGroup","_getMarkerGroup","i","item","marker","color","clearMarkers","clear","show","draw","hide","destroy","remove","destroyed","addGroup","backPlot","directionEnabled","x1","y1","x2","y2","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,QAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMI,GAAG,GAAG,CAAZ;AAEA;;;;;AAIA,MAAMC,OAAN,CAAc;AACZC,EAAAA,aAAa,GAAG;AACd,WAAO;AACL;;;;AAIAC,MAAAA,cAAc,EAAE,KALX;;AAML;;;;AAIAC,MAAAA,eAAe,EAAE;AACfC,QAAAA,MAAM,EAAE,qBADO;AAEfC,QAAAA,SAAS,EAAE;AAFI,OAVZ;;AAcL;;;AAGAC,MAAAA,cAAc,EAAE,GAjBX;;AAkBL;;;AAGAC,MAAAA,QAAQ,EAAE,KArBL;;AAsBL;;;AAGAC,MAAAA,QAAQ,EAAE,KAzBL;AA0BLC,MAAAA,IAAI,EAAE,IA1BD;AA2BLC,MAAAA,cAAc,EAAE;AACdC,QAAAA,MAAM,EAAE,CADM;AAEdC,QAAAA,IAAI,EAAE,qBAFQ;AAGdC,QAAAA,OAAO,EAAE,CAAE,CAAF,EAAK,CAAL;AAHK,OA3BX;AAgCLC,MAAAA,IAAI,EAAE,IAhCD;AAiCLC,MAAAA,cAAc,EAAE;AACdJ,QAAAA,MAAM,EAAE,CADM;AAEdC,QAAAA,IAAI,EAAE,qBAFQ;AAGdC,QAAAA,OAAO,EAAE,CAAE,CAAF,EAAK,CAAL;AAHK,OAjCX;;AAsCL;;;;AAIAG,MAAAA,UAAU,EAAE,IA1CP;;AA2CL;;;;AAIAC,MAAAA,MAAM,EAAE,YA/CH;AAgDLC,MAAAA,OAAO,EAAE,CAhDJ;AAiDLC,MAAAA,OAAO,EAAE;AAjDJ,KAAP;AAmDD;;AAEDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf3B,IAAAA,IAAI,CAAC4B,OAAL,CAAa,IAAb,EAAmB,KAAKrB,aAAL,EAAnB,EAAyCoB,GAAzC;AACA,UAAM;AAAEE,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAwB,IAA9B;;AAEA,QAAI,CAACA,MAAL,EAAa;AAAE;AACb,YAAMC,SAAS,GAAG,IAAI5B,SAAJ,CAAcH,IAAI,CAACgC,GAAL,CAAS;AACvCC,QAAAA,MAAM,EAAEJ,SAD+B;AAEvCK,QAAAA,MAAM,EAAE;AAF+B,OAAT,EAG7BP,GAH6B,CAAd,CAAlB;AAIA,WAAKI,SAAL,GAAiBA,SAAjB;AACA,YAAM;AAAEI,QAAAA,KAAF;AAASb,QAAAA;AAAT,UAAwB,IAA9B;;AACA,UAAI,CAACa,KAAL,EAAY;AACV,aAAKC,YAAL,GAAoBP,SAAS,CAACQ,QAAV,CAAmB,SAAnB,EAA8B;AAChDC,UAAAA,SAAS,EAAE,eADqC;AAEhDC,UAAAA,OAAO,EAAE,KAFuC;AAGhDL,UAAAA,MAAM,EAAE,CAHwC;AAIhDM,UAAAA,KAAK,EAAExC,IAAI,CAACgC,GAAL,CAAS;AACdS,YAAAA,MAAM,EAAE;AADM,WAAT,EAEJnB,UAFI;AAJyC,SAA9B,CAApB;AAQD;AACF;;AACD,QAAI,KAAKT,QAAT,EAAmB;AACjB,YAAM;AAAEG,QAAAA;AAAF,UAAqB,IAA3B;AACA,YAAM0B,OAAO,GAAG,IAAItC,OAAJ,CAAY;AAC1BkC,QAAAA,SAAS,EAAE,MADe;AAE1BhB,QAAAA,UAAU,EAAEN,cAFc;AAG1BuB,QAAAA,OAAO,EAAE;AAHiB,OAAZ,CAAhB;AAKAV,MAAAA,SAAS,CAACc,GAAV,CAAcD,OAAO,CAACX,SAAtB;AACA,WAAKW,OAAL,GAAeA,OAAf;AACD;;AAED,QAAI,KAAK5B,QAAT,EAAmB;AACjB,YAAM;AAAEO,QAAAA;AAAF,UAAqB,IAA3B;AACA,YAAMuB,OAAO,GAAG,IAAIxC,OAAJ,CAAY;AAC1BkC,QAAAA,SAAS,EAAE,MADe;AAE1BhB,QAAAA,UAAU,EAAED,cAFc;AAG1BkB,QAAAA,OAAO,EAAE;AAHiB,OAAZ,CAAhB;AAKAV,MAAAA,SAAS,CAACc,GAAV,CAAcC,OAAO,CAACb,SAAtB;AACA,WAAKa,OAAL,GAAeA,OAAf;AACD;;AAED,QAAI,KAAKpC,cAAT,EAAyB;AACvB,WAAKqC,iBAAL;AACD;;AAEDhB,IAAAA,SAAS,CAACiB,IAAV;AACD;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQC,KAAR,EAAe;AACvB,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;;AACA,QAAI,CAAC,KAAKnB,MAAV,EAAkB;AAChB,YAAMC,SAAS,GAAG,KAAKA,SAAvB;AACAA,MAAAA,SAAS,CAACmB,QAAV,CAAmBF,KAAnB;AACAjB,MAAAA,SAAS,CAACoB,QAAV,CAAmBF,KAAnB;AACD;AACF;;AAEDG,EAAAA,cAAc,CAACC,GAAD,EAAM;AAClB,UAAMjC,IAAI,GAAG,KAAKA,IAAlB;;AACA,QAAIpB,IAAI,CAACsD,UAAL,CAAgBlC,IAAhB,CAAJ,EAA2B;AACzBiC,MAAAA,GAAG,GAAGjC,IAAI,CAACiC,GAAD,CAAV;AACD,KAFD,MAEO;AACLA,MAAAA,GAAG,GAAGrD,IAAI,CAACgC,GAAL,CAAS;AACbuB,QAAAA,IAAI,EAAEF;AADO,OAAT,EAEHjC,IAFG,CAAN;AAGD;;AACD,SAAKwB,OAAL,IAAgB,KAAKA,OAAL,CAAaY,aAAb,CAA2BH,GAA3B,CAAhB;AACD;;AAEDI,EAAAA,eAAe,CAACC,GAAD,EAAM;AACnB,UAAMC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMC,gBAAgB,GAAG,KAAKA,gBAA9B;;AACA,QAAI,KAAK9C,QAAT,EAAmB;AACjB,YAAM8B,OAAO,GAAG,KAAKA,OAArB;AACA,YAAMiB,UAAU,GAAGjB,OAAO,CAACkB,SAAR,EAAnB;AACA,YAAMC,SAAS,GAAGnB,OAAO,CAACoB,QAAR,EAAlB;AACA,UAAIC,IAAI,GAAGN,SAAS,CAACO,EAAV,CAAaC,CAAb,GAAiBJ,SAA5B;AACA,UAAIK,IAAI,GAAGV,GAAG,GAAIG,UAAU,GAAG,CAA/B;;AACA,UAAIO,IAAI,IAAIT,SAAS,CAACO,EAAV,CAAaG,CAAzB,EAA4B;AAC1BD,QAAAA,IAAI,GAAGT,SAAS,CAACO,EAAV,CAAaG,CAApB;AACD;;AACD,UAAID,IAAI,GAAGP,UAAP,IAAqBF,SAAS,CAACW,EAAV,CAAaD,CAAtC,EAAyC;AACvCD,QAAAA,IAAI,GAAGT,SAAS,CAACW,EAAV,CAAaD,CAAb,GAAiBR,UAAxB;AACD;;AAED,UAAII,IAAI,GAAG,CAAX,EAAc;AACZA,QAAAA,IAAI,GAAGN,SAAS,CAACO,EAAV,CAAaC,CAApB;AACAP,QAAAA,gBAAgB,IAAIA,gBAAgB,CAACW,IAAjB,CAAsB,IAAtB,EAA4BZ,SAAS,CAACO,EAAV,CAAaC,CAAb,GAAiBJ,SAA7C,CAApB;AACD;;AAGDnB,MAAAA,OAAO,CAAC4B,cAAR,CAAuBP,IAAvB,EAA6BG,IAA7B;AACD;AACF;;AAEDK,EAAAA,cAAc,CAACpB,GAAD,EAAM;AAClB,UAAMtC,IAAI,GAAG,KAAKA,IAAlB;;AACA,QAAIf,IAAI,CAACsD,UAAL,CAAgBvC,IAAhB,CAAJ,EAA2B;AACzBsC,MAAAA,GAAG,GAAGtC,IAAI,CAACsC,GAAD,CAAV;AACD,KAFD,MAEO;AACLA,MAAAA,GAAG,GAAGrD,IAAI,CAACgC,GAAL,CAAS;AACbuB,QAAAA,IAAI,EAAEF;AADO,OAAT,EAEHtC,IAFG,CAAN;AAGD;;AACD,SAAK2B,OAAL,IAAgB,KAAKA,OAAL,CAAac,aAAb,CAA2BH,GAA3B,CAAhB;AACD;;AAEDqB,EAAAA,eAAe,CAAChB,GAAD,EAAM;AACnB,UAAM;AAAE7C,MAAAA,QAAF;AAAY8D,MAAAA,MAAZ;AAAoBhB,MAAAA,SAApB;AAA+BjB,MAAAA,OAA/B;AAAwCkC,MAAAA;AAAxC,QAA6D,IAAnE;;AACA,QAAI/D,QAAJ,EAAc;AACZ;AACA;AACA,YAAMgE,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,QAAX,CAArB;AACA,YAAMC,SAAS,GAAGrC,OAAO,CAACsB,QAAR,EAAlB;AACA,YAAMgB,UAAU,GAAGtC,OAAO,CAACoB,SAAR,EAAnB;AACA,UAAIG,IAAI,GAAGP,GAAG,GAAIqB,SAAS,GAAG,CAA9B;AACA,UAAIX,IAAI,GAAGT,SAAS,CAACW,EAAV,CAAaD,CAAxB;;AACA,UAAIJ,IAAI,IAAIN,SAAS,CAACO,EAAV,CAAaC,CAAzB,EAA4B;AAC1BF,QAAAA,IAAI,GAAGN,SAAS,CAACO,EAAV,CAAaC,CAApB;AACD;;AACD,UAAIF,IAAI,GAAGc,SAAP,IAAoBpB,SAAS,CAACsB,EAAV,CAAad,CAArC,EAAwC;AACtCF,QAAAA,IAAI,GAAGN,SAAS,CAACsB,EAAV,CAAad,CAAb,GAAiBY,SAAxB;AACD;;AAED,UAAIF,YAAY,GAAGT,IAAf,GAAsBY,UAA1B,EAAsC;AACpCZ,QAAAA,IAAI,IAAIY,UAAR;AACD;;AACDtC,MAAAA,OAAO,CAAC8B,cAAR,CAAuBP,IAAvB,EAA6BG,IAA7B;AACAQ,MAAAA,gBAAgB,IAAIA,gBAAgB,CAACL,IAAjB,CAAsB,IAAtB,EAA4BH,IAA5B,CAApB;AACD;AACF;;AAEDc,EAAAA,qBAAqB,CAACxB,GAAD,EAAM;AACzB,SAAKE,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBuB,MAAtB,CAA6B,CAA7B,EAAgCzB,GAAhC,CAAzB;AACD;;AAED0B,EAAAA,qBAAqB,CAAC1B,GAAD,EAAM;AACzB,SAAKkB,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBO,MAAtB,CAA6BzB,GAA7B,EAAkC,CAAlC,CAAzB;AACD;;AAED2B,EAAAA,WAAW,CAACpC,KAAD,EAAQ;AACjB,UAAM;AAAElB,MAAAA,SAAF;AAAa4B,MAAAA,SAAb;AAAwBnC,MAAAA,OAAxB;AAAiCC,MAAAA,OAAjC;AAA0CU,MAAAA,KAA1C;AAAiDC,MAAAA;AAAjD,QAAkE,IAAxE;;AACA,QAAI,CAACL,SAAL,EAAgB;AACd;AACD;;AAED,UAAMuD,aAAa,GAAGvD,SAAS,CAACA,SAAV,CAAoBwD,OAApB,EAAtB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,KAAd;AAAqBC,MAAAA;AAArB,QAAgCL,aAAtC;AAEA,UAAM;AAAEpB,MAAAA,EAAF;AAAMe,MAAAA;AAAN,QAAatB,SAAnB;AACA,QAAIM,IAAI,GAAG,CAAX;AACA,UAAMG,IAAI,GAAGF,EAAE,CAACG,CAAH,GAAOsB,MAAP,GAAgBtF,GAAhB,GAAsBoB,OAAnC;;AAEA,QAAIU,KAAJ,EAAW;AACT,YAAMgC,CAAC,GAAG,CAACD,EAAE,CAACC,CAAH,GAAOc,EAAE,CAACd,CAAX,IAAgB,CAA1B;AACAF,MAAAA,IAAI,GAAGE,CAAC,GAAGuB,KAAK,GAAG,CAAZ,GAAgBlE,OAAvB;AACD,KAHD,MAGO;AACL,UAAI2C,CAAJ;;AACA,UAAIlB,KAAK,CAAC2C,MAAN,GAAe,CAAnB,EAAsB;AACpBzB,QAAAA,CAAC,GAAG,CAAClB,KAAK,CAAC,CAAD,CAAL,CAASkB,CAAT,GAAalB,KAAK,CAACA,KAAK,CAAC2C,MAAN,GAAe,CAAhB,CAAL,CAAwBzB,CAAtC,IAA2C,CAA/C;AACD,OAFD,MAEO;AACLA,QAAAA,CAAC,GAAGlB,KAAK,CAAC,CAAD,CAAL,CAASkB,CAAb;AACD;;AACDF,MAAAA,IAAI,GAAGE,CAAC,GAAIuB,KAAK,GAAG,CAAb,GAAkBlE,OAAzB;;AACA,UAAIyC,IAAI,GAAGC,EAAE,CAACC,CAAd,EAAiB;AACfF,QAAAA,IAAI,GAAGC,EAAE,CAACC,CAAV;AACD;;AACD,UAAIF,IAAI,GAAGyB,KAAP,GAAeT,EAAE,CAACd,CAAtB,EAAyB;AACvBF,QAAAA,IAAI,GAAGgB,EAAE,CAACd,CAAH,GAAOuB,KAAd;AACD;;AAED,UAAItD,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACmC,IAAb,CAAkB,QAAlB,EAA4B,CAC1B;AAAEJ,UAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYE,UAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAOhE,GAAP,GAAaoB;AAA5B,SAD0B,EAE1B;AAAE0C,UAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYE,UAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAOhE,GAAP,GAAaoB;AAA5B,SAF0B,EAG1B;AAAE0C,UAAAA,CAAF;AAAKE,UAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAO5C;AAAf,SAH0B,CAA5B;AAKA,cAAMoE,SAAS,GAAG9D,SAAS,CAAC8D,SAA5B;AACA,cAAM5E,MAAM,GAAGjB,IAAI,CAAC8F,YAAL,CAAkBD,SAAS,CAACtB,IAAV,CAAe,QAAf,CAAlB,CAAf;;AACA,YAAIJ,CAAC,KAAKD,EAAE,CAACC,CAAb,EAAgB;AACdlD,UAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AAEAmB,UAAAA,YAAY,CAACmC,IAAb,CAAkB,QAAlB,EAA4B,CAC1B;AAAEJ,YAAAA,CAAC,EAAED,EAAE,CAACC,CAAR;AAAWE,YAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAO5C;AAArB,WAD0B,EAE1B;AAAE0C,YAAAA,CAAC,EAAED,EAAE,CAACC,CAAR;AAAWE,YAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAOhE,GAAP,GAAaoB;AAA3B,WAF0B,EAG1B;AAAE0C,YAAAA,CAAC,EAAED,EAAE,CAACC,CAAH,GAAO9D,GAAZ;AAAiBgE,YAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAOhE,GAAP,GAAaoB;AAAjC,WAH0B,CAA5B;AAKD,SARD,MAQO,IAAI0C,CAAC,KAAKc,EAAE,CAACd,CAAb,EAAgB;AACrBlD,UAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;AAEAmB,UAAAA,YAAY,CAACmC,IAAb,CAAkB,QAAlB,EAA4B,CAC1B;AAAEJ,YAAAA,CAAC,EAAEc,EAAE,CAACd,CAAR;AAAWE,YAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAO5C;AAArB,WAD0B,EAE1B;AAAE0C,YAAAA,CAAC,EAAEc,EAAE,CAACd,CAAH,GAAO9D,GAAZ;AAAiBgE,YAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAOhE,GAAP,GAAaoB;AAAjC,WAF0B,EAG1B;AAAE0C,YAAAA,CAAC,EAAEc,EAAE,CAACd,CAAR;AAAWE,YAAAA,CAAC,EAAEH,EAAE,CAACG,CAAH,GAAOhE,GAAP,GAAaoB;AAA3B,WAH0B,CAA5B;AAKD;;AACDoE,QAAAA,SAAS,CAACtB,IAAV,CAAe,QAAf,EAAyBtD,MAAzB;AACD;AACF;;AAEDc,IAAAA,SAAS,CAACoD,MAAV,CAAiBlB,IAAI,GAAGuB,IAAxB,EAA8BpB,IAAI,GAAGqB,IAArC;AACD;;AAEDM,EAAAA,UAAU,CAACpE,GAAG,GAAG,EAAP,EAAW;AACnB,UAAMqE,IAAI,GAAG,IAAb;AACA,UAAM;AAAE/C,MAAAA,KAAF;AAASgD,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,QAAyBvE,GAA/B;;AACA,UAAMwE,WAAW,GAAGH,IAAI,CAACI,eAAL,CAAqBF,IAArB,CAApB;;AACA,QAAIA,IAAI,KAAK,QAAb,EAAuB;AACrB,WAAK,IAAIG,CAAC,GAAG,CAAR,EAAWT,MAAM,GAAG3C,KAAK,CAAC2C,MAA/B,EAAuCS,CAAC,GAAGT,MAA3C,EAAmDS,CAAC,EAApD,EAAwD;AACtD,cAAMC,IAAI,GAAGrD,KAAK,CAACoD,CAAD,CAAlB;AACA,cAAME,MAAM,GAAG,IAAIrG,MAAJ,CAAW;AACxBoC,UAAAA,SAAS,EAAE,uBADa;AAExBE,UAAAA,KAAK,EAAExC,IAAI,CAACgC,GAAL,CAAS;AACdmC,YAAAA,CAAC,EAAEmC,IAAI,CAACnC,CADM;AAEdE,YAAAA,CAAC,EAAEiC,IAAI,CAACjC,CAFM;AAGd3D,YAAAA,MAAM,EAAE4F,IAAI,CAACE;AAHC,WAAT,EAIJP,KAJI;AAFiB,SAAX,CAAf;AAQAE,QAAAA,WAAW,CAACxD,GAAZ,CAAgB4D,MAAhB;AACD;AACF,KAbD,MAaO;AACLJ,MAAAA,WAAW,CAAC9D,QAAZ,CAAqB,MAArB,EAA6B;AAC3BC,QAAAA,SAAS,EAAE,qBADgB;AAE3BE,QAAAA,KAAK,EAAEyD;AAFoB,OAA7B;AAID;AACF;;AAEDQ,EAAAA,YAAY,GAAG;AACb,UAAMN,WAAW,GAAG,KAAKA,WAAzB;AACAA,IAAAA,WAAW,IAAIA,WAAW,CAACO,KAAZ,EAAf;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,UAAM/C,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMgB,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMuB,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAMpE,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMK,YAAY,GAAG,KAAKA,YAA1B;AACA,UAAMM,OAAO,GAAG,KAAKA,OAArB;AACA,UAAME,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM+B,MAAM,GAAG,KAAKA,MAApB;AACAf,IAAAA,gBAAgB,IAAIA,gBAAgB,CAAC+C,IAAjB,EAApB;AACA/B,IAAAA,gBAAgB,IAAIA,gBAAgB,CAAC+B,IAAjB,EAApB;AACAR,IAAAA,WAAW,IAAIA,WAAW,CAACQ,IAAZ,EAAf;AACA5E,IAAAA,SAAS,IAAIA,SAAS,CAAC4E,IAAV,EAAb;AACAvE,IAAAA,YAAY,IAAIA,YAAY,CAACuE,IAAb,EAAhB;AACAjE,IAAAA,OAAO,IAAIA,OAAO,CAACiE,IAAR,EAAX;AACA/D,IAAAA,OAAO,IAAIA,OAAO,CAAC+D,IAAR,EAAX;AACAhC,IAAAA,MAAM,CAACiC,IAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,UAAMjD,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMgB,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMuB,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAMpE,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMK,YAAY,GAAG,KAAKA,YAA1B;AACA,UAAMM,OAAO,GAAG,KAAKA,OAArB;AACA,UAAME,OAAO,GAAG,KAAKA,OAArB;AACAgB,IAAAA,gBAAgB,IAAIA,gBAAgB,CAACiD,IAAjB,EAApB;AACAjC,IAAAA,gBAAgB,IAAIA,gBAAgB,CAACiC,IAAjB,EAApB;AACAV,IAAAA,WAAW,IAAIA,WAAW,CAACU,IAAZ,EAAf;AACA9E,IAAAA,SAAS,IAAIA,SAAS,CAAC8E,IAAV,EAAb;AACAzE,IAAAA,YAAY,IAAIA,YAAY,CAACyE,IAAb,EAAhB;AACAnE,IAAAA,OAAO,IAAIA,OAAO,CAACmE,IAAR,EAAX;AACAjE,IAAAA,OAAO,IAAIA,OAAO,CAACiE,IAAR,EAAX;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,UAAMlD,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMgB,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,UAAMuB,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAMpE,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMK,YAAY,GAAG,KAAKA,YAA1B;AACA,UAAMM,OAAO,GAAG,KAAKA,OAArB;AACA,UAAME,OAAO,GAAG,KAAKA,OAArB;AAEAgB,IAAAA,gBAAgB,IAAIA,gBAAgB,CAACmD,MAAjB,CAAwB,IAAxB,CAApB;AACAnC,IAAAA,gBAAgB,IAAIA,gBAAgB,CAACmC,MAAjB,CAAwB,IAAxB,CAApB;AACAZ,IAAAA,WAAW,IAAIA,WAAW,CAACY,MAAZ,CAAmB,IAAnB,CAAf;AACA3E,IAAAA,YAAY,IAAIA,YAAY,CAAC2E,MAAb,CAAoB,IAApB,CAAhB;AACAhF,IAAAA,SAAS,IAAIA,SAAS,CAAC2E,KAAV,EAAb;AACAhE,IAAAA,OAAO,IAAIA,OAAO,CAACgE,KAAR,EAAX;AACA9D,IAAAA,OAAO,IAAIA,OAAO,CAAC8D,KAAR,EAAX;AAEA,SAAKM,SAAL,GAAiB,IAAjB;AACD;;AAEDZ,EAAAA,eAAe,CAACF,IAAD,EAAO;AACpB,QAAIC,WAAW,GAAG,KAAKA,WAAvB;;AACA,QAAI,CAACA,WAAL,EAAkB;AAChB,UAAID,IAAI,KAAK,QAAb,EAAuB;AACrBC,QAAAA,WAAW,GAAG,KAAKtE,SAAL,CAAeoF,QAAf,CAAwB;AACpC/E,UAAAA,MAAM,EAAE;AAD4B,SAAxB,CAAd;AAGA,aAAKL,SAAL,CAAeiB,IAAf;AACD,OALD,MAKO;AACLqD,QAAAA,WAAW,GAAG,KAAKe,QAAL,CAAcD,QAAd,EAAd;AACD;;AACD,WAAKd,WAAL,GAAmBA,WAAnB;AACD,KAVD,MAUO;AACLA,MAAAA,WAAW,CAACO,KAAZ;AACD;;AAED,WAAOP,WAAP;AACD;;AAEDtD,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEjC,MAAAA,cAAF;AAAkBH,MAAAA,eAAlB;AAAmCoB,MAAAA,SAAnC;AAA8C8B,MAAAA;AAA9C,QAA4D,IAAlE;AACA,UAAM;AAAEO,MAAAA,EAAF;AAAMI,MAAAA;AAAN,QAAaX,SAAnB;;AACA,QAAI3D,IAAI,CAACmH,gBAAL,CAAsBvG,cAAtB,EAAsC,GAAtC,CAAJ,EAAgD;AAC9C,WAAKgD,gBAAL,GAAwB/B,SAAS,CAACQ,QAAV,CAAmB,MAAnB,EAA2B;AACjDC,QAAAA,SAAS,EAAE,sBADsC;AAEjDJ,QAAAA,MAAM,EAAE,CAFyC;AAGjDK,QAAAA,OAAO,EAAE,KAHwC;AAIjDC,QAAAA,KAAK,EAAExC,IAAI,CAACgC,GAAL,CAAS;AACdoF,UAAAA,EAAE,EAAElD,EAAE,CAACC,CADO;AAEdkD,UAAAA,EAAE,EAAE,CAFU;AAGdC,UAAAA,EAAE,EAAEhD,EAAE,CAACH,CAHO;AAIdoD,UAAAA,EAAE,EAAE;AAJU,SAAT,EAKJ9G,eALI;AAJ0C,OAA3B,CAAxB;AAWD;;AAED,QAAIT,IAAI,CAACmH,gBAAL,CAAsBvG,cAAtB,EAAsC,GAAtC,CAAJ,EAAgD;AAC9C,WAAKgE,gBAAL,GAAwB/C,SAAS,CAACQ,QAAV,CAAmB,MAAnB,EAA2B;AACjDC,QAAAA,SAAS,EAAE,sBADsC;AAEjDJ,QAAAA,MAAM,EAAE,CAFyC;AAGjDK,QAAAA,OAAO,EAAE,KAHwC;AAIjDC,QAAAA,KAAK,EAAExC,IAAI,CAACgC,GAAL,CAAS;AACdoF,UAAAA,EAAE,EAAE,CADU;AAEdC,UAAAA,EAAE,EAAE/C,EAAE,CAACD,CAFO;AAGdiD,UAAAA,EAAE,EAAE,CAHU;AAIdC,UAAAA,EAAE,EAAErD,EAAE,CAACG;AAJO,SAAT,EAKJ5D,eALI;AAJ0C,OAA3B,CAAxB;AAWD;AAEF;;AA9YW;;AAiZd+G,MAAM,CAACC,OAAP,GAAiBnH,OAAjB","sourcesContent":["const Util = require('../util/common');\nconst Marker = require('./marker');\nconst Container = require('./list');\nconst TextBox = require('./text-box');\nconst GAP = 4;\n\n/**\n * TODOList：\n * 1. 移除 fixed 参数\n */\nclass Tooltip {\n  getDefaultCfg() {\n    return {\n      /**\n       * wether show the crosshairs\n       * @type {Object}\n       */\n      showCrosshairs: false,\n      /**\n       * the style for crosshairs\n       * @type {Object}\n       */\n      crosshairsStyle: {\n        stroke: 'rgba(0, 0, 0, 0.25)',\n        lineWidth: 1\n      },\n      /**\n       * the type of crosshairs, optional value is 'x', 'y' or 'xy', default is 'y'\n       */\n      crosshairsType: 'y',\n      /**\n       * show or hide the x axis tip\n       */\n      showXTip: false,\n      /**\n       * show or hide the y axis tip\n       */\n      showYTip: false,\n      xTip: null,\n      xTipBackground: {\n        radius: 1,\n        fill: 'rgba(0, 0, 0, 0.65)',\n        padding: [ 3, 5 ]\n      },\n      yTip: null,\n      yTipBackground: {\n        radius: 1,\n        fill: 'rgba(0, 0, 0, 0.65)',\n        padding: [ 3, 5 ]\n      },\n      /**\n       * the style for tooltip container's background\n       * @type {Object}\n       */\n      background: null,\n      /**\n       * layout, can be horizontal or vertical\n       * @type {String}\n       */\n      layout: 'horizontal',\n      offsetX: 0,\n      offsetY: 0\n    };\n  }\n\n  constructor(cfg) {\n    Util.deepMix(this, this.getDefaultCfg(), cfg);\n    const { frontPlot, custom } = this;\n\n    if (!custom) { // custom means user do customize\n      const container = new Container(Util.mix({\n        parent: frontPlot,\n        zIndex: 3\n      }, cfg));\n      this.container = container;\n      const { fixed, background } = this;\n      if (!fixed) {\n        this.tooltipArrow = frontPlot.addShape('Polygon', {\n          className: 'tooltip-arrow',\n          visible: false,\n          zIndex: 2,\n          attrs: Util.mix({\n            points: []\n          }, background)\n        });\n      }\n    }\n    if (this.showXTip) {\n      const { xTipBackground } = this;\n      const xTipBox = new TextBox({\n        className: 'xTip',\n        background: xTipBackground,\n        visible: false\n      });\n      frontPlot.add(xTipBox.container);\n      this.xTipBox = xTipBox;\n    }\n\n    if (this.showYTip) {\n      const { yTipBackground } = this;\n      const yTipBox = new TextBox({\n        className: 'yTip',\n        background: yTipBackground,\n        visible: false\n      });\n      frontPlot.add(yTipBox.container);\n      this.yTipBox = yTipBox;\n    }\n\n    if (this.showCrosshairs) {\n      this._renderCrosshairs();\n    }\n\n    frontPlot.sort();\n  }\n\n  setContent(title, items) {\n    this.title = title;\n    this.items = items;\n    if (!this.custom) {\n      const container = this.container;\n      container.setTitle(title);\n      container.setItems(items);\n    }\n  }\n\n  setYTipContent(val) {\n    const yTip = this.yTip;\n    if (Util.isFunction(yTip)) {\n      val = yTip(val);\n    } else {\n      val = Util.mix({\n        text: val\n      }, yTip);\n    }\n    this.yTipBox && this.yTipBox.updateContent(val);\n  }\n\n  setYTipPosition(pos) {\n    const plotRange = this.plotRange;\n    const crosshairsShapeX = this.crosshairsShapeX;\n    if (this.showYTip) {\n      const yTipBox = this.yTipBox;\n      const yTipHeight = yTipBox.getHeight();\n      const yTipWidth = yTipBox.getWidth();\n      let posX = plotRange.tl.x - yTipWidth;\n      let posY = pos - (yTipHeight / 2);\n      if (posY <= plotRange.tl.y) {\n        posY = plotRange.tl.y;\n      }\n      if (posY + yTipHeight >= plotRange.br.y) {\n        posY = plotRange.br.y - yTipHeight;\n      }\n\n      if (posX < 0) {\n        posX = plotRange.tl.x;\n        crosshairsShapeX && crosshairsShapeX.attr('x1', plotRange.tl.x + yTipWidth);\n      }\n\n\n      yTipBox.updatePosition(posX, posY);\n    }\n  }\n\n  setXTipContent(val) {\n    const xTip = this.xTip;\n    if (Util.isFunction(xTip)) {\n      val = xTip(val);\n    } else {\n      val = Util.mix({\n        text: val\n      }, xTip);\n    }\n    this.xTipBox && this.xTipBox.updateContent(val);\n  }\n\n  setXTipPosition(pos) {\n    const { showXTip, canvas, plotRange, xTipBox, crosshairsShapeY } = this;\n    if (showXTip) {\n      // const el = canvas.get('el');\n      // const canvasHeight = Util.getHeight(el);\n      const canvasHeight = canvas.get('height');\n      const xTipWidth = xTipBox.getWidth();\n      const xTipHeight = xTipBox.getHeight();\n      let posX = pos - (xTipWidth / 2);\n      let posY = plotRange.br.y;\n      if (posX <= plotRange.tl.x) {\n        posX = plotRange.tl.x;\n      }\n      if (posX + xTipWidth >= plotRange.tr.x) {\n        posX = plotRange.tr.x - xTipWidth;\n      }\n\n      if (canvasHeight - posY < xTipHeight) {\n        posY -= xTipHeight;\n      }\n      xTipBox.updatePosition(posX, posY);\n      crosshairsShapeY && crosshairsShapeY.attr('y1', posY);\n    }\n  }\n\n  setXCrosshairPosition(pos) {\n    this.crosshairsShapeX && this.crosshairsShapeX.moveTo(0, pos);\n  }\n\n  setYCrosshairPosition(pos) {\n    this.crosshairsShapeY && this.crosshairsShapeY.moveTo(pos, 0);\n  }\n\n  setPosition(items) {\n    const { container, plotRange, offsetX, offsetY, fixed, tooltipArrow } = this;\n    if (!container) {\n      return;\n    }\n\n    const containerBBox = container.container.getBBox();\n    const { minX, minY, width, height } = containerBBox;\n\n    const { tl, tr } = plotRange;\n    let posX = 0;\n    const posY = tl.y - height - GAP + offsetY;\n\n    if (fixed) {\n      const x = (tl.x + tr.x) / 2;\n      posX = x - width / 2 + offsetX;\n    } else {\n      let x;\n      if (items.length > 1) {\n        x = (items[0].x + items[items.length - 1].x) / 2;\n      } else {\n        x = items[0].x;\n      }\n      posX = x - (width / 2) + offsetX;\n      if (posX < tl.x) {\n        posX = tl.x;\n      }\n      if (posX + width > tr.x) {\n        posX = tr.x - width;\n      }\n\n      if (tooltipArrow) {\n        tooltipArrow.attr('points', [\n          { x: x - 3, y: tl.y - GAP + offsetY },\n          { x: x + 3, y: tl.y - GAP + offsetY },\n          { x, y: tl.y + offsetY }\n        ]);\n        const backShape = container.backShape;\n        const radius = Util.parsePadding(backShape.attr('radius'));\n        if (x === tl.x) {\n          radius[3] = 0;\n\n          tooltipArrow.attr('points', [\n            { x: tl.x, y: tl.y + offsetY },\n            { x: tl.x, y: tl.y - GAP + offsetY },\n            { x: tl.x + GAP, y: tl.y - GAP + offsetY }\n          ]);\n        } else if (x === tr.x) {\n          radius[2] = 0;\n\n          tooltipArrow.attr('points', [\n            { x: tr.x, y: tl.y + offsetY },\n            { x: tr.x - GAP, y: tl.y - GAP + offsetY },\n            { x: tr.x, y: tl.y - GAP + offsetY }\n          ]);\n        }\n        backShape.attr('radius', radius);\n      }\n    }\n\n    container.moveTo(posX - minX, posY - minY);\n  }\n\n  setMarkers(cfg = {}) {\n    const self = this;\n    const { items, style, type } = cfg;\n    const markerGroup = self._getMarkerGroup(type);\n    if (type === 'circle') {\n      for (let i = 0, length = items.length; i < length; i++) {\n        const item = items[i];\n        const marker = new Marker({\n          className: 'tooltip-circle-marker',\n          attrs: Util.mix({\n            x: item.x,\n            y: item.y,\n            stroke: item.color\n          }, style)\n        });\n        markerGroup.add(marker);\n      }\n    } else {\n      markerGroup.addShape('rect', {\n        className: 'tooltip-rect-marker',\n        attrs: style\n      });\n    }\n  }\n\n  clearMarkers() {\n    const markerGroup = this.markerGroup;\n    markerGroup && markerGroup.clear();\n  }\n\n  show() {\n    const crosshairsShapeX = this.crosshairsShapeX;\n    const crosshairsShapeY = this.crosshairsShapeY;\n    const markerGroup = this.markerGroup;\n    const container = this.container;\n    const tooltipArrow = this.tooltipArrow;\n    const xTipBox = this.xTipBox;\n    const yTipBox = this.yTipBox;\n    const canvas = this.canvas;\n    crosshairsShapeX && crosshairsShapeX.show();\n    crosshairsShapeY && crosshairsShapeY.show();\n    markerGroup && markerGroup.show();\n    container && container.show();\n    tooltipArrow && tooltipArrow.show();\n    xTipBox && xTipBox.show();\n    yTipBox && yTipBox.show();\n    canvas.draw();\n  }\n\n  hide() {\n    const crosshairsShapeX = this.crosshairsShapeX;\n    const crosshairsShapeY = this.crosshairsShapeY;\n    const markerGroup = this.markerGroup;\n    const container = this.container;\n    const tooltipArrow = this.tooltipArrow;\n    const xTipBox = this.xTipBox;\n    const yTipBox = this.yTipBox;\n    crosshairsShapeX && crosshairsShapeX.hide();\n    crosshairsShapeY && crosshairsShapeY.hide();\n    markerGroup && markerGroup.hide();\n    container && container.hide();\n    tooltipArrow && tooltipArrow.hide();\n    xTipBox && xTipBox.hide();\n    yTipBox && yTipBox.hide();\n  }\n\n  destroy() {\n    const crosshairsShapeX = this.crosshairsShapeX;\n    const crosshairsShapeY = this.crosshairsShapeY;\n    const markerGroup = this.markerGroup;\n    const container = this.container;\n    const tooltipArrow = this.tooltipArrow;\n    const xTipBox = this.xTipBox;\n    const yTipBox = this.yTipBox;\n\n    crosshairsShapeX && crosshairsShapeX.remove(true);\n    crosshairsShapeY && crosshairsShapeY.remove(true);\n    markerGroup && markerGroup.remove(true);\n    tooltipArrow && tooltipArrow.remove(true);\n    container && container.clear();\n    xTipBox && xTipBox.clear();\n    yTipBox && yTipBox.clear();\n\n    this.destroyed = true;\n  }\n\n  _getMarkerGroup(type) {\n    let markerGroup = this.markerGroup;\n    if (!markerGroup) {\n      if (type === 'circle') {\n        markerGroup = this.frontPlot.addGroup({\n          zIndex: 1\n        });\n        this.frontPlot.sort();\n      } else {\n        markerGroup = this.backPlot.addGroup();\n      }\n      this.markerGroup = markerGroup;\n    } else {\n      markerGroup.clear();\n    }\n\n    return markerGroup;\n  }\n\n  _renderCrosshairs() {\n    const { crosshairsType, crosshairsStyle, frontPlot, plotRange } = this;\n    const { tl, br } = plotRange;\n    if (Util.directionEnabled(crosshairsType, 'x')) {\n      this.crosshairsShapeX = frontPlot.addShape('Line', {\n        className: 'tooltip-crosshairs-x',\n        zIndex: 0,\n        visible: false,\n        attrs: Util.mix({\n          x1: tl.x,\n          y1: 0,\n          x2: br.x,\n          y2: 0\n        }, crosshairsStyle)\n      });\n    }\n\n    if (Util.directionEnabled(crosshairsType, 'y')) {\n      this.crosshairsShapeY = frontPlot.addShape('Line', {\n        className: 'tooltip-crosshairs-y',\n        zIndex: 0,\n        visible: false,\n        attrs: Util.mix({\n          x1: 0,\n          y1: br.y,\n          x2: 0,\n          y2: tl.y\n        }, crosshairsStyle)\n      });\n    }\n\n  }\n}\n\nmodule.exports = Tooltip;\n"]},"metadata":{},"sourceType":"script"}