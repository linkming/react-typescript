{"ast":null,"code":"const Util = require('../../util/common');\n\nconst KEYWORDS_PERCENT = {\n  min: 0,\n  median: 0.5,\n  max: 1\n};\n\nclass GuideBase {\n  _initDefaultCfg() {}\n\n  constructor(cfg) {\n    this._initDefaultCfg();\n\n    Util.deepMix(this, cfg);\n  }\n\n  _getNormalizedValue(val, scale) {\n    let rst;\n\n    if (Util.isNil(KEYWORDS_PERCENT[val])) {\n      rst = scale.scale(val);\n    } else {\n      rst = KEYWORDS_PERCENT[val];\n    }\n\n    return rst;\n  }\n\n  parsePercentPoint(coord, position) {\n    const xPercent = parseFloat(position[0]) / 100;\n    const yPercent = parseFloat(position[1]) / 100;\n    const start = coord.start;\n    const end = coord.end;\n    const width = Math.abs(start.x - end.x);\n    const height = Math.abs(start.y - end.y);\n    const x = width * xPercent + Math.min(start.x, end.x);\n    const y = height * yPercent + Math.min(start.y, end.y);\n    return {\n      x,\n      y\n    };\n  }\n\n  parsePoint(coord, position) {\n    const self = this;\n    const xScale = self.xScale;\n    const yScales = self.yScales;\n\n    if (Util.isFunction(position)) {\n      position = position(xScale, yScales); // position 必须是对象\n    } // 如果数据格式是 ['50%', '50%'] 的格式\n    // fix: 原始数据中可能会包含 'xxx5%xxx' 这样的数据，需要判断下 https://github.com/antvis/f2/issues/590\n\n\n    if (Util.isString(position[0]) && position[0].indexOf('%') !== -1 && !isNaN(position[0].slice(0, -1))) {\n      return this.parsePercentPoint(coord, position);\n    }\n\n    const x = self._getNormalizedValue(position[0], xScale);\n\n    const y = self._getNormalizedValue(position[1], yScales[0]);\n\n    const point = coord.convertPoint({\n      x,\n      y\n    });\n\n    if (self.limitInPlot) {\n      // limit in chart plotRange\n      if (x >= 0 && x <= 1 && y >= 0 && y <= 1) {\n        return point;\n      }\n\n      return null;\n    }\n\n    return point;\n  }\n  /**\n   * render the guide component\n   * @param  {Coord} coord  coordinate instance\n   * @param  {Canvas.Group} group the container\n   */\n\n\n  render()\n  /* coord,group */\n  {}\n\n  repaint() {\n    this.remove();\n    const {\n      coord,\n      container,\n      canvas\n    } = this;\n\n    if (container && !container.isDestroyed()) {\n      this.render(coord, container);\n      canvas.draw();\n    }\n  }\n\n  remove() {\n    const {\n      element\n    } = this;\n    element && element.remove(true);\n  }\n\n  changeVisible(visible) {\n    const self = this;\n    self.visible = visible;\n    const element = self.element;\n    if (!element) return;\n\n    if (element.set) {\n      element.set('visible', visible);\n    } else {\n      element.style.display = visible ? '' : 'none';\n    }\n  }\n\n}\n\nmodule.exports = GuideBase;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/guide/base.js"],"names":["Util","require","KEYWORDS_PERCENT","min","median","max","GuideBase","_initDefaultCfg","constructor","cfg","deepMix","_getNormalizedValue","val","scale","rst","isNil","parsePercentPoint","coord","position","xPercent","parseFloat","yPercent","start","end","width","Math","abs","x","height","y","parsePoint","self","xScale","yScales","isFunction","isString","indexOf","isNaN","slice","point","convertPoint","limitInPlot","render","repaint","remove","container","canvas","isDestroyed","draw","element","changeVisible","visible","set","style","display","module","exports"],"mappings":"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","sourcesContent":["const Util = require('../../util/common');\n\nconst KEYWORDS_PERCENT = {\n  min: 0,\n  median: 0.5,\n  max: 1\n};\n\nclass GuideBase {\n  _initDefaultCfg() {}\n\n  constructor(cfg) {\n    this._initDefaultCfg();\n    Util.deepMix(this, cfg);\n  }\n\n  _getNormalizedValue(val, scale) {\n    let rst;\n    if (Util.isNil(KEYWORDS_PERCENT[val])) {\n      rst = scale.scale(val);\n    } else {\n      rst = KEYWORDS_PERCENT[val];\n    }\n    return rst;\n  }\n\n  parsePercentPoint(coord, position) {\n    const xPercent = parseFloat(position[0]) / 100;\n    const yPercent = parseFloat(position[1]) / 100;\n    const start = coord.start;\n    const end = coord.end;\n    const width = Math.abs(start.x - end.x);\n    const height = Math.abs(start.y - end.y);\n    const x = width * xPercent + Math.min(start.x, end.x);\n    const y = height * yPercent + Math.min(start.y, end.y);\n    return {\n      x,\n      y\n    };\n  }\n\n  parsePoint(coord, position) {\n    const self = this;\n    const xScale = self.xScale;\n    const yScales = self.yScales;\n    if (Util.isFunction(position)) {\n      position = position(xScale, yScales); // position 必须是对象\n    }\n\n    // 如果数据格式是 ['50%', '50%'] 的格式\n    // fix: 原始数据中可能会包含 'xxx5%xxx' 这样的数据，需要判断下 https://github.com/antvis/f2/issues/590\n    if (Util.isString(position[0]) && position[0].indexOf('%') !== -1 && !isNaN(position[0].slice(0, -1))) {\n      return this.parsePercentPoint(coord, position);\n    }\n\n    const x = self._getNormalizedValue(position[0], xScale);\n    const y = self._getNormalizedValue(position[1], yScales[0]);\n\n    const point = coord.convertPoint({ x, y });\n    if (self.limitInPlot) { // limit in chart plotRange\n      if (x >= 0 && x <= 1 && y >= 0 && y <= 1) {\n        return point;\n      }\n      return null;\n    }\n    return point;\n  }\n\n  /**\n   * render the guide component\n   * @param  {Coord} coord  coordinate instance\n   * @param  {Canvas.Group} group the container\n   */\n  render(/* coord,group */) {}\n\n  repaint() {\n    this.remove();\n    const { coord, container, canvas } = this;\n    if (container && !container.isDestroyed()) {\n      this.render(coord, container);\n      canvas.draw();\n    }\n  }\n\n  remove() {\n    const { element } = this;\n    element && element.remove(true);\n  }\n\n  changeVisible(visible) {\n    const self = this;\n    self.visible = visible;\n    const element = self.element;\n\n    if (!element) return;\n    if (element.set) {\n      element.set('visible', visible);\n    } else {\n      element.style.display = visible ? '' : 'none';\n    }\n  }\n}\n\nmodule.exports = GuideBase;\n"]},"metadata":{},"sourceType":"script"}