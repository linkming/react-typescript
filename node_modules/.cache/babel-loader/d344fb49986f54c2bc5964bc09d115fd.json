{"ast":null,"code":"const Util = require('../../util/common');\n\nconst Global = require('../../global');\n\nconst Shape = {};\nconst ShapeBase = {\n  _coord: null,\n\n  /**\n   * draw the shape\n   * @param {Object} cfg options\n   * @param {Object} container container to store the shapes\n   */\n  draw(cfg, container) {\n    if (this.drawShape) {\n      this.drawShape(cfg, container);\n    }\n  },\n\n  /**\n   * set the coordinate instance\n   * @param {Coord} coord coordinate instance\n   */\n  setCoord(coord) {\n    this._coord = coord;\n  },\n\n  /**\n   * convert the normalized value to the canvas position\n   * @param  {point} point the point to convert\n   * @return {point} point return the result\n   */\n  parsePoint(point) {\n    const coord = this._coord;\n\n    if (coord.isPolar) {\n      if (point.x === 1) point.x = 0.9999999;\n      if (point.y === 1) point.y = 0.9999999;\n    }\n\n    return coord.convertPoint(point);\n  },\n\n  /**\n   * convert the normalized value to the canvas position\n   * @param  {points} points the array that store the points\n   * @return {points} points return the result\n   */\n  parsePoints(points) {\n    if (!points) return false;\n    const self = this;\n    const rst = [];\n    points.forEach(function (point) {\n      rst.push(self.parsePoint(point));\n    });\n    return rst;\n  }\n\n};\nconst ShapeFactoryBase = {\n  defaultShapeType: null,\n\n  setCoord(coord) {\n    this._coord = coord;\n  },\n\n  getShape(type) {\n    const self = this;\n\n    if (Util.isArray(type)) {\n      type = type[0];\n    }\n\n    const shape = self[type] || self[self.defaultShapeType];\n    shape._coord = self._coord;\n    return shape;\n  },\n\n  getShapePoints(type, cfg) {\n    const shape = this.getShape(type);\n    const fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;\n    const points = fn(cfg);\n    return points;\n  },\n\n  getDefaultPoints()\n  /* cfg */\n  {\n    return [];\n  },\n\n  drawShape(type, cfg, container) {\n    const shape = this.getShape(type);\n\n    if (!cfg.color) {\n      cfg.color = Global.colors[0];\n    }\n\n    return shape.draw(cfg, container);\n  }\n\n};\n\nShape.registerFactory = function (factoryName, cfg) {\n  const className = Util.upperFirst(factoryName);\n  const geomObj = Util.mix({}, ShapeFactoryBase, cfg);\n  Shape[className] = geomObj;\n  geomObj.name = factoryName;\n  return geomObj;\n};\n\nShape.registerShape = function (factoryName, shapeType, cfg) {\n  const className = Util.upperFirst(factoryName);\n  const factory = Shape[className];\n  const shapeObj = Util.mix({}, ShapeBase, cfg);\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n};\n\nShape.registShape = Shape.registerShape;\n\nShape.getShapeFactory = function (factoryName) {\n  const self = this;\n  factoryName = factoryName || 'point';\n  const className = Util.upperFirst(factoryName);\n  return self[className];\n};\n\nmodule.exports = Shape;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/geom/shape/shape.js"],"names":["Util","require","Global","Shape","ShapeBase","_coord","draw","cfg","container","drawShape","setCoord","coord","parsePoint","point","isPolar","x","y","convertPoint","parsePoints","points","self","rst","forEach","push","ShapeFactoryBase","defaultShapeType","getShape","type","isArray","shape","getShapePoints","fn","getPoints","getDefaultPoints","color","colors","registerFactory","factoryName","className","upperFirst","geomObj","mix","name","registerShape","shapeType","factory","shapeObj","registShape","getShapeFactory","module","exports"],"mappings":"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","sourcesContent":["const Util = require('../../util/common');\nconst Global = require('../../global');\n\nconst Shape = {};\n\nconst ShapeBase = {\n  _coord: null,\n  /**\n   * draw the shape\n   * @param {Object} cfg options\n   * @param {Object} container container to store the shapes\n   */\n  draw(cfg, container) {\n    if (this.drawShape) {\n      this.drawShape(cfg, container);\n    }\n  },\n  /**\n   * set the coordinate instance\n   * @param {Coord} coord coordinate instance\n   */\n  setCoord(coord) {\n    this._coord = coord;\n  },\n  /**\n   * convert the normalized value to the canvas position\n   * @param  {point} point the point to convert\n   * @return {point} point return the result\n   */\n  parsePoint(point) {\n    const coord = this._coord;\n    if (coord.isPolar) {\n      if (point.x === 1) point.x = 0.9999999;\n      if (point.y === 1) point.y = 0.9999999;\n    }\n    return coord.convertPoint(point);\n  },\n  /**\n   * convert the normalized value to the canvas position\n   * @param  {points} points the array that store the points\n   * @return {points} points return the result\n   */\n  parsePoints(points) {\n    if (!points) return false;\n    const self = this;\n    const rst = [];\n    points.forEach(function(point) {\n      rst.push(self.parsePoint(point));\n    });\n    return rst;\n  }\n};\n\nconst ShapeFactoryBase = {\n  defaultShapeType: null,\n  setCoord(coord) {\n    this._coord = coord;\n  },\n  getShape(type) {\n    const self = this;\n    if (Util.isArray(type)) {\n      type = type[0];\n    }\n    const shape = self[type] || self[self.defaultShapeType];\n    shape._coord = self._coord;\n    return shape;\n  },\n  getShapePoints(type, cfg) {\n    const shape = this.getShape(type);\n    const fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;\n    const points = fn(cfg);\n    return points;\n  },\n  getDefaultPoints(/* cfg */) {\n    return [];\n  },\n  drawShape(type, cfg, container) {\n    const shape = this.getShape(type);\n    if (!cfg.color) {\n      cfg.color = Global.colors[0];\n    }\n    return shape.draw(cfg, container);\n  }\n};\n\nShape.registerFactory = function(factoryName, cfg) {\n  const className = Util.upperFirst(factoryName);\n  const geomObj = Util.mix({}, ShapeFactoryBase, cfg);\n  Shape[className] = geomObj;\n  geomObj.name = factoryName;\n  return geomObj;\n};\n\nShape.registerShape = function(factoryName, shapeType, cfg) {\n  const className = Util.upperFirst(factoryName);\n  const factory = Shape[className];\n  const shapeObj = Util.mix({}, ShapeBase, cfg);\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n};\n\nShape.registShape = Shape.registerShape;\n\nShape.getShapeFactory = function(factoryName) {\n  const self = this;\n  factoryName = factoryName || 'point';\n  const className = Util.upperFirst(factoryName);\n  return self[className];\n};\n\nmodule.exports = Shape;\n"]},"metadata":{},"sourceType":"script"}