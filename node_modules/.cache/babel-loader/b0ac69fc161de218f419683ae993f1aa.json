{"ast":null,"code":"const Util = require('../util/common');\n\nclass CanvasElement {\n  constructor(ctx) {\n    this.context = ctx; // canvas实际的宽高 (width/height) * pixelRatio\n\n    this.width = 0;\n    this.height = 0;\n    this.style = {};\n    this.currentStyle = {}; // 用来标识是CanvasElement实例\n\n    this.isCanvasElement = true; // 实现简单的事件机制\n\n    this.__events = {};\n  }\n\n  getContext()\n  /* type */\n  {\n    return this.context;\n  }\n\n  getBoundingClientRect() {\n    const width = this.width;\n    const height = this.height; // 默认都处理成可视窗口的顶部位置\n\n    return {\n      top: 0,\n      right: width,\n      bottom: height,\n      left: 0\n    };\n  }\n\n  addEventListener(type, listener) {\n    const events = this.__events[type] || [];\n    events.push(listener);\n    this.__events[type] = events;\n  }\n\n  removeEventListener(type) {\n    delete this.__events[type];\n  }\n\n  dispatchEvent(type, e) {\n    if (Util.isObject(type)) {\n      e = type;\n      type = e && e.type;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const events = this.__events[type];\n\n    if (!events || !events.length) {\n      return;\n    }\n\n    events.forEach(listener => {\n      listener.call(this, e);\n    });\n  }\n\n}\n\nfunction supportEventListener(canvas) {\n  if (!canvas) {\n    return false;\n  } // 非 HTMLCanvasElement\n\n\n  if (canvas.nodeType !== 1 || !canvas.nodeName || canvas.nodeName.toLowerCase() !== 'canvas') {\n    return false;\n  } // 微信小程序canvas.getContext('2d')时也是CanvasRenderingContext2D\n  // 也会有ctx.canvas, 而且nodeType也是1，所以还要在看下是否支持addEventListener\n\n\n  let support = false;\n\n  try {\n    canvas.addEventListener('eventTest', () => {\n      support = true;\n    });\n    canvas.dispatchEvent(new Event('eventTest'));\n  } catch (error) {\n    support = false;\n  }\n\n  return support;\n}\n\nmodule.exports = {\n  create(ctx) {\n    if (!ctx) {\n      return null;\n    }\n\n    if (supportEventListener(ctx.canvas)) {\n      return ctx.canvas;\n    }\n\n    return new CanvasElement(ctx);\n  }\n\n};","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/canvas-element.js"],"names":["Util","require","CanvasElement","constructor","ctx","context","width","height","style","currentStyle","isCanvasElement","__events","getContext","getBoundingClientRect","top","right","bottom","left","addEventListener","type","listener","events","push","removeEventListener","dispatchEvent","e","isObject","length","forEach","call","supportEventListener","canvas","nodeType","nodeName","toLowerCase","support","Event","error","module","exports","create"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,SAAKC,OAAL,GAAeD,GAAf,CADe,CAEf;;AACA,SAAKE,KAAL,GAAa,CAAb;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,YAAL,GAAoB,EAApB,CANe,CAOf;;AACA,SAAKC,eAAL,GAAuB,IAAvB,CARe,CAUf;;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAEDC,EAAAA,UAAU;AAAC;AAAY;AACrB,WAAO,KAAKP,OAAZ;AACD;;AAEDQ,EAAAA,qBAAqB,GAAG;AACtB,UAAMP,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB,CAFsB,CAGtB;;AACA,WAAO;AACLO,MAAAA,GAAG,EAAE,CADA;AAELC,MAAAA,KAAK,EAAET,KAFF;AAGLU,MAAAA,MAAM,EAAET,MAHH;AAILU,MAAAA,IAAI,EAAE;AAJD,KAAP;AAMD;;AAEDC,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC/B,UAAMC,MAAM,GAAG,KAAKV,QAAL,CAAcQ,IAAd,KAAuB,EAAtC;AACAE,IAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ;AACA,SAAKT,QAAL,CAAcQ,IAAd,IAAsBE,MAAtB;AACD;;AAEDE,EAAAA,mBAAmB,CAACJ,IAAD,EAAO;AACxB,WAAO,KAAKR,QAAL,CAAcQ,IAAd,CAAP;AACD;;AAEDK,EAAAA,aAAa,CAACL,IAAD,EAAOM,CAAP,EAAU;AACrB,QAAIzB,IAAI,CAAC0B,QAAL,CAAcP,IAAd,CAAJ,EAAyB;AACvBM,MAAAA,CAAC,GAAGN,IAAJ;AACAA,MAAAA,IAAI,GAAGM,CAAC,IAAIA,CAAC,CAACN,IAAd;AACD;;AACD,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AACD,UAAME,MAAM,GAAG,KAAKV,QAAL,CAAcQ,IAAd,CAAf;;AACA,QAAI,CAACE,MAAD,IAAW,CAACA,MAAM,CAACM,MAAvB,EAA+B;AAC7B;AACD;;AACDN,IAAAA,MAAM,CAACO,OAAP,CAAeR,QAAQ,IAAI;AACzBA,MAAAA,QAAQ,CAACS,IAAT,CAAc,IAAd,EAAoBJ,CAApB;AACD,KAFD;AAGD;;AAxDiB;;AA2DpB,SAASK,oBAAT,CAA8BC,MAA9B,EAAsC;AACpC,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,KAAP;AACD,GAHmC,CAIpC;;;AACA,MAAIA,MAAM,CAACC,QAAP,KAAoB,CAApB,IAAyB,CAACD,MAAM,CAACE,QAAjC,IAA6CF,MAAM,CAACE,QAAP,CAAgBC,WAAhB,OAAkC,QAAnF,EAA6F;AAC3F,WAAO,KAAP;AACD,GAPmC,CAQpC;AACA;;;AACA,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAI;AACFJ,IAAAA,MAAM,CAACb,gBAAP,CAAwB,WAAxB,EAAqC,MAAM;AACzCiB,MAAAA,OAAO,GAAG,IAAV;AACD,KAFD;AAGAJ,IAAAA,MAAM,CAACP,aAAP,CAAqB,IAAIY,KAAJ,CAAU,WAAV,CAArB;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdF,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,SAAOA,OAAP;AACD;;AAGDG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,CAACpC,GAAD,EAAM;AACV,QAAI,CAACA,GAAL,EAAU;AACR,aAAO,IAAP;AACD;;AACD,QAAI0B,oBAAoB,CAAC1B,GAAG,CAAC2B,MAAL,CAAxB,EAAsC;AACpC,aAAO3B,GAAG,CAAC2B,MAAX;AACD;;AACD,WAAO,IAAI7B,aAAJ,CAAkBE,GAAlB,CAAP;AACD;;AATc,CAAjB","sourcesContent":["const Util = require('../util/common');\n\nclass CanvasElement {\n  constructor(ctx) {\n    this.context = ctx;\n    // canvas实际的宽高 (width/height) * pixelRatio\n    this.width = 0;\n    this.height = 0;\n    this.style = {};\n    this.currentStyle = {};\n    // 用来标识是CanvasElement实例\n    this.isCanvasElement = true;\n\n    // 实现简单的事件机制\n    this.__events = {};\n  }\n\n  getContext(/* type */) {\n    return this.context;\n  }\n\n  getBoundingClientRect() {\n    const width = this.width;\n    const height = this.height;\n    // 默认都处理成可视窗口的顶部位置\n    return {\n      top: 0,\n      right: width,\n      bottom: height,\n      left: 0\n    };\n  }\n\n  addEventListener(type, listener) {\n    const events = this.__events[type] || [];\n    events.push(listener);\n    this.__events[type] = events;\n  }\n\n  removeEventListener(type) {\n    delete this.__events[type];\n  }\n\n  dispatchEvent(type, e) {\n    if (Util.isObject(type)) {\n      e = type;\n      type = e && e.type;\n    }\n    if (!type) {\n      return;\n    }\n    const events = this.__events[type];\n    if (!events || !events.length) {\n      return;\n    }\n    events.forEach(listener => {\n      listener.call(this, e);\n    });\n  }\n}\n\nfunction supportEventListener(canvas) {\n  if (!canvas) {\n    return false;\n  }\n  // 非 HTMLCanvasElement\n  if (canvas.nodeType !== 1 || !canvas.nodeName || canvas.nodeName.toLowerCase() !== 'canvas') {\n    return false;\n  }\n  // 微信小程序canvas.getContext('2d')时也是CanvasRenderingContext2D\n  // 也会有ctx.canvas, 而且nodeType也是1，所以还要在看下是否支持addEventListener\n  let support = false;\n  try {\n    canvas.addEventListener('eventTest', () => {\n      support = true;\n    });\n    canvas.dispatchEvent(new Event('eventTest'));\n  } catch (error) {\n    support = false;\n  }\n  return support;\n}\n\n\nmodule.exports = {\n  create(ctx) {\n    if (!ctx) {\n      return null;\n    }\n    if (supportEventListener(ctx.canvas)) {\n      return ctx.canvas;\n    }\n    return new CanvasElement(ctx);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}