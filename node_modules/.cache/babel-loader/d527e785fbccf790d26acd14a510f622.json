{"ast":null,"code":"/**\n * @fileOverview convert the line to curve\n * @author dxq613@gmail.com\n */\nconst Vector2 = require('./vector2');\n\nfunction getPoint(v) {\n  return [v.x, v.y];\n}\n\nfunction smoothBezier(points, smooth, isLoop, constraint) {\n  const cps = [];\n  let prevPoint;\n  let nextPoint;\n  const hasConstraint = !!constraint;\n  let min;\n  let max;\n  let point;\n  let len;\n  let l;\n  let i;\n\n  if (hasConstraint) {\n    min = [Infinity, Infinity];\n    max = [-Infinity, -Infinity];\n\n    for (i = 0, l = points.length; i < l; i++) {\n      point = getPoint(points[i]);\n      Vector2.min(min, min, point);\n      Vector2.max(max, max, point);\n    }\n\n    Vector2.min(min, min, constraint[0]);\n    Vector2.max(max, max, constraint[1]);\n  }\n\n  for (i = 0, len = points.length; i < len; i++) {\n    point = getPoint(points[i]);\n\n    if (isLoop) {\n      prevPoint = getPoint(points[i ? i - 1 : len - 1]);\n      nextPoint = getPoint(points[(i + 1) % len]);\n    } else {\n      if (i === 0 || i === len - 1) {\n        cps.push([point[0], point[1]]);\n        continue;\n      } else {\n        prevPoint = getPoint(points[i - 1]);\n        nextPoint = getPoint(points[i + 1]);\n      }\n    }\n\n    const v = Vector2.sub([], nextPoint, prevPoint);\n    Vector2.scale(v, v, smooth);\n    let d0 = Vector2.distance(point, prevPoint);\n    let d1 = Vector2.distance(point, nextPoint);\n    const sum = d0 + d1;\n\n    if (sum !== 0) {\n      d0 /= sum;\n      d1 /= sum;\n    }\n\n    const v1 = Vector2.scale([], v, -d0);\n    const v2 = Vector2.scale([], v, d1);\n    const cp0 = Vector2.add([], point, v1);\n    const cp1 = Vector2.add([], point, v2);\n\n    if (hasConstraint) {\n      Vector2.max(cp0, cp0, min);\n      Vector2.min(cp0, cp0, max);\n      Vector2.max(cp1, cp1, min);\n      Vector2.min(cp1, cp1, max);\n    }\n\n    cps.push([cp0[0], cp0[1]]);\n    cps.push([cp1[0], cp1[1]]);\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n\n  return cps;\n}\n\nfunction catmullRom2bezier(pointList, z, constraint) {\n  const isLoop = !!z;\n  const controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  const len = pointList.length;\n  const d1 = [];\n  let cp1;\n  let cp2;\n  let p;\n\n  for (let i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p.x, p.y]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p.x, p.y]);\n  }\n\n  return d1;\n}\n\nmodule.exports = {\n  smooth: catmullRom2bezier\n};","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/util/smooth.js"],"names":["Vector2","require","getPoint","v","x","y","smoothBezier","points","smooth","isLoop","constraint","cps","prevPoint","nextPoint","hasConstraint","min","max","point","len","l","i","Infinity","length","push","sub","scale","d0","distance","d1","sum","v1","v2","cp0","add","cp1","shift","catmullRom2bezier","pointList","z","controlPointList","cp2","p","module","exports"],"mappings":"AAAA;;;;AAIA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,SAAO,CAAEA,CAAC,CAACC,CAAJ,EAAOD,CAAC,CAACE,CAAT,CAAP;AACD;;AAED,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,UAA9C,EAA0D;AACxD,QAAMC,GAAG,GAAG,EAAZ;AAEA,MAAIC,SAAJ;AACA,MAAIC,SAAJ;AACA,QAAMC,aAAa,GAAG,CAAC,CAACJ,UAAxB;AACA,MAAIK,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;;AACA,MAAIN,aAAJ,EAAmB;AACjBC,IAAAA,GAAG,GAAG,CAAEM,QAAF,EAAYA,QAAZ,CAAN;AACAL,IAAAA,GAAG,GAAG,CAAE,CAACK,QAAH,EAAa,CAACA,QAAd,CAAN;;AAEA,SAAKD,CAAC,GAAG,CAAJ,EAAOD,CAAC,GAAGZ,MAAM,CAACe,MAAvB,EAA+BF,CAAC,GAAGD,CAAnC,EAAsCC,CAAC,EAAvC,EAA2C;AACzCH,MAAAA,KAAK,GAAGf,QAAQ,CAACK,MAAM,CAACa,CAAD,CAAP,CAAhB;AACApB,MAAAA,OAAO,CAACe,GAAR,CAAYA,GAAZ,EAAiBA,GAAjB,EAAsBE,KAAtB;AACAjB,MAAAA,OAAO,CAACgB,GAAR,CAAYA,GAAZ,EAAiBA,GAAjB,EAAsBC,KAAtB;AACD;;AACDjB,IAAAA,OAAO,CAACe,GAAR,CAAYA,GAAZ,EAAiBA,GAAjB,EAAsBL,UAAU,CAAC,CAAD,CAAhC;AACAV,IAAAA,OAAO,CAACgB,GAAR,CAAYA,GAAZ,EAAiBA,GAAjB,EAAsBN,UAAU,CAAC,CAAD,CAAhC;AACD;;AAED,OAAKU,CAAC,GAAG,CAAJ,EAAOF,GAAG,GAAGX,MAAM,CAACe,MAAzB,EAAiCF,CAAC,GAAGF,GAArC,EAA0CE,CAAC,EAA3C,EAA+C;AAC7CH,IAAAA,KAAK,GAAGf,QAAQ,CAACK,MAAM,CAACa,CAAD,CAAP,CAAhB;;AACA,QAAIX,MAAJ,EAAY;AACVG,MAAAA,SAAS,GAAGV,QAAQ,CAACK,MAAM,CAACa,CAAC,GAAGA,CAAC,GAAG,CAAP,GAAWF,GAAG,GAAG,CAAnB,CAAP,CAApB;AACAL,MAAAA,SAAS,GAAGX,QAAQ,CAACK,MAAM,CAAC,CAACa,CAAC,GAAG,CAAL,IAAUF,GAAX,CAAP,CAApB;AACD,KAHD,MAGO;AACL,UAAIE,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKF,GAAG,GAAG,CAA3B,EAA8B;AAC5BP,QAAAA,GAAG,CAACY,IAAJ,CAAS,CAAEN,KAAK,CAAC,CAAD,CAAP,EAAYA,KAAK,CAAC,CAAD,CAAjB,CAAT;AACA;AACD,OAHD,MAGO;AACLL,QAAAA,SAAS,GAAGV,QAAQ,CAACK,MAAM,CAACa,CAAC,GAAG,CAAL,CAAP,CAApB;AACAP,QAAAA,SAAS,GAAGX,QAAQ,CAACK,MAAM,CAACa,CAAC,GAAG,CAAL,CAAP,CAApB;AACD;AACF;;AAED,UAAMjB,CAAC,GAAGH,OAAO,CAACwB,GAAR,CAAY,EAAZ,EAAgBX,SAAhB,EAA2BD,SAA3B,CAAV;AACAZ,IAAAA,OAAO,CAACyB,KAAR,CAActB,CAAd,EAAiBA,CAAjB,EAAoBK,MAApB;AACA,QAAIkB,EAAE,GAAG1B,OAAO,CAAC2B,QAAR,CAAiBV,KAAjB,EAAwBL,SAAxB,CAAT;AACA,QAAIgB,EAAE,GAAG5B,OAAO,CAAC2B,QAAR,CAAiBV,KAAjB,EAAwBJ,SAAxB,CAAT;AAEA,UAAMgB,GAAG,GAAGH,EAAE,GAAGE,EAAjB;;AACA,QAAIC,GAAG,KAAK,CAAZ,EAAe;AACbH,MAAAA,EAAE,IAAIG,GAAN;AACAD,MAAAA,EAAE,IAAIC,GAAN;AACD;;AAED,UAAMC,EAAE,GAAG9B,OAAO,CAACyB,KAAR,CAAc,EAAd,EAAkBtB,CAAlB,EAAqB,CAACuB,EAAtB,CAAX;AACA,UAAMK,EAAE,GAAG/B,OAAO,CAACyB,KAAR,CAAc,EAAd,EAAkBtB,CAAlB,EAAqByB,EAArB,CAAX;AAEA,UAAMI,GAAG,GAAGhC,OAAO,CAACiC,GAAR,CAAY,EAAZ,EAAgBhB,KAAhB,EAAuBa,EAAvB,CAAZ;AACA,UAAMI,GAAG,GAAGlC,OAAO,CAACiC,GAAR,CAAY,EAAZ,EAAgBhB,KAAhB,EAAuBc,EAAvB,CAAZ;;AAEA,QAAIjB,aAAJ,EAAmB;AACjBd,MAAAA,OAAO,CAACgB,GAAR,CAAYgB,GAAZ,EAAiBA,GAAjB,EAAsBjB,GAAtB;AACAf,MAAAA,OAAO,CAACe,GAAR,CAAYiB,GAAZ,EAAiBA,GAAjB,EAAsBhB,GAAtB;AACAhB,MAAAA,OAAO,CAACgB,GAAR,CAAYkB,GAAZ,EAAiBA,GAAjB,EAAsBnB,GAAtB;AACAf,MAAAA,OAAO,CAACe,GAAR,CAAYmB,GAAZ,EAAiBA,GAAjB,EAAsBlB,GAAtB;AACD;;AAEDL,IAAAA,GAAG,CAACY,IAAJ,CAAS,CAAES,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAT;AACArB,IAAAA,GAAG,CAACY,IAAJ,CAAS,CAAEW,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAT;AACD;;AAED,MAAIzB,MAAJ,EAAY;AACVE,IAAAA,GAAG,CAACY,IAAJ,CAASZ,GAAG,CAACwB,KAAJ,EAAT;AACD;;AACD,SAAOxB,GAAP;AACD;;AAED,SAASyB,iBAAT,CAA2BC,SAA3B,EAAsCC,CAAtC,EAAyC5B,UAAzC,EAAqD;AACnD,QAAMD,MAAM,GAAG,CAAC,CAAC6B,CAAjB;AAEA,QAAMC,gBAAgB,GAAGjC,YAAY,CAAC+B,SAAD,EAAY,GAAZ,EAAiB5B,MAAjB,EAAyBC,UAAzB,CAArC;AACA,QAAMQ,GAAG,GAAGmB,SAAS,CAACf,MAAtB;AACA,QAAMM,EAAE,GAAG,EAAX;AAEA,MAAIM,GAAJ;AACA,MAAIM,GAAJ;AACA,MAAIC,CAAJ;;AAEA,OAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,GAAG,CAA1B,EAA6BE,CAAC,EAA9B,EAAkC;AAChCc,IAAAA,GAAG,GAAGK,gBAAgB,CAACnB,CAAC,GAAG,CAAL,CAAtB;AACAoB,IAAAA,GAAG,GAAGD,gBAAgB,CAACnB,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAtB;AACAqB,IAAAA,CAAC,GAAGJ,SAAS,CAACjB,CAAC,GAAG,CAAL,CAAb;AACAQ,IAAAA,EAAE,CAACL,IAAH,CAAQ,CAAE,GAAF,EACNW,GAAG,CAAC,CAAD,CADG,EAENA,GAAG,CAAC,CAAD,CAFG,EAGNM,GAAG,CAAC,CAAD,CAHG,EAINA,GAAG,CAAC,CAAD,CAJG,EAKNC,CAAC,CAACrC,CALI,EAMNqC,CAAC,CAACpC,CANI,CAAR;AAQD;;AAED,MAAII,MAAJ,EAAY;AACVyB,IAAAA,GAAG,GAAGK,gBAAgB,CAACrB,GAAD,CAAtB;AACAsB,IAAAA,GAAG,GAAGD,gBAAgB,CAACrB,GAAG,GAAG,CAAP,CAAtB;AACAuB,IAAAA,CAAC,GAAGJ,SAAS,CAAC,CAAD,CAAb;AAEAT,IAAAA,EAAE,CAACL,IAAH,CAAQ,CAAE,GAAF,EACNW,GAAG,CAAC,CAAD,CADG,EAENA,GAAG,CAAC,CAAD,CAFG,EAGNM,GAAG,CAAC,CAAD,CAHG,EAINA,GAAG,CAAC,CAAD,CAJG,EAKNC,CAAC,CAACrC,CALI,EAMNqC,CAAC,CAACpC,CANI,CAAR;AAQD;;AACD,SAAOuB,EAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,MAAM,EAAE4B;AADO,CAAjB","sourcesContent":["/**\n * @fileOverview convert the line to curve\n * @author dxq613@gmail.com\n */\nconst Vector2 = require('./vector2');\n\nfunction getPoint(v) {\n  return [ v.x, v.y ];\n}\n\nfunction smoothBezier(points, smooth, isLoop, constraint) {\n  const cps = [];\n\n  let prevPoint;\n  let nextPoint;\n  const hasConstraint = !!constraint;\n  let min;\n  let max;\n  let point;\n  let len;\n  let l;\n  let i;\n  if (hasConstraint) {\n    min = [ Infinity, Infinity ];\n    max = [ -Infinity, -Infinity ];\n\n    for (i = 0, l = points.length; i < l; i++) {\n      point = getPoint(points[i]);\n      Vector2.min(min, min, point);\n      Vector2.max(max, max, point);\n    }\n    Vector2.min(min, min, constraint[0]);\n    Vector2.max(max, max, constraint[1]);\n  }\n\n  for (i = 0, len = points.length; i < len; i++) {\n    point = getPoint(points[i]);\n    if (isLoop) {\n      prevPoint = getPoint(points[i ? i - 1 : len - 1]);\n      nextPoint = getPoint(points[(i + 1) % len]);\n    } else {\n      if (i === 0 || i === len - 1) {\n        cps.push([ point[0], point[1] ]);\n        continue;\n      } else {\n        prevPoint = getPoint(points[i - 1]);\n        nextPoint = getPoint(points[i + 1]);\n      }\n    }\n\n    const v = Vector2.sub([], nextPoint, prevPoint);\n    Vector2.scale(v, v, smooth);\n    let d0 = Vector2.distance(point, prevPoint);\n    let d1 = Vector2.distance(point, nextPoint);\n\n    const sum = d0 + d1;\n    if (sum !== 0) {\n      d0 /= sum;\n      d1 /= sum;\n    }\n\n    const v1 = Vector2.scale([], v, -d0);\n    const v2 = Vector2.scale([], v, d1);\n\n    const cp0 = Vector2.add([], point, v1);\n    const cp1 = Vector2.add([], point, v2);\n\n    if (hasConstraint) {\n      Vector2.max(cp0, cp0, min);\n      Vector2.min(cp0, cp0, max);\n      Vector2.max(cp1, cp1, min);\n      Vector2.min(cp1, cp1, max);\n    }\n\n    cps.push([ cp0[0], cp0[1] ]);\n    cps.push([ cp1[0], cp1[1] ]);\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n  return cps;\n}\n\nfunction catmullRom2bezier(pointList, z, constraint) {\n  const isLoop = !!z;\n\n  const controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  const len = pointList.length;\n  const d1 = [];\n\n  let cp1;\n  let cp2;\n  let p;\n\n  for (let i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push([ 'C',\n      cp1[0],\n      cp1[1],\n      cp2[0],\n      cp2[1],\n      p.x,\n      p.y\n    ]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n\n    d1.push([ 'C',\n      cp1[0],\n      cp1[1],\n      cp2[0],\n      cp2[1],\n      p.x,\n      p.y\n    ]);\n  }\n  return d1;\n}\n\nmodule.exports = {\n  smooth: catmullRom2bezier\n};\n"]},"metadata":{},"sourceType":"script"}