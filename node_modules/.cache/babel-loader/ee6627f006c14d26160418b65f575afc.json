{"ast":null,"code":"const Util = require('../util/common');\n\nconst MatrixUtil = require('../graphic/util/matrix');\n\nconst Vector2 = require('../graphic/util/vector2');\n\nconst defaultMatrix = [1, 0, 0, 1, 0, 0];\n\nclass Base {\n  _initDefaultCfg() {}\n\n  constructor(cfg) {\n    this._initDefaultCfg();\n\n    Util.mix(this, cfg);\n    let start;\n    let end;\n\n    if (this.plot) {\n      start = this.plot.bl;\n      end = this.plot.tr;\n      this.start = start;\n      this.end = end;\n    } else {\n      start = this.start;\n      end = this.end;\n    }\n\n    this.init(start, end);\n  }\n\n  _scale(s1, s2) {\n    const matrix = this.matrix;\n    const center = this.center;\n    MatrixUtil.translate(matrix, matrix, [center.x, center.y]);\n    MatrixUtil.scale(matrix, matrix, [s1, s2]);\n    MatrixUtil.translate(matrix, matrix, [-center.x, -center.y]);\n  }\n\n  init(start, end) {\n    this.matrix = [].concat(defaultMatrix); // 设置中心点\n\n    this.center = {\n      x: (end.x - start.x) / 2 + start.x,\n      y: (end.y - start.y) / 2 + start.y\n    };\n\n    if (this.scale) {\n      this._scale(this.scale[0], this.scale[1]);\n    }\n  }\n\n  convertPoint(point) {\n    const {\n      x,\n      y\n    } = this._convertPoint(point);\n\n    const vector = [x, y];\n    Vector2.transformMat2d(vector, vector, this.matrix);\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  }\n\n  invertPoint(point) {\n    return this._invertPoint(point);\n  }\n\n  _convertPoint(point) {\n    return point;\n  }\n\n  _invertPoint(point) {\n    return point;\n  }\n\n  reset(plot) {\n    this.plot = plot;\n    const {\n      bl,\n      tr\n    } = plot;\n    this.start = bl;\n    this.end = tr;\n    this.init(bl, tr);\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/coord/base.js"],"names":["Util","require","MatrixUtil","Vector2","defaultMatrix","Base","_initDefaultCfg","constructor","cfg","mix","start","end","plot","bl","tr","init","_scale","s1","s2","matrix","center","translate","x","y","scale","concat","convertPoint","point","_convertPoint","vector","transformMat2d","invertPoint","_invertPoint","reset","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,yBAAD,CAAvB;;AACA,MAAMG,aAAa,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAtB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,eAAe,GAAG,CAAE;;AAEpBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,SAAKF,eAAL;;AACAN,IAAAA,IAAI,CAACS,GAAL,CAAS,IAAT,EAAeD,GAAf;AAEA,QAAIE,KAAJ;AACA,QAAIC,GAAJ;;AACA,QAAI,KAAKC,IAAT,EAAe;AACbF,MAAAA,KAAK,GAAG,KAAKE,IAAL,CAAUC,EAAlB;AACAF,MAAAA,GAAG,GAAG,KAAKC,IAAL,CAAUE,EAAhB;AACA,WAAKJ,KAAL,GAAaA,KAAb;AACA,WAAKC,GAAL,GAAWA,GAAX;AACD,KALD,MAKO;AACLD,MAAAA,KAAK,GAAG,KAAKA,KAAb;AACAC,MAAAA,GAAG,GAAG,KAAKA,GAAX;AACD;;AACD,SAAKI,IAAL,CAAUL,KAAV,EAAiBC,GAAjB;AACD;;AAEDK,EAAAA,MAAM,CAACC,EAAD,EAAKC,EAAL,EAAS;AACb,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACAlB,IAAAA,UAAU,CAACmB,SAAX,CAAqBF,MAArB,EAA6BA,MAA7B,EAAqC,CAAEC,MAAM,CAACE,CAAT,EAAYF,MAAM,CAACG,CAAnB,CAArC;AACArB,IAAAA,UAAU,CAACsB,KAAX,CAAiBL,MAAjB,EAAyBA,MAAzB,EAAiC,CAAEF,EAAF,EAAMC,EAAN,CAAjC;AACAhB,IAAAA,UAAU,CAACmB,SAAX,CAAqBF,MAArB,EAA6BA,MAA7B,EAAqC,CAAE,CAACC,MAAM,CAACE,CAAV,EAAa,CAACF,MAAM,CAACG,CAArB,CAArC;AACD;;AAEDR,EAAAA,IAAI,CAACL,KAAD,EAAQC,GAAR,EAAa;AACf,SAAKQ,MAAL,GAAc,GAAGM,MAAH,CAAUrB,aAAV,CAAd,CADe,CAEf;;AACA,SAAKgB,MAAL,GAAc;AACZE,MAAAA,CAAC,EAAG,CAACX,GAAG,CAACW,CAAJ,GAAQZ,KAAK,CAACY,CAAf,IAAoB,CAArB,GAA0BZ,KAAK,CAACY,CADvB;AAEZC,MAAAA,CAAC,EAAE,CAACZ,GAAG,CAACY,CAAJ,GAAQb,KAAK,CAACa,CAAf,IAAoB,CAApB,GAAwBb,KAAK,CAACa;AAFrB,KAAd;;AAIA,QAAI,KAAKC,KAAT,EAAgB;AACd,WAAKR,MAAL,CAAY,KAAKQ,KAAL,CAAW,CAAX,CAAZ,EAA2B,KAAKA,KAAL,CAAW,CAAX,CAA3B;AACD;AACF;;AAEDE,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,UAAM;AAAEL,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAW,KAAKK,aAAL,CAAmBD,KAAnB,CAAjB;;AACA,UAAME,MAAM,GAAG,CAAEP,CAAF,EAAKC,CAAL,CAAf;AACApB,IAAAA,OAAO,CAAC2B,cAAR,CAAuBD,MAAvB,EAA+BA,MAA/B,EAAuC,KAAKV,MAA5C;AAEA,WAAO;AACLG,MAAAA,CAAC,EAAEO,MAAM,CAAC,CAAD,CADJ;AAELN,MAAAA,CAAC,EAAEM,MAAM,CAAC,CAAD;AAFJ,KAAP;AAID;;AAEDE,EAAAA,WAAW,CAACJ,KAAD,EAAQ;AACjB,WAAO,KAAKK,YAAL,CAAkBL,KAAlB,CAAP;AACD;;AAEDC,EAAAA,aAAa,CAACD,KAAD,EAAQ;AACnB,WAAOA,KAAP;AACD;;AAEDK,EAAAA,YAAY,CAACL,KAAD,EAAQ;AAClB,WAAOA,KAAP;AACD;;AAEDM,EAAAA,KAAK,CAACrB,IAAD,EAAO;AACV,SAAKA,IAAL,GAAYA,IAAZ;AACA,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAaF,IAAnB;AACA,SAAKF,KAAL,GAAaG,EAAb;AACA,SAAKF,GAAL,GAAWG,EAAX;AACA,SAAKC,IAAL,CAAUF,EAAV,EAAcC,EAAd;AACD;;AAtEQ;;AAyEXoB,MAAM,CAACC,OAAP,GAAiB9B,IAAjB","sourcesContent":["const Util = require('../util/common');\nconst MatrixUtil = require('../graphic/util/matrix');\nconst Vector2 = require('../graphic/util/vector2');\nconst defaultMatrix = [ 1, 0, 0, 1, 0, 0 ];\n\nclass Base {\n  _initDefaultCfg() {}\n\n  constructor(cfg) {\n    this._initDefaultCfg();\n    Util.mix(this, cfg);\n\n    let start;\n    let end;\n    if (this.plot) {\n      start = this.plot.bl;\n      end = this.plot.tr;\n      this.start = start;\n      this.end = end;\n    } else {\n      start = this.start;\n      end = this.end;\n    }\n    this.init(start, end);\n  }\n\n  _scale(s1, s2) {\n    const matrix = this.matrix;\n    const center = this.center;\n    MatrixUtil.translate(matrix, matrix, [ center.x, center.y ]);\n    MatrixUtil.scale(matrix, matrix, [ s1, s2 ]);\n    MatrixUtil.translate(matrix, matrix, [ -center.x, -center.y ]);\n  }\n\n  init(start, end) {\n    this.matrix = [].concat(defaultMatrix);\n    // 设置中心点\n    this.center = {\n      x: ((end.x - start.x) / 2) + start.x,\n      y: (end.y - start.y) / 2 + start.y\n    };\n    if (this.scale) {\n      this._scale(this.scale[0], this.scale[1]);\n    }\n  }\n\n  convertPoint(point) {\n    const { x, y } = this._convertPoint(point);\n    const vector = [ x, y ];\n    Vector2.transformMat2d(vector, vector, this.matrix);\n\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  }\n\n  invertPoint(point) {\n    return this._invertPoint(point);\n  }\n\n  _convertPoint(point) {\n    return point;\n  }\n\n  _invertPoint(point) {\n    return point;\n  }\n\n  reset(plot) {\n    this.plot = plot;\n    const { bl, tr } = plot;\n    this.start = bl;\n    this.end = tr;\n    this.init(bl, tr);\n  }\n}\n\nmodule.exports = Base;\n"]},"metadata":{},"sourceType":"script"}