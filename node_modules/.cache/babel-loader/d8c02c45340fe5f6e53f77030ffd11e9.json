{"ast":null,"code":"const Util = require('../../util/common');\n\nconst Global = require('../../global');\n\nconst ShapeUtil = require('./util');\n\nconst Shape = require('./shape');\n\nconst SHAPES = ['circle', 'hollowCircle', 'rect'];\nconst Point = Shape.registerFactory('point', {\n  defaultShapeType: 'circle',\n\n  getDefaultPoints(pointInfo) {\n    return ShapeUtil.splitPoints(pointInfo);\n  }\n\n});\n\nfunction getPointsCfg(cfg) {\n  const style = {\n    lineWidth: 0,\n    stroke: cfg.color,\n    fill: cfg.color\n  };\n\n  if (cfg.size) {\n    style.size = cfg.size;\n  }\n\n  Util.mix(style, cfg.style);\n  return Util.mix({}, Global.shape.point, style);\n}\n\nfunction drawShape(cfg, container, shape) {\n  if (cfg.size === 0) return;\n  const pointCfg = getPointsCfg(cfg);\n  const size = pointCfg.r || pointCfg.size;\n  const x = cfg.x;\n  const y = !Util.isArray(cfg.y) ? [cfg.y] : cfg.y;\n\n  if (shape === 'hollowCircle') {\n    pointCfg.lineWidth = 1;\n    pointCfg.fill = null;\n  }\n\n  for (let i = 0, len = y.length; i < len; i++) {\n    if (shape === 'rect') {\n      return container.addShape('Rect', {\n        className: 'point',\n        attrs: Util.mix({\n          x: x - size,\n          y: y[i] - size,\n          width: size * 2,\n          height: size * 2\n        }, pointCfg)\n      });\n    }\n\n    return container.addShape('Circle', {\n      className: 'point',\n      attrs: Util.mix({\n        x,\n        y: y[i],\n        r: size\n      }, pointCfg)\n    });\n  }\n}\n\nUtil.each(SHAPES, function (shapeType) {\n  Shape.registerShape('point', shapeType, {\n    draw(cfg, container) {\n      return drawShape(cfg, container, shapeType);\n    }\n\n  });\n});\nmodule.exports = Point;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/geom/shape/point.js"],"names":["Util","require","Global","ShapeUtil","Shape","SHAPES","Point","registerFactory","defaultShapeType","getDefaultPoints","pointInfo","splitPoints","getPointsCfg","cfg","style","lineWidth","stroke","color","fill","size","mix","shape","point","drawShape","container","pointCfg","r","x","y","isArray","i","len","length","addShape","className","attrs","width","height","each","shapeType","registerShape","draw","module","exports"],"mappings":"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","sourcesContent":["const Util = require('../../util/common');\nconst Global = require('../../global');\nconst ShapeUtil = require('./util');\nconst Shape = require('./shape');\nconst SHAPES = [ 'circle', 'hollowCircle', 'rect' ];\n\nconst Point = Shape.registerFactory('point', {\n  defaultShapeType: 'circle',\n  getDefaultPoints(pointInfo) {\n    return ShapeUtil.splitPoints(pointInfo);\n  }\n});\n\nfunction getPointsCfg(cfg) {\n  const style = {\n    lineWidth: 0,\n    stroke: cfg.color,\n    fill: cfg.color\n  };\n  if (cfg.size) {\n    style.size = cfg.size;\n  }\n\n  Util.mix(style, cfg.style);\n  return Util.mix({}, Global.shape.point, style);\n}\n\nfunction drawShape(cfg, container, shape) {\n  if (cfg.size === 0) return;\n  const pointCfg = getPointsCfg(cfg);\n  const size = pointCfg.r || pointCfg.size;\n  const x = cfg.x;\n  const y = !Util.isArray(cfg.y) ? [ cfg.y ] : cfg.y;\n  if (shape === 'hollowCircle') {\n    pointCfg.lineWidth = 1;\n    pointCfg.fill = null;\n  }\n  for (let i = 0, len = y.length; i < len; i++) {\n    if (shape === 'rect') {\n      return container.addShape('Rect', {\n        className: 'point',\n        attrs: Util.mix({\n          x: x - size,\n          y: y[i] - size,\n          width: size * 2,\n          height: size * 2\n        }, pointCfg)\n      });\n    }\n\n    return container.addShape('Circle', {\n      className: 'point',\n      attrs: Util.mix({\n        x,\n        y: y[i],\n        r: size\n      }, pointCfg)\n    });\n  }\n}\n\nUtil.each(SHAPES, function(shapeType) {\n  Shape.registerShape('point', shapeType, {\n    draw(cfg, container) {\n      return drawShape(cfg, container, shapeType);\n    }\n  });\n});\n\nmodule.exports = Point;\n"]},"metadata":{},"sourceType":"script"}