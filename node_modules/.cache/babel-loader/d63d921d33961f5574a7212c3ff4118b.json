{"ast":null,"code":"/**\n * marker shapes，used for tooltip and legend\n */\nconst Util = require('../util/common');\n\nconst {\n  Shape\n} = require('../graphic/index');\n\nconst SYMBOLS = {\n  circle(x, y, r, ctx) {\n    ctx.arc(x, y, r, 0, Math.PI * 2, false);\n  },\n\n  square(x, y, r, ctx) {\n    ctx.moveTo(x - r, y - r);\n    ctx.lineTo(x + r, y - r);\n    ctx.lineTo(x + r, y + r);\n    ctx.lineTo(x - r, y + r);\n    ctx.closePath();\n  }\n\n};\n\nclass Marker extends Shape {\n  _initProperties() {\n    super._initProperties();\n\n    this._attrs.canFill = true;\n    this._attrs.canStroke = true;\n    this._attrs.type = 'marker';\n  }\n\n  getDefaultAttrs() {\n    return {\n      x: 0,\n      y: 0,\n      lineWidth: 0\n    };\n  }\n\n  createPath(context) {\n    const attrs = this.get('attrs');\n    const {\n      x,\n      y,\n      radius\n    } = attrs;\n    const symbol = attrs.symbol || 'circle';\n    let method;\n\n    if (Util.isFunction(symbol)) {\n      method = symbol;\n    } else {\n      method = SYMBOLS[symbol];\n    }\n\n    context.beginPath();\n    method(x, y, radius, context, this);\n  }\n\n  calculateBox() {\n    const attrs = this.get('attrs');\n    const {\n      x,\n      y,\n      radius\n    } = attrs;\n    return {\n      minX: x - radius,\n      minY: y - radius,\n      maxX: x + radius,\n      maxY: y + radius\n    };\n  }\n\n}\n\nmodule.exports = Marker;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/marker.js"],"names":["Util","require","Shape","SYMBOLS","circle","x","y","r","ctx","arc","Math","PI","square","moveTo","lineTo","closePath","Marker","_initProperties","_attrs","canFill","canStroke","type","getDefaultAttrs","lineWidth","createPath","context","attrs","get","radius","symbol","method","isFunction","beginPath","calculateBox","minX","minY","maxX","maxY","module","exports"],"mappings":"AAAA;;;AAGA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAC,kBAAD,CAAzB;;AAEA,MAAME,OAAO,GAAG;AACdC,EAAAA,MAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,GAAV,EAAe;AACnBA,IAAAA,GAAG,CAACC,GAAJ,CAAQJ,CAAR,EAAWC,CAAX,EAAcC,CAAd,EAAiB,CAAjB,EAAoBG,IAAI,CAACC,EAAL,GAAU,CAA9B,EAAiC,KAAjC;AACD,GAHa;;AAIdC,EAAAA,MAAM,CAACP,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,GAAV,EAAe;AACnBA,IAAAA,GAAG,CAACK,MAAJ,CAAWR,CAAC,GAAGE,CAAf,EAAkBD,CAAC,GAAGC,CAAtB;AACAC,IAAAA,GAAG,CAACM,MAAJ,CAAWT,CAAC,GAAGE,CAAf,EAAkBD,CAAC,GAAGC,CAAtB;AACAC,IAAAA,GAAG,CAACM,MAAJ,CAAWT,CAAC,GAAGE,CAAf,EAAkBD,CAAC,GAAGC,CAAtB;AACAC,IAAAA,GAAG,CAACM,MAAJ,CAAWT,CAAC,GAAGE,CAAf,EAAkBD,CAAC,GAAGC,CAAtB;AACAC,IAAAA,GAAG,CAACO,SAAJ;AACD;;AAVa,CAAhB;;AAaA,MAAMC,MAAN,SAAqBd,KAArB,CAA2B;AACzBe,EAAAA,eAAe,GAAG;AAChB,UAAMA,eAAN;;AACA,SAAKC,MAAL,CAAYC,OAAZ,GAAsB,IAAtB;AACA,SAAKD,MAAL,CAAYE,SAAZ,GAAwB,IAAxB;AACA,SAAKF,MAAL,CAAYG,IAAZ,GAAmB,QAAnB;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO;AACLjB,MAAAA,CAAC,EAAE,CADE;AAELC,MAAAA,CAAC,EAAE,CAFE;AAGLiB,MAAAA,SAAS,EAAE;AAHN,KAAP;AAKD;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,UAAMC,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAd;AACA,UAAM;AAAEtB,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQsB,MAAAA;AAAR,QAAmBF,KAAzB;AACA,UAAMG,MAAM,GAAGH,KAAK,CAACG,MAAN,IAAgB,QAA/B;AACA,QAAIC,MAAJ;;AACA,QAAI9B,IAAI,CAAC+B,UAAL,CAAgBF,MAAhB,CAAJ,EAA6B;AAC3BC,MAAAA,MAAM,GAAGD,MAAT;AACD,KAFD,MAEO;AACLC,MAAAA,MAAM,GAAG3B,OAAO,CAAC0B,MAAD,CAAhB;AACD;;AACDJ,IAAAA,OAAO,CAACO,SAAR;AACAF,IAAAA,MAAM,CAACzB,CAAD,EAAIC,CAAJ,EAAOsB,MAAP,EAAeH,OAAf,EAAwB,IAAxB,CAAN;AACD;;AAEDQ,EAAAA,YAAY,GAAG;AACb,UAAMP,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAd;AACA,UAAM;AAAEtB,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQsB,MAAAA;AAAR,QAAmBF,KAAzB;AACA,WAAO;AACLQ,MAAAA,IAAI,EAAE7B,CAAC,GAAGuB,MADL;AAELO,MAAAA,IAAI,EAAE7B,CAAC,GAAGsB,MAFL;AAGLQ,MAAAA,IAAI,EAAE/B,CAAC,GAAGuB,MAHL;AAILS,MAAAA,IAAI,EAAE/B,CAAC,GAAGsB;AAJL,KAAP;AAMD;;AAvCwB;;AA0C3BU,MAAM,CAACC,OAAP,GAAiBvB,MAAjB","sourcesContent":["/**\n * marker shapes，used for tooltip and legend\n */\nconst Util = require('../util/common');\nconst { Shape } = require('../graphic/index');\n\nconst SYMBOLS = {\n  circle(x, y, r, ctx) {\n    ctx.arc(x, y, r, 0, Math.PI * 2, false);\n  },\n  square(x, y, r, ctx) {\n    ctx.moveTo(x - r, y - r);\n    ctx.lineTo(x + r, y - r);\n    ctx.lineTo(x + r, y + r);\n    ctx.lineTo(x - r, y + r);\n    ctx.closePath();\n  }\n};\n\nclass Marker extends Shape {\n  _initProperties() {\n    super._initProperties();\n    this._attrs.canFill = true;\n    this._attrs.canStroke = true;\n    this._attrs.type = 'marker';\n  }\n\n  getDefaultAttrs() {\n    return {\n      x: 0,\n      y: 0,\n      lineWidth: 0\n    };\n  }\n\n  createPath(context) {\n    const attrs = this.get('attrs');\n    const { x, y, radius } = attrs;\n    const symbol = attrs.symbol || 'circle';\n    let method;\n    if (Util.isFunction(symbol)) {\n      method = symbol;\n    } else {\n      method = SYMBOLS[symbol];\n    }\n    context.beginPath();\n    method(x, y, radius, context, this);\n  }\n\n  calculateBox() {\n    const attrs = this.get('attrs');\n    const { x, y, radius } = attrs;\n    return {\n      minX: x - radius,\n      minY: y - radius,\n      maxX: x + radius,\n      maxY: y + radius\n    };\n  }\n}\n\nmodule.exports = Marker;\n"]},"metadata":{},"sourceType":"script"}