{"ast":null,"code":"import { EVENT_BEFORE_RENDER, EVENT_AFTER_RENDER, EVENT_BEFORE_DATA_CHANGE, EVENT_AFTER_DATA_CHANGE, EVENT_AFTER_SIZE_CHANGE, EVENT_AFTER_GEOM_INIT } from './const';\n\nconst Base = require('../base');\n\nconst Plot = require('./plot');\n\nconst Util = require('../util/common');\n\nconst Coord = require('../coord/index');\n\nconst Geom = require('../geom/base');\n\nconst ScaleController = require('./controller/scale');\n\nconst AxisController = require('./controller/axis');\n\nconst Global = require('../global');\n\nconst {\n  Canvas\n} = require('../graphic/index');\n\nconst Helper = require('../util/helper');\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction _isScaleExist(scales, compareScale) {\n  let flag = false;\n  Util.each(scales, scale => {\n    const scaleValues = [].concat(scale.values);\n    const compareScaleValues = [].concat(compareScale.values);\n\n    if (scale.type === compareScale.type && scale.field === compareScale.field && scaleValues.sort(compare).toString() === compareScaleValues.sort(compare).toString()) {\n      flag = true;\n      return;\n    }\n  });\n  return flag;\n}\n\nclass Chart extends Base {\n  static initPlugins() {\n    return {\n      _plugins: [],\n      _cacheId: 0,\n\n      register(plugins) {\n        const p = this._plugins;\n        [].concat(plugins).forEach(plugin => {\n          if (p.indexOf(plugin) === -1) {\n            p.push(plugin);\n          }\n        });\n        this._cacheId++;\n      },\n\n      unregister(plugins) {\n        const p = this._plugins;\n        [].concat(plugins).forEach(plugin => {\n          const idx = p.indexOf(plugin);\n\n          if (idx !== -1) {\n            p.splice(idx, 1);\n          }\n        });\n        this._cacheId++;\n      },\n\n      clear() {\n        this._plugins = [];\n        this._cacheId++;\n      },\n\n      count() {\n        return this._plugins.length;\n      },\n\n      getAll() {\n        return this._plugins;\n      },\n\n      notify(chart, hook, args) {\n        const descriptors = this.descriptors(chart);\n        const ilen = descriptors.length;\n        let i;\n        let descriptor;\n        let plugin;\n        let params;\n        let method;\n\n        for (i = 0; i < ilen; ++i) {\n          descriptor = descriptors[i];\n          plugin = descriptor.plugin;\n          method = plugin[hook];\n\n          if (typeof method === 'function') {\n            params = [chart].concat(args || []);\n\n            if (method.apply(plugin, params) === false) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      },\n\n      descriptors(chart) {\n        const cache = chart._plugins || (chart._plugins = {});\n\n        if (cache.id === this._cacheId) {\n          return cache.descriptors;\n        }\n\n        const plugins = [];\n        const descriptors = [];\n\n        this._plugins.concat(chart && chart.get('plugins') || []).forEach(plugin => {\n          const idx = plugins.indexOf(plugin);\n\n          if (idx !== -1) {\n            return;\n          }\n\n          plugins.push(plugin);\n          descriptors.push({\n            plugin\n          });\n        });\n\n        cache.descriptors = descriptors;\n        cache.id = this._cacheId;\n        return descriptors;\n      }\n\n    };\n  }\n\n  getDefaultCfg() {\n    return {\n      /**\n       * the id of canvas\n       * @type {String}\n       */\n      id: null,\n      rendered: false,\n\n      /**\n       * padding\n       * @type {Array|Number}\n       */\n      padding: Global.padding,\n\n      /**\n       * data\n       * @type {Array}\n       */\n      data: null,\n\n      /**\n       * scales of chart\n       * @type {Object}\n       */\n      scales: {},\n\n      /**\n       * @private\n       * geometry instances\n       * @type {Array}\n       */\n      geoms: [],\n\n      /**\n       * scale configuration\n       * @type {Object}\n       */\n      colDefs: null,\n      pixelRatio: Global.pixelRatio,\n\n      /**\n       * filter options\n       * @type {Object}\n       */\n      filters: null,\n      appendPadding: Global.appendPadding\n    };\n  }\n\n  _syncYScales() {\n    const syncY = this.get('syncY');\n\n    if (!syncY) {\n      return;\n    }\n\n    const geoms = this.get('geoms');\n    const syncScales = [];\n    let min = [];\n    let max = [];\n    Util.each(geoms, geom => {\n      const yScale = geom.getYScale();\n\n      if (yScale.isLinear) {\n        syncScales.push(yScale);\n        min.push(yScale.min);\n        max.push(yScale.max);\n      }\n    });\n    min = Math.min.apply(null, min);\n    max = Math.max.apply(null, max);\n    Util.each(syncScales, scale => {\n      scale.change({\n        min\n      });\n      scale.change({\n        max\n      });\n    });\n  }\n\n  _getFieldsForLegend() {\n    const fields = [];\n    const geoms = this.get('geoms');\n    Util.each(geoms, geom => {\n      const attrOptions = geom.get('attrOptions');\n      const attrCfg = attrOptions.color;\n\n      if (attrCfg && attrCfg.field && Util.isString(attrCfg.field)) {\n        const arr = attrCfg.field.split('*');\n        Util.each(arr, item => {\n          if (fields.indexOf(item) === -1) {\n            fields.push(item);\n          }\n        });\n      }\n    });\n    return fields;\n  }\n\n  _getScaleData(field) {\n    let data = this.get('data');\n    const filteredData = this.get('filteredData');\n\n    if (filteredData.length) {\n      const legendFields = this._getFieldsForLegend();\n\n      if (legendFields.indexOf(field) === -1) {\n        data = filteredData;\n      }\n    }\n\n    return data;\n  }\n\n  _updateScales() {\n    const scaleController = this.get('scaleController');\n    scaleController.updateScales();\n\n    this._adjustScale();\n  }\n\n  _adjustScale() {\n    const self = this;\n    const scaleController = self.get('scaleController'); // 看起来是为了让柱状图最小或最大都默认从0开始\n\n    const geoms = this.get('geoms');\n\n    for (let i = 0; i < geoms.length; i++) {\n      const geom = geoms[i];\n\n      if (geom.get('type') === 'interval') {\n        const yScale = geom.getYScale();\n        scaleController.adjustStartZero(yScale);\n      }\n    }\n  }\n\n  _removeGeoms() {\n    const geoms = this.get('geoms');\n\n    while (geoms.length > 0) {\n      const geom = geoms.shift();\n      geom.destroy();\n    }\n  }\n\n  _clearGeoms() {\n    const geoms = this.get('geoms');\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      const geom = geoms[i];\n      geom.clear();\n    }\n  }\n\n  _clearInner() {\n    this._clearGeoms();\n\n    Chart.plugins.notify(this, 'clearInner');\n    this.get('axisController') && this.get('axisController').clear();\n  }\n\n  _initFilteredData() {\n    const filters = this.get('filters');\n    let data = this.get('data') || [];\n\n    if (filters) {\n      data = data.filter(function (obj) {\n        let rst = true;\n        Util.each(filters, function (fn, k) {\n          if (fn) {\n            rst = fn(obj[k], obj);\n\n            if (!rst) {\n              return false;\n            }\n          }\n        });\n        return rst;\n      });\n    }\n\n    this.set('filteredData', data);\n  }\n\n  _changeGeomsData() {\n    const geoms = this.get('geoms');\n    const data = this.get('filteredData');\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      const geom = geoms[i];\n      geom.changeData(data);\n    }\n  }\n\n  _initGeom(geom) {\n    const coord = this.get('coord');\n    const data = this.get('filteredData');\n    const colDefs = this.get('colDefs');\n    const middlePlot = this.get('middlePlot');\n    geom.set('chart', this);\n    geom.set('container', middlePlot.addGroup());\n    geom.set('data', data);\n    geom.set('coord', coord);\n    geom.set('colDefs', colDefs);\n    geom.init();\n    this.emit(EVENT_AFTER_GEOM_INIT, geom);\n  }\n\n  _initGeoms() {\n    const geoms = this.get('geoms');\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      this._initGeom(geoms[i]);\n    }\n  }\n\n  _initCoord() {\n    const plot = this.get('plotRange');\n    const coordCfg = Util.mix({\n      type: 'cartesian'\n    }, this.get('coordCfg'), {\n      plot\n    });\n    const type = coordCfg.type;\n    const C = Coord[Util.upperFirst(type)];\n    const coord = new C(coordCfg);\n    this.set('coord', coord);\n  }\n\n  _initLayout() {\n    let padding = this.get('_padding');\n\n    if (!padding) {\n      padding = this.get('margin') || this.get('padding');\n      padding = Util.parsePadding(padding);\n    }\n\n    const top = padding[0] === 'auto' ? 0 : padding[0];\n    const right = padding[1] === 'auto' ? 0 : padding[1];\n    const bottom = padding[2] === 'auto' ? 0 : padding[2];\n    const left = padding[3] === 'auto' ? 0 : padding[3];\n    const width = this.get('width');\n    const height = this.get('height');\n    const start = {\n      x: left,\n      y: top\n    };\n    const end = {\n      x: width - right,\n      y: height - bottom\n    };\n    const plot = this.get('plot');\n\n    if (plot) {\n      plot.reset(start, end);\n      return;\n    }\n\n    const newPlot = new Plot({\n      start,\n      end\n    });\n    this.set('plotRange', newPlot);\n    this.set('plot', newPlot);\n  }\n\n  _initCanvas() {\n    const self = this;\n\n    try {\n      const canvas = new Canvas({\n        el: self.get('el') || self.get('id'),\n        context: self.get('context'),\n        pixelRatio: self.get('pixelRatio'),\n        width: self.get('width'),\n        height: self.get('height'),\n        fontFamily: Global.fontFamily\n      });\n      self.set('canvas', canvas);\n      self.set('el', canvas.get('el'));\n      self.set('width', canvas.get('width'));\n      self.set('height', canvas.get('height'));\n    } catch (error) {\n      throw error;\n    }\n\n    Chart.plugins.notify(self, 'afterCanvasInit');\n  }\n\n  _initLayers() {\n    const canvas = this.get('canvas');\n    this.set('backPlot', canvas.addGroup());\n    this.set('middlePlot', canvas.addGroup({\n      zIndex: 10\n    }));\n    this.set('frontPlot', canvas.addGroup({\n      zIndex: 20\n    }));\n  }\n\n  _initEvents() {\n    // 数据更新后的一些更新\n    this.on(EVENT_AFTER_DATA_CHANGE, () => {\n      // 数据更新后，重新设置filterdata\n      this._initFilteredData(); // 要重新计算scale的value值\n\n\n      this._updateScales(); // 更新geoms里的数据\n\n\n      this._changeGeomsData();\n    }); // 大小变化后的一些更新\n\n    this.on(EVENT_AFTER_SIZE_CHANGE, () => {\n      this._initLayout(); // layout变化后，坐标轴也需要做相应的变化\n\n\n      const coord = this.get('coord');\n\n      if (coord) {\n        coord.reset(this.get('plot'));\n      }\n    });\n  }\n\n  _initScaleController() {\n    const scaleController = new ScaleController({\n      chart: this\n    }); // 让colDefs 和 scaleController.defs 用同一个对象，这样就不用考虑同步的问题\n\n    this.set('colDefs', scaleController.defs); // 已经实例化的scales 也保持统一个对象\n\n    this.set('scales', scaleController.scales);\n    this.set('scaleController', scaleController);\n  }\n\n  _clearScaleController() {\n    const scaleController = this.get('scaleController');\n    scaleController.clear();\n  }\n\n  _init() {\n    const self = this;\n\n    self._initCanvas();\n\n    self._initLayout();\n\n    self._initLayers();\n\n    self._initEvents();\n\n    self._initScaleController();\n\n    self.set('axisController', new AxisController({\n      frontPlot: self.get('frontPlot').addGroup({\n        className: 'axisContainer'\n      }),\n      backPlot: self.get('backPlot').addGroup({\n        className: 'axisContainer'\n      }),\n      chart: self\n    }));\n    Chart.plugins.notify(self, 'init');\n  }\n\n  constructor(cfg) {\n    super(cfg);\n    const self = this;\n    Util.each(Geom, function (geomConstructor, className) {\n      const methodName = Util.lowerFirst(className);\n\n      self[methodName] = function (cfg) {\n        const geom = new geomConstructor(cfg);\n        self.addGeom(geom);\n        return geom;\n      };\n    });\n\n    self._init();\n  }\n\n  init() {\n    // 初始filterData\n    this._initFilteredData(); // initialization coordinate instance\n\n\n    this._initCoord();\n\n    Chart.plugins.notify(this, 'beforeGeomInit'); // init all geometry instances\n\n    this._initGeoms(); // 多 Y 轴的情况时，统一 Y 轴的数值范围。\n\n\n    this._syncYScales(); // do some adjust for data\n\n\n    this._adjustScale();\n  }\n  /**\n   * set data and some scale configuration\n   * @chainable\n   * @param  {Array} data the dataset to visualize\n   * @param  {Object} colDefs the configuration for scales\n   * @return {Chart} return the chart instance\n   */\n\n\n  source(data, colDefs) {\n    this.set('data', data);\n\n    if (colDefs) {\n      this.scale(colDefs);\n    }\n\n    return this;\n  }\n\n  scale(field, cfg) {\n    const scaleController = this.get('scaleController');\n    scaleController.setFieldDef(field, cfg);\n    return this;\n  }\n  /**\n   * configure the axis\n   * @chainable\n   * @param  {String|Boolean} field the field name of data\n   * @param  {Object} cfg configuration for axis\n   * @return {Chart} return the chart instance\n   */\n\n\n  axis(field, cfg) {\n    const axisController = this.get('axisController');\n\n    if (!field) {\n      axisController.axisCfg = null;\n    } else {\n      axisController.axisCfg = axisController.axisCfg || {};\n      axisController.axisCfg[field] = cfg;\n    }\n\n    return this;\n  }\n  /**\n   * configure the coordinate\n   * @chainable\n   * @param  {String} type set the type of coodinate\n   * @param  {Object} cfg configuration for coordinate\n   * @return {Chart} return the chart instance\n   */\n\n\n  coord(type, cfg) {\n    let coordCfg;\n\n    if (Util.isObject(type)) {\n      coordCfg = type;\n    } else {\n      coordCfg = cfg || {};\n      coordCfg.type = type || 'cartesian';\n    }\n\n    this.set('coordCfg', coordCfg);\n    return this;\n  }\n\n  filter(field, condition) {\n    const filters = this.get('filters') || {};\n    filters[field] = condition;\n    this.set('filters', filters); // 如果已经render过，则再重新触发一次change\n\n    if (this.get('rendered')) {\n      this.emit(EVENT_AFTER_DATA_CHANGE, this.get('data'));\n    }\n  }\n  /**\n   * render the chart\n   * @chainable\n   * @return {Chart} return the chart instance\n   */\n\n\n  render() {\n    const rendered = this.get('rendered');\n    const canvas = this.get('canvas');\n    const geoms = this.get('geoms');\n\n    if (!rendered) {\n      this.init();\n      this.set('rendered', true);\n    }\n\n    this.emit(EVENT_BEFORE_RENDER);\n    Chart.plugins.notify(this, 'beforeGeomDraw');\n\n    this._renderAxis();\n\n    const middlePlot = this.get('middlePlot');\n\n    if (this.get('limitInPlot') && !middlePlot.attr('clip')) {\n      const coord = this.get('coord');\n      const clip = Helper.getClip(coord);\n      clip.set('canvas', middlePlot.get('canvas'));\n      middlePlot.attr('clip', clip);\n    }\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      const geom = geoms[i];\n      geom.paint();\n    }\n\n    Chart.plugins.notify(this, 'afterGeomDraw');\n    canvas.sort();\n    this.get('frontPlot').sort();\n    Chart.plugins.notify(this, 'beforeCanvasDraw');\n    canvas.draw();\n    this.emit(EVENT_AFTER_RENDER);\n    return this;\n  }\n  /**\n   * clear the chart, include geometris and all the shapes\n   * @chainable\n   * @return {Chart} return the chart\n   */\n\n\n  clear() {\n    Chart.plugins.notify(this, 'clear');\n\n    this._clearInner();\n\n    this._removeGeoms();\n\n    this._clearScaleController();\n\n    this.set('legendItems', null);\n    this.set('filters', null);\n    this.set('isUpdate', false);\n    this.set('_padding', null);\n    this.set('rendered', false);\n    const canvas = this.get('canvas');\n    canvas.draw();\n    return this;\n  }\n\n  repaint() {\n    this.set('isUpdate', true);\n    this.set('legendItems', null);\n    Chart.plugins.notify(this, 'repaint');\n\n    this._clearInner();\n\n    this.render();\n  }\n\n  changeData(data) {\n    this.emit(EVENT_BEFORE_DATA_CHANGE, data);\n    this.set('data', data);\n    Chart.plugins.notify(this, 'changeData');\n    this.emit(EVENT_AFTER_DATA_CHANGE, data);\n    this.set('_padding', null);\n    this.repaint();\n  }\n\n  changeSize(width, height) {\n    if (width) {\n      this.set('width', width);\n    } else {\n      width = this.get('width');\n    }\n\n    if (height) {\n      this.set('height', height);\n    } else {\n      height = this.get('height');\n    }\n\n    const canvas = this.get('canvas');\n    canvas.changeSize(width, height);\n    this.emit(EVENT_AFTER_SIZE_CHANGE, {\n      width,\n      height\n    });\n    this.repaint();\n    return this;\n  }\n\n  destroy() {\n    this.clear();\n    const canvas = this.get('canvas');\n    canvas.destroy();\n    Chart.plugins.notify(this, 'afterCanvasDestroyed');\n\n    if (this._interactions) {\n      Util.each(this._interactions, interaction => {\n        interaction.destroy();\n      });\n    }\n\n    super.destroy();\n  }\n  /**\n   * calculate dataset's position on canvas\n   * @param  {Object} record the dataset\n   * @return {Object} return the position\n   */\n\n\n  getPosition(record) {\n    const self = this;\n    const coord = self.get('coord');\n    const xScale = self.getXScale();\n    const yScale = self.getYScales()[0];\n    const xField = xScale.field;\n    const x = xScale.scale(record[xField]);\n    const yField = yScale.field;\n    const y = yScale.scale(record[yField]);\n    return coord.convertPoint({\n      x,\n      y\n    });\n  }\n  /**\n   * get the data item of the point\n   * @param  {Object} point canvas position\n   * @return {Object} return the data item\n   */\n\n\n  getRecord(point) {\n    const self = this;\n    const coord = self.get('coord');\n    const xScale = self.getXScale();\n    const yScale = self.getYScales()[0];\n    const invertPoint = coord.invertPoint(point);\n    const record = {};\n    record[xScale.field] = xScale.invert(invertPoint.x);\n    record[yScale.field] = yScale.invert(invertPoint.y);\n    return record;\n  }\n  /**\n   * get the dataset of the point\n   * @param  {Object} point canvas position\n   * @return {Array} return the dataset\n  **/\n\n\n  getSnapRecords(point) {\n    const geom = this.get('geoms')[0];\n    let data = [];\n\n    if (geom) {\n      // need to judge\n      data = geom.getSnapRecords(point);\n    }\n\n    return data;\n  }\n  /**\n   * creat scale instances\n   * @param  {String} field field name of data\n   * @return {Scale} return the scale\n   */\n\n\n  createScale(field) {\n    const data = this._getScaleData(field);\n\n    const scaleController = this.get('scaleController');\n    return scaleController.createScale(field, data);\n  }\n  /**\n   * @protected\n   * add geometry instance to geoms\n   * @param {Geom} geom geometry instance\n   */\n\n\n  addGeom(geom) {\n    const rendered = this.get('rendered');\n    const geoms = this.get('geoms');\n    geoms.push(geom); // 如果图表已经渲染过了，则直接初始化geom\n\n    if (rendered) {\n      this._initGeom(geom);\n    }\n  }\n  /**\n   * get the scale of x axis\n   * @return {Scale} return the scale\n   */\n\n\n  getXScale() {\n    const self = this;\n    const geoms = self.get('geoms');\n    const xScale = geoms[0].getXScale();\n    return xScale;\n  }\n  /**\n   * get the scale of y axis\n   * @return {Array} return the scale\n   */\n\n\n  getYScales() {\n    const geoms = this.get('geoms');\n    const rst = [];\n    Util.each(geoms, function (geom) {\n      const yScale = geom.getYScale();\n\n      if (rst.indexOf(yScale) === -1) {\n        rst.push(yScale);\n      }\n    });\n    return rst;\n  }\n\n  getLegendItems() {\n    if (this.get('legendItems')) {\n      return this.get('legendItems');\n    }\n\n    const legendItems = {};\n    const scales = [];\n    const geoms = this.get('geoms');\n    Util.each(geoms, geom => {\n      const colorAttr = geom.getAttr('color');\n\n      if (colorAttr) {\n        const scale = colorAttr.getScale('color'); // 只支持分类图例\n\n        if (scale.isCategory && !_isScaleExist(scales, scale)) {\n          scales.push(scale);\n          const field = scale.field;\n          const ticks = scale.getTicks();\n          const items = [];\n          Util.each(ticks, tick => {\n            const text = tick.text;\n            const name = text;\n            const scaleValue = tick.value;\n            const value = scale.invert(scaleValue);\n            const color = colorAttr.mapping(value).join('') || Global.defaultColor;\n            const marker = {\n              fill: color,\n              radius: 3,\n              symbol: 'circle',\n              stroke: '#fff'\n            };\n            items.push({\n              name,\n              // for display\n              dataValue: value,\n              // the origin value\n              checked: true,\n              marker\n            });\n          });\n          legendItems[field] = items;\n        }\n      }\n    });\n    this.set('legendItems', legendItems);\n    return legendItems;\n  } // register the plugins\n\n\n  registerPlugins(plugins) {\n    const self = this;\n    let chartPlugins = self.get('plugins') || [];\n\n    if (!Util.isArray(chartPlugins)) {\n      chartPlugins = [chartPlugins];\n    }\n\n    [].concat(plugins).forEach(plugin => {\n      if (chartPlugins.indexOf(plugin) === -1) {\n        plugin.init && plugin.init(self); // init\n\n        chartPlugins.push(plugin);\n      }\n    });\n    Chart.plugins._cacheId++;\n    self.set('plugins', chartPlugins);\n  }\n\n  _renderAxis() {\n    const axisController = this.get('axisController');\n    const xScale = this.getXScale();\n    const yScales = this.getYScales();\n    const coord = this.get('coord');\n    Chart.plugins.notify(this, 'beforeRenderAxis');\n    axisController.createAxis(coord, xScale, yScales);\n  }\n\n  _isAutoPadding() {\n    if (this.get('_padding')) {\n      return false;\n    }\n\n    const padding = this.get('padding');\n\n    if (Util.isArray(padding)) {\n      return padding.indexOf('auto') !== -1;\n    }\n\n    return padding === 'auto';\n  }\n\n  _updateLayout(padding) {\n    const width = this.get('width');\n    const height = this.get('height');\n    const start = {\n      x: padding[3],\n      y: padding[0]\n    };\n    const end = {\n      x: width - padding[1],\n      y: height - padding[2]\n    };\n    const plot = this.get('plot');\n    const coord = this.get('coord');\n    plot.reset(start, end);\n    coord.reset(plot);\n  }\n\n}\n\nChart.plugins = Chart.initPlugins();\nmodule.exports = Chart;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/chart/chart.js"],"names":["EVENT_BEFORE_RENDER","EVENT_AFTER_RENDER","EVENT_BEFORE_DATA_CHANGE","EVENT_AFTER_DATA_CHANGE","EVENT_AFTER_SIZE_CHANGE","EVENT_AFTER_GEOM_INIT","Base","require","Plot","Util","Coord","Geom","ScaleController","AxisController","Global","Canvas","Helper","compare","a","b","_isScaleExist","scales","compareScale","flag","each","scale","scaleValues","concat","values","compareScaleValues","type","field","sort","toString","Chart","initPlugins","_plugins","_cacheId","register","plugins","p","forEach","plugin","indexOf","push","unregister","idx","splice","clear","count","length","getAll","notify","chart","hook","args","descriptors","ilen","i","descriptor","params","method","apply","cache","id","get","getDefaultCfg","rendered","padding","data","geoms","colDefs","pixelRatio","filters","appendPadding","_syncYScales","syncY","syncScales","min","max","geom","yScale","getYScale","isLinear","Math","change","_getFieldsForLegend","fields","attrOptions","attrCfg","color","isString","arr","split","item","_getScaleData","filteredData","legendFields","_updateScales","scaleController","updateScales","_adjustScale","self","adjustStartZero","_removeGeoms","shift","destroy","_clearGeoms","_clearInner","_initFilteredData","filter","obj","rst","fn","k","set","_changeGeomsData","changeData","_initGeom","coord","middlePlot","addGroup","init","emit","_initGeoms","_initCoord","plot","coordCfg","mix","C","upperFirst","_initLayout","parsePadding","top","right","bottom","left","width","height","start","x","y","end","reset","newPlot","_initCanvas","canvas","el","context","fontFamily","error","_initLayers","zIndex","_initEvents","on","_initScaleController","defs","_clearScaleController","_init","frontPlot","className","backPlot","constructor","cfg","geomConstructor","methodName","lowerFirst","addGeom","source","setFieldDef","axis","axisController","axisCfg","isObject","condition","render","_renderAxis","attr","clip","getClip","paint","draw","repaint","changeSize","_interactions","interaction","getPosition","record","xScale","getXScale","getYScales","xField","yField","convertPoint","getRecord","point","invertPoint","invert","getSnapRecords","createScale","getLegendItems","legendItems","colorAttr","getAttr","getScale","isCategory","ticks","getTicks","items","tick","text","name","scaleValue","value","mapping","join","defaultColor","marker","fill","radius","symbol","stroke","dataValue","checked","registerPlugins","chartPlugins","isArray","yScales","createAxis","_isAutoPadding","_updateLayout","module","exports"],"mappings":"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","sourcesContent":["import {\n  EVENT_BEFORE_RENDER,\n  EVENT_AFTER_RENDER,\n  EVENT_BEFORE_DATA_CHANGE,\n  EVENT_AFTER_DATA_CHANGE,\n  EVENT_AFTER_SIZE_CHANGE,\n  EVENT_AFTER_GEOM_INIT\n} from './const';\nconst Base = require('../base');\nconst Plot = require('./plot');\nconst Util = require('../util/common');\nconst Coord = require('../coord/index');\nconst Geom = require('../geom/base');\nconst ScaleController = require('./controller/scale');\nconst AxisController = require('./controller/axis');\nconst Global = require('../global');\nconst { Canvas } = require('../graphic/index');\nconst Helper = require('../util/helper');\n\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction _isScaleExist(scales, compareScale) {\n  let flag = false;\n  Util.each(scales, scale => {\n    const scaleValues = [].concat(scale.values);\n    const compareScaleValues = [].concat(compareScale.values);\n    if (scale.type === compareScale.type &&\n      scale.field === compareScale.field &&\n      scaleValues.sort(compare).toString() === compareScaleValues.sort(compare).toString()) {\n      flag = true;\n      return;\n    }\n  });\n\n  return flag;\n}\n\nclass Chart extends Base {\n  static initPlugins() {\n    return {\n      _plugins: [],\n      _cacheId: 0,\n      register(plugins) {\n        const p = this._plugins;\n        ([]).concat(plugins).forEach(plugin => {\n          if (p.indexOf(plugin) === -1) {\n            p.push(plugin);\n          }\n        });\n\n        this._cacheId++;\n      },\n      unregister(plugins) {\n        const p = this._plugins;\n        ([]).concat(plugins).forEach(plugin => {\n          const idx = p.indexOf(plugin);\n          if (idx !== -1) {\n            p.splice(idx, 1);\n          }\n        });\n\n        this._cacheId++;\n      },\n      clear() {\n        this._plugins = [];\n        this._cacheId++;\n      },\n      count() {\n        return this._plugins.length;\n      },\n      getAll() {\n        return this._plugins;\n      },\n      notify(chart, hook, args) {\n        const descriptors = this.descriptors(chart);\n        const ilen = descriptors.length;\n        let i;\n        let descriptor;\n        let plugin;\n        let params;\n        let method;\n\n        for (i = 0; i < ilen; ++i) {\n          descriptor = descriptors[i];\n          plugin = descriptor.plugin;\n          method = plugin[hook];\n          if (typeof method === 'function') {\n            params = [ chart ].concat(args || []);\n            if (method.apply(plugin, params) === false) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      },\n      descriptors(chart) {\n        const cache = chart._plugins || (chart._plugins = {});\n        if (cache.id === this._cacheId) {\n          return cache.descriptors;\n        }\n\n        const plugins = [];\n        const descriptors = [];\n\n        this._plugins.concat((chart && chart.get('plugins')) || []).forEach(plugin => {\n          const idx = plugins.indexOf(plugin);\n          if (idx !== -1) {\n            return;\n          }\n\n          plugins.push(plugin);\n          descriptors.push({\n            plugin\n          });\n        });\n\n        cache.descriptors = descriptors;\n        cache.id = this._cacheId;\n        return descriptors;\n      }\n    };\n  }\n\n  getDefaultCfg() {\n    return {\n      /**\n       * the id of canvas\n       * @type {String}\n       */\n      id: null,\n      rendered: false,\n      /**\n       * padding\n       * @type {Array|Number}\n       */\n      padding: Global.padding,\n\n      /**\n       * data\n       * @type {Array}\n       */\n      data: null,\n      /**\n       * scales of chart\n       * @type {Object}\n       */\n      scales: {},\n      /**\n       * @private\n       * geometry instances\n       * @type {Array}\n       */\n      geoms: [],\n      /**\n       * scale configuration\n       * @type {Object}\n       */\n      colDefs: null,\n      pixelRatio: Global.pixelRatio,\n      /**\n       * filter options\n       * @type {Object}\n       */\n      filters: null,\n      appendPadding: Global.appendPadding\n    };\n  }\n\n  _syncYScales() {\n    const syncY = this.get('syncY');\n    if (!syncY) {\n      return;\n    }\n    const geoms = this.get('geoms');\n    const syncScales = [];\n    let min = [];\n    let max = [];\n    Util.each(geoms, geom => {\n      const yScale = geom.getYScale();\n      if (yScale.isLinear) {\n        syncScales.push(yScale);\n        min.push(yScale.min);\n        max.push(yScale.max);\n      }\n    });\n\n    min = Math.min.apply(null, min);\n    max = Math.max.apply(null, max);\n\n    Util.each(syncScales, scale => {\n      scale.change({ min });\n      scale.change({ max });\n    });\n  }\n\n  _getFieldsForLegend() {\n    const fields = [];\n    const geoms = this.get('geoms');\n    Util.each(geoms, geom => {\n      const attrOptions = geom.get('attrOptions');\n      const attrCfg = attrOptions.color;\n      if (attrCfg && attrCfg.field && Util.isString(attrCfg.field)) {\n        const arr = attrCfg.field.split('*');\n\n        Util.each(arr, item => {\n          if (fields.indexOf(item) === -1) {\n            fields.push(item);\n          }\n        });\n      }\n    });\n    return fields;\n  }\n\n  _getScaleData(field) {\n    let data = this.get('data');\n    const filteredData = this.get('filteredData');\n    if (filteredData.length) {\n      const legendFields = this._getFieldsForLegend();\n      if (legendFields.indexOf(field) === -1) {\n        data = filteredData;\n      }\n    }\n    return data;\n  }\n\n  _updateScales() {\n    const scaleController = this.get('scaleController');\n    scaleController.updateScales();\n    this._adjustScale();\n  }\n\n  _adjustScale() {\n    const self = this;\n    const scaleController = self.get('scaleController');\n    // 看起来是为了让柱状图最小或最大都默认从0开始\n    const geoms = this.get('geoms');\n    for (let i = 0; i < geoms.length; i++) {\n      const geom = geoms[i];\n      if (geom.get('type') === 'interval') {\n        const yScale = geom.getYScale();\n        scaleController.adjustStartZero(yScale);\n      }\n    }\n  }\n\n  _removeGeoms() {\n    const geoms = this.get('geoms');\n    while (geoms.length > 0) {\n      const geom = geoms.shift();\n      geom.destroy();\n    }\n  }\n\n  _clearGeoms() {\n    const geoms = this.get('geoms');\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      const geom = geoms[i];\n      geom.clear();\n    }\n  }\n\n  _clearInner() {\n    this._clearGeoms();\n    Chart.plugins.notify(this, 'clearInner');\n    this.get('axisController') && this.get('axisController').clear();\n  }\n\n  _initFilteredData() {\n    const filters = this.get('filters');\n    let data = this.get('data') || [];\n    if (filters) {\n      data = data.filter(function(obj) {\n        let rst = true;\n        Util.each(filters, function(fn, k) {\n          if (fn) {\n            rst = fn(obj[k], obj);\n            if (!rst) {\n              return false;\n            }\n          }\n        });\n        return rst;\n      });\n    }\n    this.set('filteredData', data);\n  }\n\n  _changeGeomsData() {\n    const geoms = this.get('geoms');\n    const data = this.get('filteredData');\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      const geom = geoms[i];\n      geom.changeData(data);\n    }\n  }\n\n  _initGeom(geom) {\n    const coord = this.get('coord');\n    const data = this.get('filteredData');\n    const colDefs = this.get('colDefs');\n    const middlePlot = this.get('middlePlot');\n    geom.set('chart', this);\n    geom.set('container', middlePlot.addGroup());\n    geom.set('data', data);\n    geom.set('coord', coord);\n    geom.set('colDefs', colDefs);\n    geom.init();\n    this.emit(EVENT_AFTER_GEOM_INIT, geom);\n  }\n\n  _initGeoms() {\n    const geoms = this.get('geoms');\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      this._initGeom(geoms[i]);\n    }\n  }\n\n  _initCoord() {\n    const plot = this.get('plotRange');\n    const coordCfg = Util.mix({\n      type: 'cartesian'\n    }, this.get('coordCfg'), {\n      plot\n    });\n    const type = coordCfg.type;\n    const C = Coord[Util.upperFirst(type)];\n    const coord = new C(coordCfg);\n    this.set('coord', coord);\n  }\n\n  _initLayout() {\n    let padding = this.get('_padding');\n    if (!padding) {\n      padding = this.get('margin') || this.get('padding');\n      padding = Util.parsePadding(padding);\n    }\n\n    const top = padding[0] === 'auto' ? 0 : padding[0];\n    const right = padding[1] === 'auto' ? 0 : padding[1];\n    const bottom = padding[2] === 'auto' ? 0 : padding[2];\n    const left = padding[3] === 'auto' ? 0 : padding[3];\n\n    const width = this.get('width');\n    const height = this.get('height');\n\n    const start = {\n      x: left,\n      y: top\n    };\n    const end = {\n      x: width - right,\n      y: height - bottom\n    };\n    const plot = this.get('plot');\n    if (plot) {\n      plot.reset(start, end);\n      return;\n    }\n    const newPlot = new Plot({\n      start,\n      end\n    });\n    this.set('plotRange', newPlot);\n    this.set('plot', newPlot);\n  }\n\n  _initCanvas() {\n    const self = this;\n    try {\n      const canvas = new Canvas({\n        el: self.get('el') || self.get('id'),\n        context: self.get('context'),\n        pixelRatio: self.get('pixelRatio'),\n        width: self.get('width'),\n        height: self.get('height'),\n        fontFamily: Global.fontFamily\n      });\n      self.set('canvas', canvas);\n      self.set('el', canvas.get('el'));\n      self.set('width', canvas.get('width'));\n      self.set('height', canvas.get('height'));\n    } catch (error) {\n      throw error;\n    }\n    Chart.plugins.notify(self, 'afterCanvasInit');\n  }\n\n  _initLayers() {\n    const canvas = this.get('canvas');\n    this.set('backPlot', canvas.addGroup());\n    this.set('middlePlot', canvas.addGroup({\n      zIndex: 10\n    }));\n    this.set('frontPlot', canvas.addGroup({\n      zIndex: 20\n    }));\n  }\n\n  _initEvents() {\n    // 数据更新后的一些更新\n    this.on(EVENT_AFTER_DATA_CHANGE, () => {\n      // 数据更新后，重新设置filterdata\n      this._initFilteredData();\n\n      // 要重新计算scale的value值\n      this._updateScales();\n\n      // 更新geoms里的数据\n      this._changeGeomsData();\n    });\n\n    // 大小变化后的一些更新\n    this.on(EVENT_AFTER_SIZE_CHANGE, () => {\n      this._initLayout();\n\n      // layout变化后，坐标轴也需要做相应的变化\n      const coord = this.get('coord');\n      if (coord) {\n        coord.reset(this.get('plot'));\n      }\n    });\n  }\n\n  _initScaleController() {\n    const scaleController = new ScaleController({\n      chart: this\n    });\n    // 让colDefs 和 scaleController.defs 用同一个对象，这样就不用考虑同步的问题\n    this.set('colDefs', scaleController.defs);\n    // 已经实例化的scales 也保持统一个对象\n    this.set('scales', scaleController.scales);\n    this.set('scaleController', scaleController);\n  }\n\n  _clearScaleController() {\n    const scaleController = this.get('scaleController');\n    scaleController.clear();\n  }\n\n  _init() {\n    const self = this;\n    self._initCanvas();\n    self._initLayout();\n    self._initLayers();\n    self._initEvents();\n    self._initScaleController();\n    self.set('axisController', new AxisController({\n      frontPlot: self.get('frontPlot').addGroup({\n        className: 'axisContainer'\n      }),\n      backPlot: self.get('backPlot').addGroup({\n        className: 'axisContainer'\n      }),\n      chart: self\n    }));\n    Chart.plugins.notify(self, 'init');\n  }\n\n  constructor(cfg) {\n    super(cfg);\n    const self = this;\n    Util.each(Geom, function(geomConstructor, className) {\n      const methodName = Util.lowerFirst(className);\n      self[methodName] = function(cfg) {\n        const geom = new geomConstructor(cfg);\n        self.addGeom(geom);\n        return geom;\n      };\n    });\n    self._init();\n  }\n\n  init() {\n    // 初始filterData\n    this._initFilteredData();\n    // initialization coordinate instance\n    this._initCoord();\n\n    Chart.plugins.notify(this, 'beforeGeomInit');\n    // init all geometry instances\n    this._initGeoms();\n    // 多 Y 轴的情况时，统一 Y 轴的数值范围。\n    this._syncYScales();\n    // do some adjust for data\n    this._adjustScale();\n  }\n\n  /**\n   * set data and some scale configuration\n   * @chainable\n   * @param  {Array} data the dataset to visualize\n   * @param  {Object} colDefs the configuration for scales\n   * @return {Chart} return the chart instance\n   */\n  source(data, colDefs) {\n    this.set('data', data);\n    if (colDefs) {\n      this.scale(colDefs);\n    }\n    return this;\n  }\n\n  scale(field, cfg) {\n    const scaleController = this.get('scaleController');\n    scaleController.setFieldDef(field, cfg);\n\n    return this;\n  }\n\n  /**\n   * configure the axis\n   * @chainable\n   * @param  {String|Boolean} field the field name of data\n   * @param  {Object} cfg configuration for axis\n   * @return {Chart} return the chart instance\n   */\n  axis(field, cfg) {\n    const axisController = this.get('axisController');\n    if (!field) {\n      axisController.axisCfg = null;\n    } else {\n      axisController.axisCfg = axisController.axisCfg || {};\n      axisController.axisCfg[field] = cfg;\n    }\n    return this;\n  }\n\n  /**\n   * configure the coordinate\n   * @chainable\n   * @param  {String} type set the type of coodinate\n   * @param  {Object} cfg configuration for coordinate\n   * @return {Chart} return the chart instance\n   */\n  coord(type, cfg) {\n    let coordCfg;\n    if (Util.isObject(type)) {\n      coordCfg = type;\n    } else {\n      coordCfg = cfg || {};\n      coordCfg.type = type || 'cartesian';\n    }\n    this.set('coordCfg', coordCfg);\n    return this;\n  }\n\n  filter(field, condition) {\n    const filters = this.get('filters') || {};\n    filters[field] = condition;\n    this.set('filters', filters);\n\n    // 如果已经render过，则再重新触发一次change\n    if (this.get('rendered')) {\n      this.emit(EVENT_AFTER_DATA_CHANGE, this.get('data'));\n    }\n  }\n\n  /**\n   * render the chart\n   * @chainable\n   * @return {Chart} return the chart instance\n   */\n  render() {\n    const rendered = this.get('rendered');\n    const canvas = this.get('canvas');\n    const geoms = this.get('geoms');\n\n    if (!rendered) {\n      this.init();\n      this.set('rendered', true);\n    }\n    this.emit(EVENT_BEFORE_RENDER);\n\n    Chart.plugins.notify(this, 'beforeGeomDraw');\n    this._renderAxis();\n\n    const middlePlot = this.get('middlePlot');\n    if (this.get('limitInPlot') && !middlePlot.attr('clip')) {\n      const coord = this.get('coord');\n      const clip = Helper.getClip(coord);\n      clip.set('canvas', middlePlot.get('canvas'));\n      middlePlot.attr('clip', clip);\n    }\n\n    for (let i = 0, length = geoms.length; i < length; i++) {\n      const geom = geoms[i];\n      geom.paint();\n    }\n\n    Chart.plugins.notify(this, 'afterGeomDraw');\n    canvas.sort();\n    this.get('frontPlot').sort();\n    Chart.plugins.notify(this, 'beforeCanvasDraw');\n    canvas.draw();\n\n    this.emit(EVENT_AFTER_RENDER);\n    return this;\n  }\n\n  /**\n   * clear the chart, include geometris and all the shapes\n   * @chainable\n   * @return {Chart} return the chart\n   */\n  clear() {\n    Chart.plugins.notify(this, 'clear');\n    this._clearInner();\n    this._removeGeoms();\n    this._clearScaleController();\n    this.set('legendItems', null);\n    this.set('filters', null);\n    this.set('isUpdate', false);\n    this.set('_padding', null);\n    this.set('rendered', false);\n    const canvas = this.get('canvas');\n    canvas.draw();\n    return this;\n  }\n\n  repaint() {\n    this.set('isUpdate', true);\n    this.set('legendItems', null);\n    Chart.plugins.notify(this, 'repaint');\n    this._clearInner();\n    this.render();\n  }\n\n  changeData(data) {\n    this.emit(EVENT_BEFORE_DATA_CHANGE, data);\n    this.set('data', data);\n    Chart.plugins.notify(this, 'changeData');\n    this.emit(EVENT_AFTER_DATA_CHANGE, data);\n    this.set('_padding', null);\n    this.repaint();\n  }\n\n  changeSize(width, height) {\n    if (width) {\n      this.set('width', width);\n    } else {\n      width = this.get('width');\n    }\n\n    if (height) {\n      this.set('height', height);\n    } else {\n      height = this.get('height');\n    }\n\n    const canvas = this.get('canvas');\n    canvas.changeSize(width, height);\n    this.emit(EVENT_AFTER_SIZE_CHANGE, { width, height });\n    this.repaint();\n    return this;\n  }\n\n  destroy() {\n    this.clear();\n    const canvas = this.get('canvas');\n    canvas.destroy();\n    Chart.plugins.notify(this, 'afterCanvasDestroyed');\n\n    if (this._interactions) {\n      Util.each(this._interactions, interaction => {\n        interaction.destroy();\n      });\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * calculate dataset's position on canvas\n   * @param  {Object} record the dataset\n   * @return {Object} return the position\n   */\n  getPosition(record) {\n    const self = this;\n    const coord = self.get('coord');\n    const xScale = self.getXScale();\n    const yScale = self.getYScales()[0];\n    const xField = xScale.field;\n    const x = xScale.scale(record[xField]);\n    const yField = yScale.field;\n    const y = yScale.scale(record[yField]);\n    return coord.convertPoint({\n      x,\n      y\n    });\n  }\n\n  /**\n   * get the data item of the point\n   * @param  {Object} point canvas position\n   * @return {Object} return the data item\n   */\n  getRecord(point) {\n    const self = this;\n    const coord = self.get('coord');\n    const xScale = self.getXScale();\n    const yScale = self.getYScales()[0];\n    const invertPoint = coord.invertPoint(point);\n    const record = {};\n    record[xScale.field] = xScale.invert(invertPoint.x);\n    record[yScale.field] = yScale.invert(invertPoint.y);\n    return record;\n  }\n  /**\n   * get the dataset of the point\n   * @param  {Object} point canvas position\n   * @return {Array} return the dataset\n  **/\n  getSnapRecords(point) {\n    const geom = this.get('geoms')[0];\n    let data = [];\n    if (geom) { // need to judge\n      data = geom.getSnapRecords(point);\n    }\n    return data;\n  }\n\n  /**\n   * creat scale instances\n   * @param  {String} field field name of data\n   * @return {Scale} return the scale\n   */\n  createScale(field) {\n    const data = this._getScaleData(field);\n    const scaleController = this.get('scaleController');\n    return scaleController.createScale(field, data);\n  }\n\n  /**\n   * @protected\n   * add geometry instance to geoms\n   * @param {Geom} geom geometry instance\n   */\n  addGeom(geom) {\n    const rendered = this.get('rendered');\n    const geoms = this.get('geoms');\n    geoms.push(geom);\n    // 如果图表已经渲染过了，则直接初始化geom\n    if (rendered) {\n      this._initGeom(geom);\n    }\n  }\n\n  /**\n   * get the scale of x axis\n   * @return {Scale} return the scale\n   */\n  getXScale() {\n    const self = this;\n    const geoms = self.get('geoms');\n    const xScale = geoms[0].getXScale();\n    return xScale;\n  }\n\n  /**\n   * get the scale of y axis\n   * @return {Array} return the scale\n   */\n  getYScales() {\n    const geoms = this.get('geoms');\n    const rst = [];\n\n    Util.each(geoms, function(geom) {\n      const yScale = geom.getYScale();\n      if (rst.indexOf(yScale) === -1) {\n        rst.push(yScale);\n      }\n    });\n    return rst;\n  }\n\n  getLegendItems() {\n    if (this.get('legendItems')) {\n      return this.get('legendItems');\n    }\n    const legendItems = {};\n    const scales = [];\n\n    const geoms = this.get('geoms');\n    Util.each(geoms, geom => {\n      const colorAttr = geom.getAttr('color');\n      if (colorAttr) {\n        const scale = colorAttr.getScale('color');\n        // 只支持分类图例\n        if (scale.isCategory && !_isScaleExist(scales, scale)) {\n          scales.push(scale);\n\n          const field = scale.field;\n          const ticks = scale.getTicks();\n          const items = [];\n          Util.each(ticks, tick => {\n            const text = tick.text;\n            const name = text;\n            const scaleValue = tick.value;\n            const value = scale.invert(scaleValue);\n            const color = colorAttr.mapping(value).join('') || Global.defaultColor;\n\n            const marker = {\n              fill: color,\n              radius: 3,\n              symbol: 'circle',\n              stroke: '#fff'\n            };\n\n            items.push({\n              name, // for display\n              dataValue: value, // the origin value\n              checked: true,\n              marker\n            });\n          });\n\n          legendItems[field] = items;\n        }\n      }\n    });\n\n    this.set('legendItems', legendItems);\n\n    return legendItems;\n  }\n\n  // register the plugins\n  registerPlugins(plugins) {\n    const self = this;\n    let chartPlugins = self.get('plugins') || [];\n    if (!Util.isArray(chartPlugins)) {\n      chartPlugins = [ chartPlugins ];\n    }\n\n    ([]).concat(plugins).forEach(plugin => {\n      if (chartPlugins.indexOf(plugin) === -1) {\n        plugin.init && plugin.init(self); // init\n        chartPlugins.push(plugin);\n      }\n    });\n    Chart.plugins._cacheId++;\n    self.set('plugins', chartPlugins);\n  }\n\n  _renderAxis() {\n    const axisController = this.get('axisController');\n    const xScale = this.getXScale();\n    const yScales = this.getYScales();\n    const coord = this.get('coord');\n    Chart.plugins.notify(this, 'beforeRenderAxis');\n    axisController.createAxis(coord, xScale, yScales);\n  }\n\n  _isAutoPadding() {\n    if (this.get('_padding')) {\n      return false;\n    }\n    const padding = this.get('padding');\n    if (Util.isArray(padding)) {\n      return padding.indexOf('auto') !== -1;\n    }\n    return padding === 'auto';\n  }\n\n  _updateLayout(padding) {\n    const width = this.get('width');\n    const height = this.get('height');\n    const start = {\n      x: padding[3],\n      y: padding[0]\n    };\n    const end = {\n      x: width - padding[1],\n      y: height - padding[2]\n    };\n\n    const plot = this.get('plot');\n    const coord = this.get('coord');\n    plot.reset(start, end);\n    coord.reset(plot);\n  }\n}\n\nChart.plugins = Chart.initPlugins();\n\nmodule.exports = Chart;\n"]},"metadata":{},"sourceType":"module"}