{"ast":null,"code":"// 实现简单的事件机制\nimport { isObject } from '../../util/common';\n\nclass EventEmit {\n  constructor() {\n    this.__events = {};\n  }\n\n  on(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n\n    const events = this.__events[type] || [];\n    events.push(listener);\n    this.__events[type] = events;\n  }\n\n  emit(type, e) {\n    if (isObject(type)) {\n      e = type;\n      type = e && e.type;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const events = this.__events[type];\n\n    if (!events || !events.length) {\n      return;\n    }\n\n    events.forEach(listener => {\n      listener.call(this, e);\n    });\n  }\n\n  off(type, listener) {\n    const __events = this.__events;\n    const events = __events[type];\n\n    if (!events || !events.length) {\n      return;\n    } // 如果没有指定方法，则删除所有项\n\n\n    if (!listener) {\n      delete events[type];\n      return;\n    } // 删除指定的 listener\n\n\n    for (let i = 0, len = events.length; i < len; i++) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n      }\n    }\n  }\n\n}\n\nexport default EventEmit;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/event/emit.js"],"names":["isObject","EventEmit","constructor","__events","on","type","listener","events","push","emit","e","length","forEach","call","off","i","len","splice"],"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAEDC,EAAAA,EAAE,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACjB,QAAI,CAACD,IAAD,IAAS,CAACC,QAAd,EAAwB;AACtB;AACD;;AACD,UAAMC,MAAM,GAAG,KAAKJ,QAAL,CAAcE,IAAd,KAAuB,EAAtC;AACAE,IAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ;AACA,SAAKH,QAAL,CAAcE,IAAd,IAAsBE,MAAtB;AACD;;AACDE,EAAAA,IAAI,CAACJ,IAAD,EAAOK,CAAP,EAAU;AACZ,QAAIV,QAAQ,CAACK,IAAD,CAAZ,EAAoB;AAClBK,MAAAA,CAAC,GAAGL,IAAJ;AACAA,MAAAA,IAAI,GAAGK,CAAC,IAAIA,CAAC,CAACL,IAAd;AACD;;AACD,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AACD,UAAME,MAAM,GAAG,KAAKJ,QAAL,CAAcE,IAAd,CAAf;;AACA,QAAI,CAACE,MAAD,IAAW,CAACA,MAAM,CAACI,MAAvB,EAA+B;AAC7B;AACD;;AACDJ,IAAAA,MAAM,CAACK,OAAP,CAAeN,QAAQ,IAAI;AACzBA,MAAAA,QAAQ,CAACO,IAAT,CAAc,IAAd,EAAoBH,CAApB;AACD,KAFD;AAGD;;AACDI,EAAAA,GAAG,CAACT,IAAD,EAAOC,QAAP,EAAiB;AAClB,UAAMH,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMI,MAAM,GAAGJ,QAAQ,CAACE,IAAD,CAAvB;;AACA,QAAI,CAACE,MAAD,IAAW,CAACA,MAAM,CAACI,MAAvB,EAA+B;AAC7B;AACD,KALiB,CAMlB;;;AACA,QAAI,CAACL,QAAL,EAAe;AACb,aAAOC,MAAM,CAACF,IAAD,CAAb;AACA;AACD,KAViB,CAWlB;;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGT,MAAM,CAACI,MAA7B,EAAqCI,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,UAAIR,MAAM,CAACQ,CAAD,CAAN,KAAcT,QAAlB,EAA4B;AAC1BC,QAAAA,MAAM,CAACU,MAAP,CAAcF,CAAd,EAAiB,CAAjB;AACD;AACF;AACF;;AA9Ca;;AAiDhB,eAAed,SAAf","sourcesContent":["// 实现简单的事件机制\nimport { isObject } from '../../util/common';\n\nclass EventEmit {\n  constructor() {\n    this.__events = {};\n  }\n\n  on(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const events = this.__events[type] || [];\n    events.push(listener);\n    this.__events[type] = events;\n  }\n  emit(type, e) {\n    if (isObject(type)) {\n      e = type;\n      type = e && e.type;\n    }\n    if (!type) {\n      return;\n    }\n    const events = this.__events[type];\n    if (!events || !events.length) {\n      return;\n    }\n    events.forEach(listener => {\n      listener.call(this, e);\n    });\n  }\n  off(type, listener) {\n    const __events = this.__events;\n    const events = __events[type];\n    if (!events || !events.length) {\n      return;\n    }\n    // 如果没有指定方法，则删除所有项\n    if (!listener) {\n      delete events[type];\n      return;\n    }\n    // 删除指定的 listener\n    for (let i = 0, len = events.length; i < len; i++) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n      }\n    }\n  }\n}\n\nexport default EventEmit;\n"]},"metadata":{},"sourceType":"module"}