{"ast":null,"code":"/**\n * 2 Dimensional Vector\n * @module vector2\n */\nmodule.exports = {\n  /**\n   * Creates a new, empty vector2\n   *\n   * @return {vector2} a new 2D vector\n   */\n  create() {\n    return [0, 0];\n  },\n\n  /**\n   * Calculates the length of a vector2\n   *\n   * @param {vector2} v vector to calculate length of\n   * @return {Number} length of v\n   */\n  length(v) {\n    const x = v[0];\n    const y = v[1];\n    return Math.sqrt(x * x + y * y);\n  },\n\n  /**\n   * Normalize a vector2\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v vector to normalize\n   * @return {vector2} out\n   */\n  normalize(out, v) {\n    const len = this.length(v);\n\n    if (len === 0) {\n      out[0] = 0;\n      out[1] = 0;\n    } else {\n      out[0] = v[0] / len;\n      out[1] = v[1] / len;\n    }\n\n    return out;\n  },\n\n  /**\n   * Adds two vector2's\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  add(out, v1, v2) {\n    out[0] = v1[0] + v2[0];\n    out[1] = v1[1] + v2[1];\n    return out;\n  },\n\n  /**\n   * Subtracts vector v2 from vector v1\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    return out;\n  },\n\n  /**\n   * Scales a vector2 by a scalar number\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v the vector to scale\n   * @param {Number} s amount to scale the vector by\n   * @return {vector2} out\n   */\n  scale(out, v, s) {\n    out[0] = v[0] * s;\n    out[1] = v[1] * s;\n    return out;\n  },\n\n  /**\n   * Calculates the dot product of two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Number} dot product of v1 and v2\n   */\n  dot(v1, v2) {\n    return v1[0] * v2[0] + v1[1] * v2[1];\n  },\n\n  /**\n   * Calculates the direction of two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Boolean} the direction of v1 and v2\n   */\n  direction(v1, v2) {\n    return v1[0] * v2[1] - v2[0] * v1[1];\n  },\n\n  /**\n   * Calculates the angle of two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Number} angle of v1 and v2\n   */\n  angle(v1, v2) {\n    const theta = this.dot(v1, v2) / (this.length(v1) * this.length(v2));\n    return Math.acos(theta);\n  },\n\n  /**\n   * Calculates the angle of two vector2's with direction\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @param {Boolean} direction the direction of two vector2's\n   * @return {Number} angle of v1 and v2\n   */\n  angleTo(v1, v2, direction) {\n    const angle = this.angle(v1, v2);\n    const angleLargeThanPI = this.direction(v1, v2) >= 0;\n\n    if (direction) {\n      if (angleLargeThanPI) {\n        return Math.PI * 2 - angle;\n      }\n\n      return angle;\n    }\n\n    if (angleLargeThanPI) {\n      return angle;\n    }\n\n    return Math.PI * 2 - angle;\n  },\n\n  /**\n   * whether a vector2 is zero vector\n   *\n   * @param  {vector2} v vector to calculate\n   * @return {Boolean}   is or not a zero vector\n   */\n  zero(v) {\n    return v[0] === 0 && v[1] === 0;\n  },\n\n  /**\n   * Calculates the euclidian distance between two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Number} distance between a and b\n   */\n  distance(v1, v2) {\n    const x = v2[0] - v1[0];\n    const y = v2[1] - v1[1];\n    return Math.sqrt(x * x + y * y);\n  },\n\n  /**\n   * Creates a new vector2 initialized with values from an existing vector\n   *\n   * @param {vector2} v vector to clone\n   * @return {Array} a new 2D vector\n   */\n  clone(v) {\n    return [v[0], v[1]];\n  },\n\n  /**\n   * Return the minimum of two vector2's\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  min(out, v1, v2) {\n    out[0] = Math.min(v1[0], v2[0]);\n    out[1] = Math.min(v1[1], v2[1]);\n    return out;\n  },\n\n  /**\n   * Return the maximum of two vector2's\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  max(out, v1, v2) {\n    out[0] = Math.max(v1[0], v2[0]);\n    out[1] = Math.max(v1[1], v2[1]);\n    return out;\n  },\n\n  /**\n   * Transforms the vector2 with a mat2d\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v the vector to transform\n   * @param {mat2d} m matrix to transform with\n   * @return {vector2} out\n   */\n  transformMat2d(out, v, m) {\n    const x = v[0];\n    const y = v[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n  }\n\n};","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/graphic/util/vector2.js"],"names":["module","exports","create","length","v","x","y","Math","sqrt","normalize","out","len","add","v1","v2","sub","scale","s","dot","direction","angle","theta","acos","angleTo","angleLargeThanPI","PI","zero","distance","clone","min","max","transformMat2d","m"],"mappings":"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","sourcesContent":["/**\n * 2 Dimensional Vector\n * @module vector2\n */\nmodule.exports = {\n  /**\n   * Creates a new, empty vector2\n   *\n   * @return {vector2} a new 2D vector\n   */\n  create() {\n    return [ 0, 0 ];\n  },\n  /**\n   * Calculates the length of a vector2\n   *\n   * @param {vector2} v vector to calculate length of\n   * @return {Number} length of v\n   */\n  length(v) {\n    const x = v[0];\n    const y = v[1];\n    return Math.sqrt(x * x + y * y);\n  },\n  /**\n   * Normalize a vector2\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v vector to normalize\n   * @return {vector2} out\n   */\n  normalize(out, v) {\n    const len = this.length(v);\n    if (len === 0) {\n      out[0] = 0;\n      out[1] = 0;\n    } else {\n      out[0] = v[0] / len;\n      out[1] = v[1] / len;\n    }\n\n    return out;\n  },\n  /**\n   * Adds two vector2's\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  add(out, v1, v2) {\n    out[0] = v1[0] + v2[0];\n    out[1] = v1[1] + v2[1];\n    return out;\n  },\n  /**\n   * Subtracts vector v2 from vector v1\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    return out;\n  },\n  /**\n   * Scales a vector2 by a scalar number\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v the vector to scale\n   * @param {Number} s amount to scale the vector by\n   * @return {vector2} out\n   */\n  scale(out, v, s) {\n    out[0] = v[0] * s;\n    out[1] = v[1] * s;\n    return out;\n  },\n  /**\n   * Calculates the dot product of two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Number} dot product of v1 and v2\n   */\n  dot(v1, v2) {\n    return v1[0] * v2[0] + v1[1] * v2[1];\n  },\n  /**\n   * Calculates the direction of two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Boolean} the direction of v1 and v2\n   */\n  direction(v1, v2) {\n    return v1[0] * v2[1] - v2[0] * v1[1];\n  },\n  /**\n   * Calculates the angle of two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Number} angle of v1 and v2\n   */\n  angle(v1, v2) {\n    const theta = this.dot(v1, v2) / (this.length(v1) * this.length(v2));\n    return Math.acos(theta);\n  },\n  /**\n   * Calculates the angle of two vector2's with direction\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @param {Boolean} direction the direction of two vector2's\n   * @return {Number} angle of v1 and v2\n   */\n  angleTo(v1, v2, direction) {\n    const angle = this.angle(v1, v2);\n    const angleLargeThanPI = this.direction(v1, v2) >= 0;\n    if (direction) {\n      if (angleLargeThanPI) {\n        return Math.PI * 2 - angle;\n      }\n\n      return angle;\n    }\n\n    if (angleLargeThanPI) {\n      return angle;\n    }\n    return Math.PI * 2 - angle;\n  },\n  /**\n   * whether a vector2 is zero vector\n   *\n   * @param  {vector2} v vector to calculate\n   * @return {Boolean}   is or not a zero vector\n   */\n  zero(v) {\n    return v[0] === 0 && v[1] === 0;\n  },\n  /**\n   * Calculates the euclidian distance between two vector2's\n   *\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {Number} distance between a and b\n   */\n  distance(v1, v2) {\n    const x = v2[0] - v1[0];\n    const y = v2[1] - v1[1];\n    return Math.sqrt(x * x + y * y);\n  },\n  /**\n   * Creates a new vector2 initialized with values from an existing vector\n   *\n   * @param {vector2} v vector to clone\n   * @return {Array} a new 2D vector\n   */\n  clone(v) {\n    return [ v[0], v[1] ];\n  },\n  /**\n   * Return the minimum of two vector2's\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  min(out, v1, v2) {\n    out[0] = Math.min(v1[0], v2[0]);\n    out[1] = Math.min(v1[1], v2[1]);\n    return out;\n  },\n  /**\n   * Return the maximum of two vector2's\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v1 the first operand\n   * @param {vector2} v2 the second operand\n   * @return {vector2} out\n   */\n  max(out, v1, v2) {\n    out[0] = Math.max(v1[0], v2[0]);\n    out[1] = Math.max(v1[1], v2[1]);\n    return out;\n  },\n  /**\n   * Transforms the vector2 with a mat2d\n   *\n   * @param {vector2} out the receiving vector\n   * @param {vector2} v the vector to transform\n   * @param {mat2d} m matrix to transform with\n   * @return {vector2} out\n   */\n  transformMat2d(out, v, m) {\n    const x = v[0];\n    const y = v[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}