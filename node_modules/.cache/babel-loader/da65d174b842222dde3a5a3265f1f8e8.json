{"ast":null,"code":"const Util = require('../../util/common');\n\nconst GuideBase = require('./base');\n\nclass Arc extends GuideBase {\n  _initDefaultCfg() {\n    this.type = 'arc';\n    /**\n     * start point\n     * @type {Array | Function}\n     */\n\n    this.start = [];\n    /**\n     * end point\n     * @type {Array | Function}\n     */\n\n    this.end = [];\n    /**\n     * style configuration\n     * @type {Object}\n     */\n\n    this.style = {\n      stroke: '#999',\n      lineWidth: 1\n    };\n  }\n\n  render(coord, container) {\n    const self = this;\n    const start = self.parsePoint(coord, self.start);\n    const end = self.parsePoint(coord, self.end);\n\n    if (!start || !end) {\n      return;\n    }\n\n    const coordCenter = coord.center;\n    const radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x) + (start.y - coordCenter.y) * (start.y - coordCenter.y));\n    const startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);\n    const endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);\n    const shape = container.addShape('arc', {\n      className: 'guide-arc',\n      attrs: Util.mix({\n        x: coordCenter.x,\n        y: coordCenter.y,\n        r: radius,\n        startAngle,\n        endAngle\n      }, self.style)\n    });\n    self.element = shape;\n    return shape;\n  }\n\n}\n\nGuideBase.Arc = Arc;\nmodule.exports = Arc;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/guide/arc.js"],"names":["Util","require","GuideBase","Arc","_initDefaultCfg","type","start","end","style","stroke","lineWidth","render","coord","container","self","parsePoint","coordCenter","center","radius","Math","sqrt","x","y","startAngle","atan2","endAngle","shape","addShape","className","attrs","mix","r","element","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,QAAD,CAAzB;;AAEA,MAAME,GAAN,SAAkBD,SAAlB,CAA4B;AAC1BE,EAAAA,eAAe,GAAG;AAChB,SAAKC,IAAL,GAAY,KAAZ;AACA;;;;;AAIA,SAAKC,KAAL,GAAa,EAAb;AACA;;;;;AAIA,SAAKC,GAAL,GAAW,EAAX;AACA;;;;;AAIA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,MADG;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAQC,SAAR,EAAmB;AACvB,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMR,KAAK,GAAGQ,IAAI,CAACC,UAAL,CAAgBH,KAAhB,EAAuBE,IAAI,CAACR,KAA5B,CAAd;AACA,UAAMC,GAAG,GAAGO,IAAI,CAACC,UAAL,CAAgBH,KAAhB,EAAuBE,IAAI,CAACP,GAA5B,CAAZ;;AACA,QAAI,CAACD,KAAD,IAAU,CAACC,GAAf,EAAoB;AAClB;AACD;;AACD,UAAMS,WAAW,GAAGJ,KAAK,CAACK,MAA1B;AACA,UAAMC,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACd,KAAK,CAACe,CAAN,GAAUL,WAAW,CAACK,CAAvB,KAA6Bf,KAAK,CAACe,CAAN,GAAUL,WAAW,CAACK,CAAnD,IACrB,CAACf,KAAK,CAACgB,CAAN,GAAUN,WAAW,CAACM,CAAvB,KAA6BhB,KAAK,CAACgB,CAAN,GAAUN,WAAW,CAACM,CAAnD,CADW,CAAf;AAEA,UAAMC,UAAU,GAAGJ,IAAI,CAACK,KAAL,CAAWlB,KAAK,CAACgB,CAAN,GAAUN,WAAW,CAACM,CAAjC,EAAoChB,KAAK,CAACe,CAAN,GAAUL,WAAW,CAACK,CAA1D,CAAnB;AACA,UAAMI,QAAQ,GAAGN,IAAI,CAACK,KAAL,CAAWjB,GAAG,CAACe,CAAJ,GAAQN,WAAW,CAACM,CAA/B,EAAkCf,GAAG,CAACc,CAAJ,GAAQL,WAAW,CAACK,CAAtD,CAAjB;AACA,UAAMK,KAAK,GAAGb,SAAS,CAACc,QAAV,CAAmB,KAAnB,EAA0B;AACtCC,MAAAA,SAAS,EAAE,WAD2B;AAEtCC,MAAAA,KAAK,EAAE7B,IAAI,CAAC8B,GAAL,CAAS;AACdT,QAAAA,CAAC,EAAEL,WAAW,CAACK,CADD;AAEdC,QAAAA,CAAC,EAAEN,WAAW,CAACM,CAFD;AAGdS,QAAAA,CAAC,EAAEb,MAHW;AAIdK,QAAAA,UAJc;AAKdE,QAAAA;AALc,OAAT,EAMJX,IAAI,CAACN,KAND;AAF+B,KAA1B,CAAd;AAUAM,IAAAA,IAAI,CAACkB,OAAL,GAAeN,KAAf;AACA,WAAOA,KAAP;AACD;;AA/CyB;;AAkD5BxB,SAAS,CAACC,GAAV,GAAgBA,GAAhB;AACA8B,MAAM,CAACC,OAAP,GAAiB/B,GAAjB","sourcesContent":["const Util = require('../../util/common');\nconst GuideBase = require('./base');\n\nclass Arc extends GuideBase {\n  _initDefaultCfg() {\n    this.type = 'arc';\n    /**\n     * start point\n     * @type {Array | Function}\n     */\n    this.start = [];\n    /**\n     * end point\n     * @type {Array | Function}\n     */\n    this.end = [];\n    /**\n     * style configuration\n     * @type {Object}\n     */\n    this.style = {\n      stroke: '#999',\n      lineWidth: 1\n    };\n  }\n\n  render(coord, container) {\n    const self = this;\n    const start = self.parsePoint(coord, self.start);\n    const end = self.parsePoint(coord, self.end);\n    if (!start || !end) {\n      return;\n    }\n    const coordCenter = coord.center;\n    const radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x)\n      + (start.y - coordCenter.y) * (start.y - coordCenter.y));\n    const startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);\n    const endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);\n    const shape = container.addShape('arc', {\n      className: 'guide-arc',\n      attrs: Util.mix({\n        x: coordCenter.x,\n        y: coordCenter.y,\n        r: radius,\n        startAngle,\n        endAngle\n      }, self.style)\n    });\n    self.element = shape;\n    return shape;\n  }\n}\n\nGuideBase.Arc = Arc;\nmodule.exports = Arc;\n"]},"metadata":{},"sourceType":"script"}