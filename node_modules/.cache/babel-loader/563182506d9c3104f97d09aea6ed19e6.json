{"ast":null,"code":"const Util = require('../../util/common');\n\nconst GuideBase = require('./base');\n\nclass Text extends GuideBase {\n  _initDefaultCfg() {\n    this.type = 'text';\n    /**\n     * the position of text\n     * @type {Function | Array}\n     */\n\n    this.position = null;\n    /**\n     * the display content\n     * @type {String}\n     */\n\n    this.content = null;\n    /**\n     * style configuration for text\n     * @type {Object}\n     */\n\n    this.style = {\n      fill: '#000'\n    };\n    /**\n     * offset of horizontal direction\n     * @type {Number}\n     */\n\n    this.offsetX = 0;\n    /**\n     * offset of vertical direction\n     * @type {Number}\n     */\n\n    this.offsetY = 0;\n  }\n\n  render(coord, container) {\n    const position = this.position;\n    const point = this.parsePoint(coord, position);\n\n    if (!point) {\n      return;\n    }\n\n    const {\n      content,\n      style,\n      offsetX,\n      offsetY\n    } = this;\n\n    if (offsetX) {\n      point.x += offsetX;\n    }\n\n    if (offsetY) {\n      point.y += offsetY;\n    }\n\n    const shape = container.addShape('text', {\n      className: 'guide-text',\n      attrs: Util.mix({\n        x: point.x,\n        y: point.y,\n        text: content\n      }, style)\n    });\n    this.element = shape;\n    return shape;\n  }\n\n}\n\nGuideBase.Text = Text;\nmodule.exports = Text;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/component/guide/text.js"],"names":["Util","require","GuideBase","Text","_initDefaultCfg","type","position","content","style","fill","offsetX","offsetY","render","coord","container","point","parsePoint","x","y","shape","addShape","className","attrs","mix","text","element","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,QAAD,CAAzB;;AAEA,MAAME,IAAN,SAAmBD,SAAnB,CAA6B;AAC3BE,EAAAA,eAAe,GAAG;AAChB,SAAKC,IAAL,GAAY,MAAZ;AACA;;;;;AAIA,SAAKC,QAAL,GAAgB,IAAhB;AACA;;;;;AAIA,SAAKC,OAAL,GAAe,IAAf;AACA;;;;;AAIA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGA;;;;;AAIA,SAAKC,OAAL,GAAe,CAAf;AACA;;;;;AAIA,SAAKC,OAAL,GAAe,CAAf;AACD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAQC,SAAR,EAAmB;AACvB,UAAMR,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMS,KAAK,GAAG,KAAKC,UAAL,CAAgBH,KAAhB,EAAuBP,QAAvB,CAAd;;AACA,QAAI,CAACS,KAAL,EAAY;AACV;AACD;;AACD,UAAM;AAAER,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBE,MAAAA,OAAlB;AAA2BC,MAAAA;AAA3B,QAAuC,IAA7C;;AAEA,QAAID,OAAJ,EAAa;AACXK,MAAAA,KAAK,CAACE,CAAN,IAAWP,OAAX;AACD;;AAED,QAAIC,OAAJ,EAAa;AACXI,MAAAA,KAAK,CAACG,CAAN,IAAWP,OAAX;AACD;;AAED,UAAMQ,KAAK,GAAGL,SAAS,CAACM,QAAV,CAAmB,MAAnB,EAA2B;AACvCC,MAAAA,SAAS,EAAE,YAD4B;AAEvCC,MAAAA,KAAK,EAAEtB,IAAI,CAACuB,GAAL,CAAS;AACdN,QAAAA,CAAC,EAAEF,KAAK,CAACE,CADK;AAEdC,QAAAA,CAAC,EAAEH,KAAK,CAACG,CAFK;AAGdM,QAAAA,IAAI,EAAEjB;AAHQ,OAAT,EAIJC,KAJI;AAFgC,KAA3B,CAAd;AAQA,SAAKiB,OAAL,GAAeN,KAAf;AACA,WAAOA,KAAP;AACD;;AA1D0B;;AA6D7BjB,SAAS,CAACC,IAAV,GAAiBA,IAAjB;AACAuB,MAAM,CAACC,OAAP,GAAiBxB,IAAjB","sourcesContent":["const Util = require('../../util/common');\nconst GuideBase = require('./base');\n\nclass Text extends GuideBase {\n  _initDefaultCfg() {\n    this.type = 'text';\n    /**\n     * the position of text\n     * @type {Function | Array}\n     */\n    this.position = null;\n    /**\n     * the display content\n     * @type {String}\n     */\n    this.content = null;\n    /**\n     * style configuration for text\n     * @type {Object}\n     */\n    this.style = {\n      fill: '#000'\n    };\n    /**\n     * offset of horizontal direction\n     * @type {Number}\n     */\n    this.offsetX = 0;\n    /**\n     * offset of vertical direction\n     * @type {Number}\n     */\n    this.offsetY = 0;\n  }\n\n  render(coord, container) {\n    const position = this.position;\n    const point = this.parsePoint(coord, position);\n    if (!point) {\n      return;\n    }\n    const { content, style, offsetX, offsetY } = this;\n\n    if (offsetX) {\n      point.x += offsetX;\n    }\n\n    if (offsetY) {\n      point.y += offsetY;\n    }\n\n    const shape = container.addShape('text', {\n      className: 'guide-text',\n      attrs: Util.mix({\n        x: point.x,\n        y: point.y,\n        text: content\n      }, style)\n    });\n    this.element = shape;\n    return shape;\n  }\n}\n\nGuideBase.Text = Text;\nmodule.exports = Text;\n"]},"metadata":{},"sourceType":"script"}