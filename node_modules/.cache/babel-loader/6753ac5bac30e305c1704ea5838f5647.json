{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar Adjust = require('./base');\n\nvar each = require('@antv/util/lib/each');\n\nvar MARGIN_RATIO = 1 / 2;\nvar DODGE_RATIO = 1 / 2;\n\nvar Dodge =\n/*#__PURE__*/\nfunction (_Adjust) {\n  _inheritsLoose(Dodge, _Adjust);\n\n  function Dodge() {\n    return _Adjust.apply(this, arguments) || this;\n  }\n\n  var _proto = Dodge.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    /**\n     * 调整过程中,2个数据的间距\n     * @type {Number}\n     */\n    this.marginRatio = MARGIN_RATIO;\n    /**\n     * 调整占单位宽度的比例,例如：占2个分类间距的 1/2\n     * @type {Number}\n     */\n\n    this.dodgeRatio = DODGE_RATIO;\n    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整\n  };\n\n  _proto.getDodgeOffset = function getDodgeOffset(range, index, count) {\n    var self = this;\n    var pre = range.pre;\n    var next = range.next;\n    var tickLength = next - pre;\n    var width = tickLength * self.dodgeRatio / count;\n    var margin = self.marginRatio * width;\n    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n    return (pre + next) / 2 + offset;\n  };\n\n  _proto.processAdjust = function processAdjust(dataArray) {\n    var self = this;\n    var count = dataArray.length;\n    var xField = self.xField;\n    each(dataArray, function (data, index) {\n      for (var i = 0, len = data.length; i < len; i++) {\n        var obj = data[i];\n        var value = obj[xField];\n        var range = {\n          pre: len === 1 ? value - 1 : value - 0.5,\n          next: len === 1 ? value + 1 : value + 0.5\n        };\n        var dodgeValue = self.getDodgeOffset(range, index, count);\n        obj[xField] = dodgeValue;\n      }\n    });\n  };\n\n  return Dodge;\n}(Adjust);\n\nAdjust.Dodge = Dodge;\nmodule.exports = Dodge;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_adjust@0.1.1@@antv/adjust/lib/dodge.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Adjust","require","each","MARGIN_RATIO","DODGE_RATIO","Dodge","_Adjust","apply","arguments","_proto","_initDefaultCfg","marginRatio","dodgeRatio","adjustNames","getDodgeOffset","range","index","count","self","pre","next","tickLength","width","margin","offset","processAdjust","dataArray","length","xField","data","i","len","obj","value","dodgeValue","module","exports"],"mappings":"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","sourcesContent":["function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar Adjust = require('./base');\n\nvar each = require('@antv/util/lib/each');\n\nvar MARGIN_RATIO = 1 / 2;\nvar DODGE_RATIO = 1 / 2;\n\nvar Dodge =\n/*#__PURE__*/\nfunction (_Adjust) {\n  _inheritsLoose(Dodge, _Adjust);\n\n  function Dodge() {\n    return _Adjust.apply(this, arguments) || this;\n  }\n\n  var _proto = Dodge.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    /**\n     * 调整过程中,2个数据的间距\n     * @type {Number}\n     */\n    this.marginRatio = MARGIN_RATIO;\n    /**\n     * 调整占单位宽度的比例,例如：占2个分类间距的 1/2\n     * @type {Number}\n     */\n\n    this.dodgeRatio = DODGE_RATIO;\n    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整\n  };\n\n  _proto.getDodgeOffset = function getDodgeOffset(range, index, count) {\n    var self = this;\n    var pre = range.pre;\n    var next = range.next;\n    var tickLength = next - pre;\n    var width = tickLength * self.dodgeRatio / count;\n    var margin = self.marginRatio * width;\n    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n    return (pre + next) / 2 + offset;\n  };\n\n  _proto.processAdjust = function processAdjust(dataArray) {\n    var self = this;\n    var count = dataArray.length;\n    var xField = self.xField;\n    each(dataArray, function (data, index) {\n      for (var i = 0, len = data.length; i < len; i++) {\n        var obj = data[i];\n        var value = obj[xField];\n        var range = {\n          pre: len === 1 ? value - 1 : value - 0.5,\n          next: len === 1 ? value + 1 : value + 0.5\n        };\n        var dodgeValue = self.getDodgeOffset(range, index, count);\n        obj[xField] = dodgeValue;\n      }\n    });\n  };\n\n  return Dodge;\n}(Adjust);\n\nAdjust.Dodge = Dodge;\nmodule.exports = Dodge;"]},"metadata":{},"sourceType":"script"}