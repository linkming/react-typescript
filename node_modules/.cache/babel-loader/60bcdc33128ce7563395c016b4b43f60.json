{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n/**\n * @fileOverview 时间数据作为分类类型\n * @author dxq613@gmail.com\n */\n\n\nvar Base = require('./base');\n\nvar Category = require('./category');\n\nvar fecha = require('fecha');\n\nvar catAuto = require('./auto/cat');\n\nvar TimeUtil = require('./time-util');\n\nvar each = require('@antv/util/lib/each');\n\nvar isNumber = require('@antv/util/lib/type/is-number');\n\nvar isObject = require('@antv/util/lib/type/is-object');\n\nvar isString = require('@antv/util/lib/type/is-string');\n/**\n * 度量的构造函数\n * @class Scale.TimeCategory\n */\n\n\nvar TimeCategory =\n/*#__PURE__*/\nfunction (_Category) {\n  _inheritsLoose(TimeCategory, _Category);\n\n  function TimeCategory() {\n    return _Category.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeCategory.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    _Category.prototype._initDefaultCfg.call(this);\n\n    this.type = 'timeCat';\n    /**\n     * 是否需要排序，默认进行排序\n     * @type {Boolean}\n     */\n\n    this.sortable = true;\n    this.tickCount = 5;\n    /**\n     * 时间格式化\n     * @type {String}\n     */\n\n    this.mask = 'YYYY-MM-DD';\n  };\n\n  _proto.init = function init() {\n    var self = this;\n    var values = this.values; // 针对时间分类类型，会将时间统一转换为时间戳\n\n    each(values, function (v, i) {\n      values[i] = self._toTimeStamp(v);\n    });\n\n    if (this.sortable) {\n      // 允许排序\n      values.sort(function (v1, v2) {\n        return v1 - v2;\n      });\n    }\n\n    if (!self.ticks) {\n      self.ticks = this.calculateTicks();\n    }\n  }\n  /**\n   * 计算 ticks\n   * @return {array} 返回 ticks 数组\n   */\n  ;\n\n  _proto.calculateTicks = function calculateTicks() {\n    var self = this;\n    var count = self.tickCount;\n    var ticks;\n\n    if (count) {\n      var temp = catAuto({\n        maxCount: count,\n        data: self.values,\n        isRounding: self.isRounding\n      });\n      ticks = temp.ticks;\n    } else {\n      ticks = self.values;\n    }\n\n    return ticks;\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.translate = function translate(value) {\n    value = this._toTimeStamp(value);\n    var index = this.values.indexOf(value);\n\n    if (index === -1) {\n      if (isNumber(value) && value < this.values.length) {\n        index = value;\n      } else {\n        index = NaN;\n      }\n    }\n\n    return index;\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.scale = function scale(value) {\n    var rangeMin = this.rangeMin();\n    var rangeMax = this.rangeMax();\n    var index = this.translate(value);\n    var percent;\n\n    if (this.values.length === 1 || isNaN(index)) {\n      // is index is NAN should not be set as 0\n      percent = index;\n    } else if (index > -1) {\n      percent = index / (this.values.length - 1);\n    } else {\n      percent = 0;\n    }\n\n    return rangeMin + percent * (rangeMax - rangeMin);\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.getText = function getText(value) {\n    var result = '';\n    var index = this.translate(value);\n\n    if (index > -1) {\n      result = this.values[index];\n    } else {\n      result = value;\n    }\n\n    var formatter = this.formatter;\n    result = parseInt(result, 10);\n    result = formatter ? formatter(result) : fecha.format(result, this.mask);\n    return result;\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.getTicks = function getTicks() {\n    var self = this;\n    var ticks = this.ticks;\n    var rst = [];\n    each(ticks, function (tick) {\n      var obj;\n\n      if (isObject(tick)) {\n        obj = tick;\n      } else {\n        obj = {\n          text: isString(tick) ? tick : self.getText(tick),\n          value: self.scale(tick),\n          tickValue: tick // 用于坐标轴上文本动画时确定前后帧的对应关系\n\n        };\n      }\n\n      rst.push(obj);\n    });\n    return rst;\n  } // 将时间转换为时间戳\n  ;\n\n  _proto._toTimeStamp = function _toTimeStamp(value) {\n    return TimeUtil.toTimeStamp(value);\n  };\n\n  return TimeCategory;\n}(Category);\n\nBase.TimeCat = TimeCategory;\nmodule.exports = TimeCategory;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_scale@0.1.4@@antv/scale/lib/time-cat.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Base","require","Category","fecha","catAuto","TimeUtil","each","isNumber","isObject","isString","TimeCategory","_Category","apply","arguments","_proto","_initDefaultCfg","call","type","sortable","tickCount","mask","init","self","values","v","i","_toTimeStamp","sort","v1","v2","ticks","calculateTicks","count","temp","maxCount","data","isRounding","translate","value","index","indexOf","length","NaN","scale","rangeMin","rangeMax","percent","isNaN","getText","result","formatter","parseInt","format","getTicks","rst","tick","obj","text","tickValue","push","toTimeStamp","TimeCat","module","exports"],"mappings":"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","sourcesContent":["function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/**\n * @fileOverview 时间数据作为分类类型\n * @author dxq613@gmail.com\n */\nvar Base = require('./base');\n\nvar Category = require('./category');\n\nvar fecha = require('fecha');\n\nvar catAuto = require('./auto/cat');\n\nvar TimeUtil = require('./time-util');\n\nvar each = require('@antv/util/lib/each');\n\nvar isNumber = require('@antv/util/lib/type/is-number');\n\nvar isObject = require('@antv/util/lib/type/is-object');\n\nvar isString = require('@antv/util/lib/type/is-string');\n/**\n * 度量的构造函数\n * @class Scale.TimeCategory\n */\n\n\nvar TimeCategory =\n/*#__PURE__*/\nfunction (_Category) {\n  _inheritsLoose(TimeCategory, _Category);\n\n  function TimeCategory() {\n    return _Category.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeCategory.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    _Category.prototype._initDefaultCfg.call(this);\n\n    this.type = 'timeCat';\n    /**\n     * 是否需要排序，默认进行排序\n     * @type {Boolean}\n     */\n\n    this.sortable = true;\n    this.tickCount = 5;\n    /**\n     * 时间格式化\n     * @type {String}\n     */\n\n    this.mask = 'YYYY-MM-DD';\n  };\n\n  _proto.init = function init() {\n    var self = this;\n    var values = this.values; // 针对时间分类类型，会将时间统一转换为时间戳\n\n    each(values, function (v, i) {\n      values[i] = self._toTimeStamp(v);\n    });\n\n    if (this.sortable) {\n      // 允许排序\n      values.sort(function (v1, v2) {\n        return v1 - v2;\n      });\n    }\n\n    if (!self.ticks) {\n      self.ticks = this.calculateTicks();\n    }\n  }\n  /**\n   * 计算 ticks\n   * @return {array} 返回 ticks 数组\n   */\n  ;\n\n  _proto.calculateTicks = function calculateTicks() {\n    var self = this;\n    var count = self.tickCount;\n    var ticks;\n\n    if (count) {\n      var temp = catAuto({\n        maxCount: count,\n        data: self.values,\n        isRounding: self.isRounding\n      });\n      ticks = temp.ticks;\n    } else {\n      ticks = self.values;\n    }\n\n    return ticks;\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.translate = function translate(value) {\n    value = this._toTimeStamp(value);\n    var index = this.values.indexOf(value);\n\n    if (index === -1) {\n      if (isNumber(value) && value < this.values.length) {\n        index = value;\n      } else {\n        index = NaN;\n      }\n    }\n\n    return index;\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.scale = function scale(value) {\n    var rangeMin = this.rangeMin();\n    var rangeMax = this.rangeMax();\n    var index = this.translate(value);\n    var percent;\n\n    if (this.values.length === 1 || isNaN(index)) {\n      // is index is NAN should not be set as 0\n      percent = index;\n    } else if (index > -1) {\n      percent = index / (this.values.length - 1);\n    } else {\n      percent = 0;\n    }\n\n    return rangeMin + percent * (rangeMax - rangeMin);\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.getText = function getText(value) {\n    var result = '';\n    var index = this.translate(value);\n\n    if (index > -1) {\n      result = this.values[index];\n    } else {\n      result = value;\n    }\n\n    var formatter = this.formatter;\n    result = parseInt(result, 10);\n    result = formatter ? formatter(result) : fecha.format(result, this.mask);\n    return result;\n  }\n  /**\n   * @override\n   */\n  ;\n\n  _proto.getTicks = function getTicks() {\n    var self = this;\n    var ticks = this.ticks;\n    var rst = [];\n    each(ticks, function (tick) {\n      var obj;\n\n      if (isObject(tick)) {\n        obj = tick;\n      } else {\n        obj = {\n          text: isString(tick) ? tick : self.getText(tick),\n          value: self.scale(tick),\n          tickValue: tick // 用于坐标轴上文本动画时确定前后帧的对应关系\n\n        };\n      }\n\n      rst.push(obj);\n    });\n    return rst;\n  } // 将时间转换为时间戳\n  ;\n\n  _proto._toTimeStamp = function _toTimeStamp(value) {\n    return TimeUtil.toTimeStamp(value);\n  };\n\n  return TimeCategory;\n}(Category);\n\nBase.TimeCat = TimeCategory;\nmodule.exports = TimeCategory;"]},"metadata":{},"sourceType":"script"}