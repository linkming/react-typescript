{"ast":null,"code":"const Util = require('../util/common');\n\nclass Plot {\n  constructor(cfg) {\n    Util.mix(this, cfg);\n\n    this._init();\n  }\n\n  _init() {\n    const self = this;\n    const start = self.start;\n    const end = self.end;\n    const xMin = Math.min(start.x, end.x);\n    const xMax = Math.max(start.x, end.x);\n    const yMin = Math.min(start.y, end.y);\n    const yMax = Math.max(start.y, end.y);\n    this.tl = {\n      x: xMin,\n      y: yMin\n    };\n    this.tr = {\n      x: xMax,\n      y: yMin\n    };\n    this.bl = {\n      x: xMin,\n      y: yMax\n    };\n    this.br = {\n      x: xMax,\n      y: yMax\n    };\n    this.width = xMax - xMin;\n    this.height = yMax - yMin;\n  }\n  /**\n   * reset\n   * @param  {Object} start start point\n   * @param  {Object} end end point\n   */\n\n\n  reset(start, end) {\n    this.start = start;\n    this.end = end;\n\n    this._init();\n  }\n  /**\n   * check the point is in the range of plot\n   * @param  {Nubmer}  x x value\n   * @param  {[type]}  y y value\n   * @return {Boolean} return the result\n   */\n\n\n  isInRange(x, y) {\n    if (Util.isObject(x)) {\n      y = x.y;\n      x = x.x;\n    }\n\n    const tl = this.tl;\n    const br = this.br;\n    return tl.x <= x && x <= br.x && tl.y <= y && y <= br.y;\n  }\n\n}\n\nmodule.exports = Plot;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/chart/plot.js"],"names":["Util","require","Plot","constructor","cfg","mix","_init","self","start","end","xMin","Math","min","x","xMax","max","yMin","y","yMax","tl","tr","bl","br","width","height","reset","isInRange","isObject","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACfJ,IAAAA,IAAI,CAACK,GAAL,CAAS,IAAT,EAAeD,GAAf;;AACA,SAAKE,KAAL;AACD;;AAEDA,EAAAA,KAAK,GAAG;AACN,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;AACA,UAAMC,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACK,CAAf,EAAkBJ,GAAG,CAACI,CAAtB,CAAb;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACI,GAAL,CAASP,KAAK,CAACK,CAAf,EAAkBJ,GAAG,CAACI,CAAtB,CAAb;AACA,UAAMG,IAAI,GAAGL,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACS,CAAf,EAAkBR,GAAG,CAACQ,CAAtB,CAAb;AACA,UAAMC,IAAI,GAAGP,IAAI,CAACI,GAAL,CAASP,KAAK,CAACS,CAAf,EAAkBR,GAAG,CAACQ,CAAtB,CAAb;AAEA,SAAKE,EAAL,GAAU;AACRN,MAAAA,CAAC,EAAEH,IADK;AAERO,MAAAA,CAAC,EAAED;AAFK,KAAV;AAIA,SAAKI,EAAL,GAAU;AACRP,MAAAA,CAAC,EAAEC,IADK;AAERG,MAAAA,CAAC,EAAED;AAFK,KAAV;AAIA,SAAKK,EAAL,GAAU;AACRR,MAAAA,CAAC,EAAEH,IADK;AAERO,MAAAA,CAAC,EAAEC;AAFK,KAAV;AAIA,SAAKI,EAAL,GAAU;AACRT,MAAAA,CAAC,EAAEC,IADK;AAERG,MAAAA,CAAC,EAAEC;AAFK,KAAV;AAIA,SAAKK,KAAL,GAAaT,IAAI,GAAGJ,IAApB;AACA,SAAKc,MAAL,GAAcN,IAAI,GAAGF,IAArB;AACD;AAED;;;;;;;AAKAS,EAAAA,KAAK,CAACjB,KAAD,EAAQC,GAAR,EAAa;AAChB,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;;AACA,SAAKH,KAAL;AACD;AAED;;;;;;;;AAMAoB,EAAAA,SAAS,CAACb,CAAD,EAAII,CAAJ,EAAO;AACd,QAAIjB,IAAI,CAAC2B,QAAL,CAAcd,CAAd,CAAJ,EAAsB;AACpBI,MAAAA,CAAC,GAAGJ,CAAC,CAACI,CAAN;AACAJ,MAAAA,CAAC,GAAGA,CAAC,CAACA,CAAN;AACD;;AACD,UAAMM,EAAE,GAAG,KAAKA,EAAhB;AACA,UAAMG,EAAE,GAAG,KAAKA,EAAhB;AACA,WAAOH,EAAE,CAACN,CAAH,IAAQA,CAAR,IAAaA,CAAC,IAAIS,EAAE,CAACT,CAArB,IAA0BM,EAAE,CAACF,CAAH,IAAQA,CAAlC,IAAuCA,CAAC,IAAIK,EAAE,CAACL,CAAtD;AACD;;AA5DQ;;AA+DXW,MAAM,CAACC,OAAP,GAAiB3B,IAAjB","sourcesContent":["const Util = require('../util/common');\nclass Plot {\n  constructor(cfg) {\n    Util.mix(this, cfg);\n    this._init();\n  }\n\n  _init() {\n    const self = this;\n    const start = self.start;\n    const end = self.end;\n    const xMin = Math.min(start.x, end.x);\n    const xMax = Math.max(start.x, end.x);\n    const yMin = Math.min(start.y, end.y);\n    const yMax = Math.max(start.y, end.y);\n\n    this.tl = {\n      x: xMin,\n      y: yMin\n    };\n    this.tr = {\n      x: xMax,\n      y: yMin\n    };\n    this.bl = {\n      x: xMin,\n      y: yMax\n    };\n    this.br = {\n      x: xMax,\n      y: yMax\n    };\n    this.width = xMax - xMin;\n    this.height = yMax - yMin;\n  }\n\n  /**\n   * reset\n   * @param  {Object} start start point\n   * @param  {Object} end end point\n   */\n  reset(start, end) {\n    this.start = start;\n    this.end = end;\n    this._init();\n  }\n\n  /**\n   * check the point is in the range of plot\n   * @param  {Nubmer}  x x value\n   * @param  {[type]}  y y value\n   * @return {Boolean} return the result\n   */\n  isInRange(x, y) {\n    if (Util.isObject(x)) {\n      y = x.y;\n      x = x.x;\n    }\n    const tl = this.tl;\n    const br = this.br;\n    return tl.x <= x && x <= br.x && tl.y <= y && y <= br.y;\n  }\n}\n\nmodule.exports = Plot;\n"]},"metadata":{},"sourceType":"script"}