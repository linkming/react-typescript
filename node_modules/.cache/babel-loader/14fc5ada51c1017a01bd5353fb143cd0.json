{"ast":null,"code":"const Util = require('../../util/common');\n\nconst Shape = require('./shape');\n\nconst ShapeUtil = require('./util');\n\nconst Global = require('../../global'); // register line geom\n\n\nconst Line = Shape.registerFactory('line', {\n  defaultShapeType: 'line'\n});\n\nfunction getStyle(cfg) {\n  const style = {\n    strokeStyle: cfg.color\n  };\n\n  if (cfg.size >= 0) {\n    style.lineWidth = cfg.size;\n  }\n\n  Util.mix(style, cfg.style);\n  return Util.mix({}, Global.shape.line, style);\n}\n\nfunction drawLines(cfg, container, style, smooth) {\n  const points = cfg.points;\n\n  if (points.length && Util.isArray(points[0].y)) {\n    const topPoints = [];\n    const bottomPoints = [];\n\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      const tmp = ShapeUtil.splitPoints(point);\n      bottomPoints.push(tmp[0]);\n      topPoints.push(tmp[1]);\n    }\n\n    if (cfg.isInCircle) {\n      topPoints.push(topPoints[0]);\n      bottomPoints.push(bottomPoints[0]);\n    }\n\n    if (cfg.isStack) {\n      return container.addShape('Polyline', {\n        className: 'line',\n        attrs: Util.mix({\n          points: topPoints,\n          smooth\n        }, style)\n      });\n    }\n\n    const topShape = container.addShape('Polyline', {\n      className: 'line',\n      attrs: Util.mix({\n        points: topPoints,\n        smooth\n      }, style)\n    });\n    const bottomShape = container.addShape('Polyline', {\n      className: 'line',\n      attrs: Util.mix({\n        points: bottomPoints,\n        smooth\n      }, style)\n    });\n    return [topShape, bottomShape];\n  }\n\n  if (cfg.isInCircle) {\n    points.push(points[0]);\n  }\n\n  return container.addShape('Polyline', {\n    className: 'line',\n    attrs: Util.mix({\n      points,\n      smooth\n    }, style)\n  });\n}\n\nconst SHAPES = ['line', 'smooth', 'dash'];\nUtil.each(SHAPES, function (shapeType) {\n  Shape.registerShape('line', shapeType, {\n    draw(cfg, container) {\n      const smooth = shapeType === 'smooth';\n      const style = getStyle(cfg);\n\n      if (shapeType === 'dash') {\n        style.lineDash = Global.lineDash;\n      }\n\n      return drawLines(cfg, container, style, smooth);\n    }\n\n  });\n});\nmodule.exports = Line;","map":{"version":3,"sources":["/home/sunxuming/react-typescript/node_modules/_@antv_f2@3.6.0-alpha.2@@antv/f2/src/geom/shape/line.js"],"names":["Util","require","Shape","ShapeUtil","Global","Line","registerFactory","defaultShapeType","getStyle","cfg","style","strokeStyle","color","size","lineWidth","mix","shape","line","drawLines","container","smooth","points","length","isArray","y","topPoints","bottomPoints","i","len","point","tmp","splitPoints","push","isInCircle","isStack","addShape","className","attrs","topShape","bottomShape","SHAPES","each","shapeType","registerShape","draw","lineDash","module","exports"],"mappings":"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","sourcesContent":["const Util = require('../../util/common');\nconst Shape = require('./shape');\nconst ShapeUtil = require('./util');\nconst Global = require('../../global');\n\n// register line geom\nconst Line = Shape.registerFactory('line', {\n  defaultShapeType: 'line'\n});\n\nfunction getStyle(cfg) {\n  const style = {\n    strokeStyle: cfg.color\n  };\n  if (cfg.size >= 0) {\n    style.lineWidth = cfg.size;\n  }\n  Util.mix(style, cfg.style);\n\n  return Util.mix({}, Global.shape.line, style);\n}\n\nfunction drawLines(cfg, container, style, smooth) {\n  const points = cfg.points;\n  if (points.length && Util.isArray(points[0].y)) {\n    const topPoints = [];\n    const bottomPoints = [];\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      const tmp = ShapeUtil.splitPoints(point);\n      bottomPoints.push(tmp[0]);\n      topPoints.push(tmp[1]);\n    }\n    if (cfg.isInCircle) {\n      topPoints.push(topPoints[0]);\n      bottomPoints.push(bottomPoints[0]);\n    }\n    if (cfg.isStack) {\n      return container.addShape('Polyline', {\n        className: 'line',\n        attrs: Util.mix({\n          points: topPoints,\n          smooth\n        }, style)\n      });\n    }\n    const topShape = container.addShape('Polyline', {\n      className: 'line',\n      attrs: Util.mix({\n        points: topPoints,\n        smooth\n      }, style)\n    });\n    const bottomShape = container.addShape('Polyline', {\n      className: 'line',\n      attrs: Util.mix({\n        points: bottomPoints,\n        smooth\n      }, style)\n    });\n\n    return [ topShape, bottomShape ];\n  }\n  if (cfg.isInCircle) {\n    points.push(points[0]);\n  }\n  return container.addShape('Polyline', {\n    className: 'line',\n    attrs: Util.mix({\n      points,\n      smooth\n    }, style)\n  });\n}\n\nconst SHAPES = [ 'line', 'smooth', 'dash' ];\nUtil.each(SHAPES, function(shapeType) {\n  Shape.registerShape('line', shapeType, {\n    draw(cfg, container) {\n      const smooth = (shapeType === 'smooth');\n      const style = getStyle(cfg);\n      if (shapeType === 'dash') {\n        style.lineDash = Global.lineDash;\n      }\n\n      return drawLines(cfg, container, style, smooth);\n    }\n  });\n});\n\nmodule.exports = Line;\n"]},"metadata":{},"sourceType":"script"}